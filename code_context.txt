// File: html/PlantProfilePage.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plant Profile | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/plant_profile.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>
<body>
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>

    <main class="plant-profile-main image-background">
        <main>
            <div class="main-container image-background">
                <div class="user-profile-card w-70">
                    <div class="photo-profile w-100">
                        <div class="logo-image" id="plant-image">
                            <img src="../Images/website_Icon/LittleCactus.jpg" alt="Plant Image" style="width: 100%; border-radius: var(--border-radius);">
                        </div>
        
                        <!-- Hashtags, Collection Name, etc. -->
                        <div class="form-group w-100">
                            <label class="label">Hashtags</label>
                            <p id="hashtags" class="form-control">#Green #Herb #Healthy</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Collection Name</label>
                            <p id="collection-name" class="form-control">Herbal Garden 2024</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Date Of Collection</label>
                            <p id="date-collection" class="form-control">April 10, 2024</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Collector Name</label>
                            <p id="collector" class="form-control">John Doe</p>
                        </div>
                    </div>
        
                    <div class="info-profile w-100">
                        <!-- Plant Details -->
                        <div class="form-group w-100">
                            <label class="label">Common Name</label>
                            <p id="common-name" class="form-control">Lavender</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Scientific Name</label>
                            <p id="scientific-name" class="form-control">Lavandula</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Family</label>
                            <p id="family" class="form-control">Lamiaceae</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Genus</label>
                            <p id="genus" class="form-control">Lavandula</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Species</label>
                            <p id="species" class="form-control">L. angustifolia</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Place</label>
                            <p id="place" class="form-control">Mediterranean</p>
                        </div>
                        <div class="form-group w-100">
                            <label class="label">Color</label>
                            <p id="color-plant" class="form-control">Violet</p>
                        </div>
        
                        <!-- Action Buttons -->
                        <div class="container-buttons w-100">
                            <div class="form-group w-100">
                                <button class="button button1" onclick="location.href = '../html/collection.html'">View My Garden</button>
                            </div>
                            <div class="form-group w-100">
                                <button class="button button2" id="edit-plant-button">Edit Plant</button>
                            </div>
                            <div class="form-group w-100">
                                <button class="button button2" id="delete-plant-button">Delete Plant</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        
        
    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>
    <script src="../scripts/script.js"></script>
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>

// File: html/about.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/cards.css">
    <link rel="stylesheet" href="../css/aboutUsCards.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>

    <main>
        <div class="card">
            <div class="wrap animate pop">
                <div class="overlay">
                    <div class="overlay-content animate slide-left delay-2">
                        <h1 class="animate slide-left pop delay-4">Our Goals</h1>
                        <p class="animate slide-left pop delay-5 smallTitle" id="colorGreen">Herbal Web <em>Manager</em></p>
                    </div>
                    <div class="image-content animate slide delay-5" id="card1"></div>
                    <div class="dots animate">
                        <div class="dot animate slide-up delay-6"></div>
                        <div class="dot animate slide-up delay-7"></div>
                        <div class="dot animate slide-up delay-8"></div>
                    </div>
                </div>
                <div class="text">
                    <p><img class="inset" src="../images/website_Icon/plant.png" alt="" width="150">‎  ‎  ‎  At HeMa, our primary goal is to bridge the gap between botanical enthusiasts and the fascinating world of plant biodiversity through innovative digital solutions. We aspire to create a dynamic online platform that serves as a comprehensive resource for plant exploration, education, and conservation.</p>
                    <p>‎  ‎  ‎ ‎ Some of our goals are to facilitate exploration and discovery of new species, to promote education and awareness of protected and rare plants, to encourage collaboration and community bonding to advance conservation and sustainability and to create a connection point between nature and technology through an internal drive that aims to innovate and advance this topic</p>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="wrap animate pop">
                <div class="overlay">
                    <div class="overlay-content animate slide-left delay-2">
                        <h1 class="animate slide-left pop delay-4">What we Offer?</h1>
                        <p class="animate slide-left pop delay-5"></p>
                    </div>
                    <div class="image-content animate slide delay-5" id="card2"></div>
                    <div class="dots animate">
                        <div class="dot animate slide-up delay-6"></div>
                        <div class="dot animate slide-up delay-7"></div>
                        <div class="dot animate slide-up delay-8"></div>
                    </div>
                </div>
                <div class="text">
                    <p><img class="inset" src="../images/background/whatweoffer.webp" alt="">‎  ‎  ‎  At HeMa, we offer a comprehensive suite of features and resources designed to enhance your botanical exploration and learning experience. Here's what you can expect to find here:</p>
                    <ul>
                        <li><p>Comprehensive Digital Herbarium: Access a vast collection of pressed plant specimens from around the world, meticulously cataloged and annotated for easy exploration.</p></li>
                        <li><p>Advanced Multi-Criteria Search: Find specific plants quickly and efficiently using our advanced search filters, including species, habitat, geographic location, and more.</p></li>
                        <li><p>Curated Themed Collections: Explore curated collections tailored to specific interests and themes, such as medicinal plants, native flora, rare species, and more.</p></li>
                        <li><p>Educational Resources: Expand your botanical knowledge with informative articles, guides, and interactive tools covering a wide range of topics, from plant identification to ecological conservation.</p></li>
                        <li><p>Community Engagement: Connect with a vibrant community of plant enthusiasts, researchers, educators, and conservationists. Share your discoveries, exchange ideas, and collaborate on projects that contribute to our collective understanding of plant biodiversity.</p></li>
                        <li><p>Conservation Initiatives: oin us in our commitment to protecting and preserving our planet's precious plant life.</p></li>
                      </ul>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="wrap animate pop" id="whoAreWe">
                <div class="overlay">
                    <div class="overlay-content animate slide-left delay-2">
                        <h1 class="animate slide-left pop delay-4">Who are we?</h1>
                        <p class="animate slide-left pop delay-5"></p>
                    </div>
                    <div class="image-content animate slide delay-5" id="card3"></div>
                    <div class="dots animate">
                        <div class="dot animate slide-up delay-6"></div>
                        <div class="dot animate slide-up delay-7"></div>
                        <div class="dot animate slide-up delay-8"></div>
                    </div>
                </div>
                <div class="text">
                    <img class="inset" src="../images/background/roscaAlexandru.png" alt="">
                    <img class="inset" src="../images/background/popaAndrei.png" alt="">
                    <p>We are Rosca Alexandru David and Popa Andrei, two passionate students embarking on a journey at the esteemed Alexandru Ioan Cuza University, where we pursue our studies at the renowned Faculty of Computer Science.</p>
                    <p>‎  ‎  ‎ Beyond the confines of academia, we are dreamers with a shared vision fueled by curiosity, and a profound love for the transformative power of technology.</p>
                    <p>‎  ‎  ‎ ‎ As second-year students, we stand at the threshold of possibility, eager to immerse ourselves in the dynamic world of computer science and explore the endless horizons it offers. Guided by our insatiable thirst for knowledge and our unwavering commitment to excellence, we are driven by a singular purpose: to push the boundaries of what is possible and leave an indelible mark on the ever-evolving landscape of technology.</p>
                </div>
            </div>
        </div>
        

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/admin.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/admin.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <header>
        <p class="gradient_Text"><a href="./admin.html">Admin Dashboard</a></p>
    </header>
    <main>


            <div id="adminPanel">

                <p id="controlPanel">Control Panel</p>

                <div id="panelLine"></div>

                <section id="listClients">
                    <h2>List of Clients</h2>
                    <p>Delete clients or modify their albums</p>
                </section>

                <section id="generateReports">
                    <h2>Generate Reports</h2>
                    <p>Generate reports of clients and plants</p>
                </section>

                <section id="adminLogout">
                    <h2>Logout</h2>
                    <p>Logout and go back to the main screen</p>
                </section>

                <section id="documentation">
                    <h2>Project Documentation</h2>
                    <p>The project's scholarly documentation</p>
                </section>

                <section id="error">
                    <h2>Error404 Page</h2>
                    <p>Interact with the error404 webpage</p>
                </section>

            </div>
            <div class="f-wrapper f-wrapper--1">
                <div class="f">
                    <div class="flower__leaf flower__leaf--1"></div>
                    <div class="flower__leaf flower__leaf--2"></div>
                    <div class="flower__leaf flower__leaf--3"></div>
                    <div class="flower__leaf flower__leaf--4"></div>
                    <div class="flower__leaf flower__leaf--5"></div>
                    <div class="flower__leaf flower__leaf--6"></div>
                    <div class="flower__leaf flower__leaf--7"></div>
                </div>
            </div>

            <div class="f-wrapper f-wrapper--2">
                <div class="f">
                    <div class="flower__leaf flower__leaf--1"></div>
                    <div class="flower__leaf flower__leaf--2"></div>
                    <div class="flower__leaf flower__leaf--3"></div>
                    <div class="flower__leaf flower__leaf--4"></div>
                    <div class="flower__leaf flower__leaf--5"></div>
                    <div class="flower__leaf flower__leaf--6"></div>
                    <div class="flower__leaf flower__leaf--7"></div>
                </div>
            </div>

            <div class="f-wrapper f-wrapper--3">
                <div class="f">
                    <div class="flower__leaf flower__leaf--1"></div>
                    <div class="flower__leaf flower__leaf--2"></div>
                    <div class="flower__leaf flower__leaf--3"></div>
                    <div class="flower__leaf flower__leaf--4"></div>
                    <div class="flower__leaf flower__leaf--5"></div>
                    <div class="flower__leaf flower__leaf--6"></div>
                    <div class="flower__leaf flower__leaf--7"></div>
                </div>
            </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/admin.js"></script>
</body>
</html>
// File: html/blog.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blogs | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/blogList.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>

        <div class="container">

            <div id="titleHowToPress">
                <h1>Blogs</h1>
            </div>

            <div id="searchBar">
            <input class="textInput" id="nameInput" placeholder="Search by title">
            <input class="textInput" id="clientInput" placeholder="Search by user">
            <input class="textInput" id="dateInput" placeholder="Search by date(dd/mm/yyyy)">
            </div>

            <div class="blog-post" id="1">
                <h2>How to Press Plants</h2>
                <p>Learn the timeless art of pressing plants to preserve their beauty for years to come. Discover simple techniques for preparing and pressing flowers, leaves, and other botanical specimens, turning them into stunning keepsakes, decorative elements, or unique artworks.</p>
            </div>

            <div class="blog-post" id="2">
                <h2>Seasonal Gardening</h2>
              <p>Unlock the secrets of successful seasonal gardening and cultivate a thriving garden year-round. Discover essential tips and tricks for planting, nurturing, and harvesting your garden throughout the changing seasons. From spring blooms to winter harvests, optimize your gardening efforts and enjoy a bountiful harvest in every season.</p>

            </div>

            <div class="blog-post" id="3">

              <h2>Urban Gardening</h2>
              <p>Explore the possibilities of urban gardening and discover innovative ways to cultivate green spaces in small, urban environments. Whether you have a tiny balcony, rooftop, or windowsill, learn how to maximize your space and grow your own fresh produce, herbs, and flowers. From vertical gardens to community plots, unleash your green thumb and transform your urban oasis into a vibrant, sustainable paradise.</p>
            
            </div>

            <div id="AddNew"><p>Add new Blog</p></div>
          
          </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/blogs.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/blogPage.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‎ </title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/blogPageFlower.css">
    <link rel="stylesheet" href="../css/blogPage.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>
       
        <div class="container">
          
        </div>

        <div id="comments">
          <div class="comment-box">
            <textarea class="comment-input" placeholder="Write your comment here..."></textarea>
            <button class="add-comment-btn">Add Comment</button>
          </div>
        </div> 

        <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
    <script src="../scripts/blogPage.js"></script>
</body>
</html>
// File: html/collection.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collection1 | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/cards.css">
    <link rel="stylesheet" href="../css/aboutUsCards.css">
    <link rel="stylesheet" href="../css/collection.css">
    <link rel="stylesheet" href="../css/hover-cards.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>

      <div id="modal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <form>
            <div id="updateTitle">
                <p>UPDATE YOUR COLLECTION</p>
            </div>
            <div id="updateLine"></div>
            <input type="text" placeholder="Title" name="title">
            <input type="text" placeholder="Descripton" name="description">
            <div id="updateLine1"></div>
            <label for="isShared">Share Collection?:</label>
            <input type="checkbox" id="isShared" name="isShared" value=1>


            <button type="submit" id="updateDataButton">Save</button>
          </form>
        </div>
      </div>

        <button id="addPlantButton" class="floating-button" title="Add New Button">&#43;</button>
        <div id="cont">
            <div id="title">
              <p id="titleText"></p>
              <p class="smallDetails" id="left"></p>
              <p class="smallDetails" id="right"></p>
            </div>
            <div id="descripton">
                <h3>Descripton</h3>
                <div id="line"></div>
                <p id="descriptionText"></p>
            </div>
            <div id="collectionButtons">
              <button class="format-btn" id="edit">Edit Collection</button>
              <button class="format-btn" id="delete">Delete Collection</button>
            </div>
            <div class="container" id="collectionContainer">
                <p class="no-collections-message">No plants have been added yet.</p>
            </div>
        </div>
    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <script src="../scripts/collection.js"></script>
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/contact.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/contact.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
  <div class="nav">
    <input type="checkbox" id="nav-check">
    <div class="nav-header">
      <div class="nav-title">
        <div class="left">
            <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
            <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
        </div>
      </div>
    </div>
    <div class="nav-btn">
      <label for="nav-check">
        <span></span>
        <span></span>
        <span></span>
      </label>
    </div>
    
    <div class="nav-links">
      <a href="index.html" >Home</a>
      <a href="about.html" >About</a>
      <a href="contact.html" >Contact</a>
      <a id="logout" href="landingPage.html">Logout</a>
    </div>
  </div>
    <main>
        <div id="container">
            <h1>&bull; Keep in Touch &bull;</h1>
            <div class="underline">
            </div>
            <div class="icon_wrapper">
              <svg class="icon" viewBox="0 0 145.192 145.192">
                <path d="M126.82,32.694c-2.804,0-5.08,2.273-5.08,5.075v2.721c-1.462,0-2.646,1.185-2.646,2.647v1.995    c0,1.585,1.286,2.873,2.874,2.873h20.577c1.462,0,2.646-1.185,2.646-2.647v-3.041c0-1.009-0.816-1.825-1.823-1.825v-2.722    c0-2.802-2.276-5.075-5.079-5.075h-1.985v-3.829c0-3.816-3.095-6.912-6.913-6.912h-0.589h-20.45c0-2.67-2.164-4.835-4.833-4.835    H56.843c-2.67,0-4.835,2.165-4.835,4.835H34.356v-3.384h-9.563v3.384v1.178h-7.061v1.416c-2.67,0.27-10.17,1.424-13.882,5.972    c-1.773,2.17-2.44,4.791-1.983,7.793c0.463,3.043,1.271,6.346,2.128,9.841c2.354,9.616,5.024,20.515,0.549,28.077    C2.647,79.44-3.125,90.589,2.201,99.547c4.123,6.935,13.701,10.44,28.5,10.44c1.186,0,2.405-0.023,3.658-0.068v9.028h-0.296    c-2.516,0-4.558,2.039-4.558,4.558v4.566h100.04v-4.564c0-2.519-2.039-4.558-4.558-4.558h-0.297V84.631h0.297    c2.519,0,4.558-2.037,4.558-4.556v-0.009c0-2.516-2.039-4.556-4.556-4.556l-36.786-0.009V61.973c0-2.193-1.777-3.971-3.972-3.971    v-4.711h0.456c1.629,0,2.952-1.32,2.952-2.949h14.227V34.459h1.658c2.672,0,4.834-2.165,4.834-4.834h20.45v3.069H126.82z     M34.06,75.511c-2.518,0-4.558,2.04-4.558,4.556v0.009c0,2.519,2.042,4.556,4.558,4.556h0.296v24.12l-0.042-1.168    c-15.994,0.574-26.122-2.523-30.106-9.229C-0.464,90.5,4.822,80.347,6.55,77.423c4.964-8.382,2.173-19.774-0.29-29.825    c-0.843-3.442-1.639-6.696-2.088-9.638c-0.354-2.35,0.129-4.3,1.484-5.958c3.029-3.714,9.509-4.805,12.076-5.1v1.233h7.061v1.49    v2.684c-2.403,1.114-4.153,2.997-4.676,5.237H18.15c-0.584,0-1.056,0.474-1.056,1.056v0.83c0,0.584,0.475,1.056,1.056,1.056h1.984    c0.561,2.18,2.304,3.999,4.658,5.092v0.029c0,0-2.282,20.823,16.479,22.099v1.102c0,1.177,0.955,2.133,2.133,2.133h3.297    c1.178,0,2.133-0.956,2.133-2.133V50.135c0-1.177-0.955-2.132-2.133-2.132h-3.297c-1.178,0-2.133,0.955-2.133,2.132    c-1.575-0.235-5.532-1.17-6.635-4.547c2.36-1.092,4.109-2.913,4.669-5.097h1.308c0.722,0,1.309-0.584,1.309-1.308v-0.578    c0-0.584-0.475-1.056-1.056-1.056h-1.539c-0.542-2.332-2.416-4.271-4.968-5.363v-2.559h17.651c0,2.67,2.166,4.835,4.836,4.835 h2.392v15.88h13.639c0,1.629,1.321,2.949,2.951,2.949h0.899v4.711c-2.194,0-3.972,1.778-3.972,3.971v13.529L34.06,75.511z     M95.188,101.78c0,8.655-7.012,15.665-15.664,15.665c-8.653,0-15.667-7.01-15.667-15.665c0-8.647,7.014-15.664,15.667-15.664    C88.177,86.116,95.188,93.132,95.188,101.78z M97.189,45.669h-9.556c0-0.896-0.726-1.62-1.619-1.62H74.494    c-0.896,0-1.621,0.727-1.621,1.62h-8.967v-11.21h33.283V45.669z"></path>
                <path d="M70.865,101.78c0,4.774,3.886,8.657,8.66,8.657c4.774,0,8.657-3.883,8.657-8.657c0-4.773-3.883-8.656-8.657-8.656    C74.751,93.124,70.865,97.006,70.865,101.78z"></path>
              </svg>
            </div>
            <form action="/sendEmail" method="post" id="contact_form">
              <div id="name">
                <label for="name_input"></label>
                <input type="text" placeholder="My name is" name="nume" id="name_input" autocomplete="off">
              </div>
              <div class="telephone">
                <input type="text" placeholder="My number is" name="telephone" id="telephone_input" autocomplete="off" oninput="this.setCustomValidity('')">
              </div>
              <div class="dsa">
                <input type="text" placeholder="MY E‎-MAIL IS" name="gmail" id="das" autocomplete="off">
              </div>
              <div class="subject">
                <select name="subject" id="subject_input">
                    <option disabled hidden selected value="">Subject line</option>
                    <option id="option1">I'd like to suggest a feature</option>
                    <option id="option2">I'd like to ask a question</option>
                    <option id="option3">I'd like to improve the website</option>
                    <option id="option4">I'd like to collaborate</option>
                </select>
            </div>
              <div class="message">
                <textarea name="message" placeholder="I'd like to chat about" id="message_input" cols="30" rows="5"></textarea>
              </div>
              <div class="submit">
                <input type="submit" value="Send Message" id="form_button" />
              </div>
            </form>
          </div>

          <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>
    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/contact.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/createNewBlog.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Blog | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/createNewBlog.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>

        <div class="container">

            <div id="titleHowToPress">
                <h1>Create a new Blog</h1>
            </div>

            <div class="blog-post" id="1">
                
                <h2>Blog Title:</h2>
                <input type="text" class="nameInput" name="nameInput"><br>
                
                <h2>Blog Description:</h2><br>
                <textarea class="descriptionInput" name="descriptionInput" rows="4" cols="50"></textarea><br>                

            </div>

            <div id="sectionForSections">
            </div>

            <div id="AddNewSection"><p>Add New Section</p></div>

            <div id="interactivity">
                <a href="./blog.html"><div id="AddNew"><p>Back</p></div></a>
                <div id="Save"><p>Save</p></div>
            </div>

        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>


    <script src="../scripts/footer.js"></script>
    <script src="../scripts/createNewBlog.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/error404.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Page Not Found</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/error404.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>

        <div class="rectangle">
            <p id="main404">Sorry, this page is unavailable.</p>
            <p id="sec404">The link you followed may be broken, or the page may have been removed.</p>
            <a id="linkToHome">Go back to HeMa.</a>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
    <script src="../scripts/error404.js"></script>
</body>
</html>
// File: html/feed.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feed | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/cards.css"> 
    <link rel="stylesheet" href="../css/flower.css"> 
    <link rel="stylesheet" href="../css/feed.css"> 
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>

      <div id="adminPanel" >

        <p id="controlPanel">Posts Feed</p>

        <div id="panelLine"></div>

        <section>

            <input class="textInput" id="nameInput" placeholder="Search by name">
            <input class="textInput" id="clientInput" placeholder="Search by sharer">
            <input class="textInput" id="dateInput" placeholder="Search by date(dd/mm/yyyy)">

            <select name="order" id="order_input" required>
              <option disabled hidden selected value=""> 🡦 Sort 🡧</option>
              <option id="option1">The collection's name</option>
              <option id="option2">The collection's owner</option>
              <option id="option3">The posting date</option>
            </select>

            <select name="display" id="display_input" required>
              <option disabled hidden selected value=""> 🡦 View 🡧</option>
              <option id="optionn1">Text</option>
              <option id="optionn2">Visual Spoiler</option>
            </select>

          <div id="postLine"></div>
            <div id="switch1">
            <table id="hiddenTable">
              <thead>
                  <tr>
                      <th><span>No posts could be found!</span></th>
                  </tr>
              </thead>
          </table>


            <table class="clientsTable">
              <thead>
                  <tr>
                      <th><span>Collection Name</span></th>
                      <th><span>Shared by</span></th>
                      <th><span>Posting Date</span></th>
                  </tr>
              </thead>
              <tbody class="clientsTableBody">
                  <tr>
                      <td class="scrollable-content"><span>Mountain Plants Collection</span></td>
                      <td class="scrollable-content"><span>Rosca Alexandru David</span></td>
                      <td class="scrollable-content"><span>4/10/2024</span></td>
                  </tr>
                  <tr>
                    <th colspan="3"><span>Collection Description</span></th>
                  </tr>
                  <tr>
                    <td colspan="3"><span>The plant description can have anywhere between 50-200 words so it has to go on multiple lines if neccesary</span></td>
                  </tr>
              </tbody>
              <tfoot>
                  <tr>
                      <th class="like"><span class="emoji">👍🏻</span></th>
                      <th class="dislike"><span class="emoji">👎🏻</span></th>
                      <th class="visit"><span class="emoji">🌱</span></th>
                  </tr>
              </tfoot>
          </table>
          
         <table class="clientsTable">
              <thead>
                  <tr>
                      <th><span>Collection Name</span></th>
                      <th><span>Shared by</span></th>
                      <th><span>Posting Date</span></th>
                  </tr>
              </thead>
              <tbody class="clientsTableBody">
                  <tr>
                      <td class="scrollable-content"><span>Gigi helper</span></td>
                      <td class="scrollable-content"><span>Rosca Alexandru David</span></td>
                      <td class="scrollable-content"><span>4/10/2024</span></td>
                  </tr>
                  <tr>
                    <th colspan="3"><span>Collection Description</span></th>
                  </tr>
                  <tr>
                    <td colspan="3"><span>The plant description can have anywhere between 50-200 words so it has to go on multiple lines if neccesary</span></td>
                  </tr>
              </tbody>

              <tfoot>
                  <tr>
                      <th class="like"><span class="emoji">👍🏻</span></th>
                      <th class="dislike"><span class="emoji">👎🏻</span></th>
                      <th class="visit"><span class="emoji">🌱</span></th>
                  </tr>
              </tfoot>
          </table>
  
        
        
          </div>
          <div id="switch2">

            <div class="flip-card" id="hideFlip">
              <div class="flip-card-inner">
                <div class="flip-card-front">
                  <h1 class="nothingText">🡫 Nothing here but us 🡫</h1>
                </div>
                <div class="flip-card-back">
                  <h1 class="nothingText">🡩 And the plants that surround us 🡩</h1>
                </div>
              </div>
            </div>


              <div class="flip-card">
                <div class="flip-card-inner">
                  <div class="flip-card-front">
                    <table class="clientsTable">
                      <tbody class="clientsTableBody firstPart">
                        <tr>
                          <th><span>⭯ ‎ ‎ Collection‎ ‎ ‎ ‎  Name</span></th>
                          <td class="scrollable-content"><span>Mountain Plants Collection</span></td>
                      </tr> 
                        <tr>
                          <th><span>Shared by</span></th>
                          <td class="scrollable-content"><span>Rosca Alexandru David</span></td>
                        </tr>
                        <tr>
                          <th><span>Posting Date</span></th>
                          <td class="scrollable-content"><span>4/10/2024</span></td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  <div class="flip-card-back">
                      
                    <table class="clientsTable">
                          <thead>
                            <tr>
                                <th colspan="3"><span>Collection Description</span></th>
                            </tr>
                        </thead>
                        <tbody class="clientsTableBody secondPart">
                            <tr>
                                <td colspan="3"><span>The plant description can have anywhere between 50-200 words so it has to go on multiple lines if neccesary</span></td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th class="like"><span class="emoji">👍🏻</span></th>
                                <th class="dislike"><span class="emoji">👎🏻</span></th>
                                <th class="visit"><span class="emoji">🌱</span></th>
                            </tr>
                        </tfoot>
                    </table>

                  </div>
                </div>
              </div>
              <div class="flip-card">
                <div class="flip-card-inner">
                  <div class="flip-card-front">
                    <table class="clientsTable firstPart">
                        <tbody class="clientsTableBody firstPart">
                          <tr>
                            <th><span>⭯ ‎ ‎ Collection‎ ‎ ‎ ‎  Name</span></th>
                            <td class="scrollable-content"><span>Mountain Plants Collection</span></td>
                        </tr> 
                          <tr>
                            <th><span>Shared by</span></th>
                            <td class="scrollable-content"><span>Rosca Alexandru David</span></td>
                          </tr>
                          <tr>
                            <th><span>Posting Date</span></th>
                            <td class="scrollable-content"><span>4/10/2024</span></td>
                          </tr>
                        </tbody>
                    </table>
                  </div>
                  <div class="flip-card-back">
                      
                    <table class="clientsTable secondPart">
                          <thead>
                            <tr>
                                <th colspan="3"><span>Collection Description</span></th>
                            </tr>
                        </thead>
                        <tbody class="clientsTableBody">
                            <tr>
                                <td colspan="3"><span>The plant description can have anywhere between 50-200 words so it has to go on multiple lines if neccesary</span></td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th class="like"><span class="emoji">👍🏻</span></th>
                                <th class="dislike"><span class="emoji">👎🏻</span></th>
                                <th class="visit"><span class="emoji">🌱</span></th>
                            </tr>
                        </tfoot>
                    </table>
    
                  </div>
                </div>
              </div>

              <div class="flip-card">
                <div class="flip-card-inner">
                  <div class="flip-card-front">
                    <table class="clientsTable firstPart">
                        <tbody class="clientsTableBody firstPart">
                          <tr>
                            <th><span>⭯ ‎ ‎ Collection‎ ‎ ‎ ‎  Name</span></th>
                            <td class="scrollable-content"><span>Mountain Plants Collection</span></td>
                        </tr> 
                          <tr>
                            <th><span>Shared by</span></th>
                            <td class="scrollable-content"><span>Popa Andrei</span></td>
                          </tr>
                          <tr>
                            <th><span>Posting Date</span></th>
                            <td class="scrollable-content"><span>4/10/2024</span></td>
                          </tr>
                        </tbody>
                    </table>
                  </div>
                  <div class="flip-card-back">
                      
                    <table class="clientsTable secondPart">
                          <thead>
                            <tr>
                                <th colspan="3"><span>Collection Description</span></th>
                            </tr>
                        </thead>
                        <tbody class="clientsTableBody">
                            <tr>
                                <td colspan="3"><span>The plant description can have anywhere between 50-200 words so it has to go on multiple lines if neccesary</span></td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th class="like"><span class="emoji">👍🏻</span></th>
                                <th class="dislike"><span class="emoji">👎🏻</span></th>
                                <th class="visit"><span class="emoji">🌱</span></th>
                            </tr>
                        </tfoot>
                    </table>
    
                  </div>
                </div>
              </div>

              

        </div>
        </section>
    
    </div>

    <div class="f-wrapper f-wrapper--1">
        <div class="f">
            <div class="flower__leaf flower__leaf--1"></div>
            <div class="flower__leaf flower__leaf--2"></div>
            <div class="flower__leaf flower__leaf--3"></div>
            <div class="flower__leaf flower__leaf--4"></div>
            <div class="flower__leaf flower__leaf--5"></div>
            <div class="flower__leaf flower__leaf--6"></div>
            <div class="flower__leaf flower__leaf--7"></div>
        </div>
    </div>

    <div class="f-wrapper f-wrapper--2">
        <div class="f">
            <div class="flower__leaf flower__leaf--1"></div>
            <div class="flower__leaf flower__leaf--2"></div>
            <div class="flower__leaf flower__leaf--3"></div>
            <div class="flower__leaf flower__leaf--4"></div>
            <div class="flower__leaf flower__leaf--5"></div>
            <div class="flower__leaf flower__leaf--6"></div>
            <div class="flower__leaf flower__leaf--7"></div>
        </div>
    </div>

    <main>

    </main>

    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/feed.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/generateReports.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Report Center | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/admin.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/generateReports.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <header>
        <p class="gradient_Text"><a href="./admin.html">Admin Dashboard</a></p>
    </header>
    <main>

        <div id="adminPanel" >

            <p id="controlPanel">Generate Reports</p>

            <div id="panelLine"></div>

            <div id="sectionDiv">

                <div id="clientsReportDiv">
                    <section id="clientsSection">
                        <h2>Clients Report</h2>
                        <p>Filling Text client...blah blah</p>
                    </section>
                    <div class="buttons">
                        <div class="button">CSV</div>
                        <div class="button">PDF</div>
                    </div>
               </div>

                <div id="plantsReportDiv">
                    <section id="plantsSection">
                        <h2>Plant Report</h2>
                        <p>Filling Text client...blah blah</p>
                    </section>
                    <div class="buttons">
                        <div class="button">CSV</div>
                        <div class="button">PDF</div>
                    </div>
                </div>
        
            </div>
        </div>

        <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>
    
    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
</body>
</html>
// File: html/howToPress.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>How to Press a Flower</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/howToPressFlowers.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>
       
        <div class="container">

            <div id="titleHowToPress">
                <h1>How to Press a Flower</h1>
                <p id="date">uploaded on 12/4/2024</p>
                <p id="signature">by Rosca Alexandru-David</p>
            </div>

            <div class="blog-post">
              <h2>Memento You’ll Want to Display</h2>
              <p>Pressed flowers are a simple way to preserve a moment in time. By pressing flowers, you can save a thoughtful bouquet from a loved one or commemorate flowers from a special event. Plus, it’s an easy way to keep the beauty of spring and summer blooms alive (almost) forever.</p>
              <div class="image">
                <img id="bestImage" src="../images/howToPress/1.webp" width="200" alt="">
              </div>
            </div>

            <div class="blog-post">
                <h2>1. Selecting Flowers for Pressing</h2>
              <p>If you’re pressing flowers from a bouquet, it’s best to start as soon as possible, don’t wait the day before you’ll have to throw the arrangement out. Choose a few flowers to remove from the bouquet while all the blooms are still fresh.</p>

            </div>

            <div class="blog-post">
              <h2>2. Supplies For Pressing Flowers</h2>
              <p>Before you get started, make sure you have the right supplies for the job! You’ll find most of these items around your house already:</p>
              
              <p class="item"><u>*You need newspaper, blotting paper, printer paper, coffee filters, cardboard</u></p>
              <p class="item"><u>*Avoid paper towels because their textures can get imprinted on the petals</u></p>
              <p class="item"><u>*Experiment with pressing techniques to discover which one works best for you and the flowers you choose.</u></p>
              <p class="item"><u>*You can buy or make a wooden flower press.</u></p>
              
              <div class="image">
                <img src="../images/howToPress/2.webp" width="200" alt="">
                <img src="../images/howToPress/3.webp" width="200" alt="">
                <img src="../images/howToPress/4.webp" width="200" alt="">
              </div>
            </div>

            <div class="blog-post">
              <h2>3.1. How to Press Flowers in a Book</h2>
              <p>The easiest way to press flowers doesn’t involve any special equipment other than absorbent paper and a heavy book or phone book. Pigments in the petals, stems, and leaves may stain the paper, so if the book is valuable, protect the pages with an extra layer of paper on each side of the plants being pressed.</p>
              <div class="image">
                <img src="../images/howToPress/5.webp" width="200" alt="">
                <img src="../images/howToPress/6.webp" width="200" alt="">
              </div>
            </div>

            <div class="blog-post">
              <h2>3.2. How to Press Flowers With an Iron</h2>
              <p>Like the book method, start by pressing the flowers between two pieces of absorbent paper. Heat iron to a low setting. Empty any water from the iron and don’t add water (you don’t want to add more moisture with the steam).</p>
              <div class="image">
                <img src="../images/howToPress/7.webp" width="200" alt="">
                <img src="../images/howToPress/8.webp" width="200" alt="">
              </div>
            </div>
            
            <a href="./blog.html"><div id="AddNew"><p>Back</p></div></a>
          
        </div>
          

        <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/index.html
<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Home | HeMa</title>
        <link rel="stylesheet" href="../css/template.css">
        <link rel="stylesheet" href="../css/about.css">
        <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
    </head>
    <body class="body-extension">
        <div class="nav">
            <input type="checkbox" id="nav-check">
            <div class="nav-header">
              <div class="nav-title">
                <div class="left">
                    <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                    <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
                </div>
              </div>
            </div>
            <div class="nav-btn">
              <label for="nav-check">
                <span></span>
                <span></span>
                <span></span>
              </label>
            </div>
            
            <div class="nav-links">
              <a href="index.html" >Home</a>
              <a href="about.html" >About</a>
              <a href="contact.html" >Contact</a>
              <a id="logout" href="landingPage.html">Logout</a>
            </div>
          </div>

        <main>
            <div id="homeTitle">
                <p>Hello "User", what would you like to do today?</p>
            </div>

            <div class="about-main facts-section">
            
            <article class="cta fact-item">
                <img src='../images/background/white1.jpg' alt='Profile'>
                <div class="cta__text-column">
                    <p class ="desc">Add, Edit and Customize your Profile with colorful pallets, collections and let everyone know who is the best plant collector out there!</p>
                    <a id="viewProfile" href="profile.html">View Your Profile</a>
                </div>
            </article>

            <article class="cta fact-item">
                <img src='../images/background/plantCollection.jpg' alt='Login'>
                <div class="cta__text-column">
                    <p class ="desc">See plant collections shared by loving and ambitious users just like you, enjoy multiatributes search, different view styles and sorting methods.</p>
                    <a href="feed.html">View Shared Collections</a>
                </div>
            </article>

            <article class="cta fact-item">
                <img src='../images/background/tipsAndTricks.jpg' alt='Login'>
                <div class="cta__text-column">
                    <p class ="desc">Find new and interesting tricks about how nature works, laid here for you, here you can find blogs such us how to press plants, tips and tricks about urban gardening and more!</p>
                    <a href="blog.html">Search the Blogs</a>
                </div>
            </article>

            <article class="cta fact-item">
                <img src='../images/background/card4.jpg' alt='Plant of the Week'>
                <div class="cta__text-column">
                    <p class ="desc">Who is there? A new weekly champion? Enter to see who is the best plant out there, the most loved and collected one.</p>
                    <a href="PlantProfilePage.html">See Plant of the Week</a>
                </div>
            </article>

            <article class="cta fact-item">
                <img src='../images/background/contact.png' alt='Plant of the Week'>
                <div class="cta__text-column">
                    <p class ="desc">Want to colaborate with us? Just have a question? or you want to improve our loving platform? Then dont hesitate to contact us!</p>
                    <a href="contact.html">Contact Us</a>
                </div>
            </article>

        </div>
        </main>

        <footer>
            <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
            <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
            <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
        </footer>

        <script src="../scripts/footer.js"></script>
        <script src="../scripts/navBar.js"></script>
        <script src="../scripts/index.js"></script>
    </body>
</html>

// File: html/landingPage.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/landingPage.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <header>
        <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
        <h1 class="gradient_Text">HeMa (Herbal Web Manager)</h1>
    </header>
    <main>
        
        <div id="container">

            <div id="textPresentation"><p>Welcome to HeMa, the best plant collection website you will ever witness</p></div>

            <div class="slider-wrapper">
              <button id="prev-slide" class="slide-button material-symbols-rounded">
                🡨
              </button>
              <ul class="image-list">
                <li><img class="image-item" src="../images/background/picture1.png" alt="img-1"></li>
                <li><img class="image-item" src="../images/background/picture10.png" alt="img-2"></li>
                <li><img class="image-item" src="../images/background/picture9.png" alt="img-3"></li>
                <li><img class="image-item" src="../images/background/picture2.png" alt="img-4"></li>
                <li><img class="image-item" src="../images/background/picture5.png" alt="img-5"></li>
                <li><img class="image-item" src="../images/background/picture8.png" alt="img-6"></li>
                <li><img class="image-item" src="../images/background/picture7.png" alt="img-7"></li>
                <li><img class="image-item" src="../images/background/picture3.png" alt="img-8"></li>
                <li><img class="image-item" src="../images/background/picture6.png" alt="img-9"></li>
                <li><img class="image-item" src="../images/background/picture4.png" alt="img-10"></li>
              </ul>
              <button id="next-slide" class="slide-button material-symbols-rounded">
                🡪
              </button>
            </div>
            <div class="slider-scrollbar">
              <div class="scrollbar-track">
                <div class="scrollbar-thumb"></div>
              </div>
            </div>
          </div>
     
          <div id="adminPanel">

            <p id="controlPanel">Authentification</p>

            <div id="panelLine"></div>

            <section id="loginClients">
                <h2>Login as Client</h2>
                <p>Add plants and enrich your collection</p>
            </section>

            <section id="loginAdmin">
                <h2>Login as Admin</h2>
                <p>Administer the clients and collections</p>
            </section>

            <section id="registerClients">
                <h2>Register</h2>
                <p>Create an account and your collection</p>
            </section>
        </div>

        <div class="f-wrapper f-wrapper--1">
          <div class="f">
              <div class="flower__leaf flower__leaf--1"></div>
              <div class="flower__leaf flower__leaf--2"></div>
              <div class="flower__leaf flower__leaf--3"></div>
              <div class="flower__leaf flower__leaf--4"></div>
              <div class="flower__leaf flower__leaf--5"></div>
              <div class="flower__leaf flower__leaf--6"></div>
              <div class="flower__leaf flower__leaf--7"></div>
          </div>
      </div>

      <div class="f-wrapper f-wrapper--2">
          <div class="f">
              <div class="flower__leaf flower__leaf--1"></div>
              <div class="flower__leaf flower__leaf--2"></div>
              <div class="flower__leaf flower__leaf--3"></div>
              <div class="flower__leaf flower__leaf--4"></div>
              <div class="flower__leaf flower__leaf--5"></div>
              <div class="flower__leaf flower__leaf--6"></div>
              <div class="flower__leaf flower__leaf--7"></div>
          </div>
      </div>

      <div class="f-wrapper f-wrapper--3">
          <div class="f">
              <div class="flower__leaf flower__leaf--1"></div>
              <div class="flower__leaf flower__leaf--2"></div>
              <div class="flower__leaf flower__leaf--3"></div>
              <div class="flower__leaf flower__leaf--4"></div>
              <div class="flower__leaf flower__leaf--5"></div>
              <div class="flower__leaf flower__leaf--6"></div>
              <div class="flower__leaf flower__leaf--7"></div>
          </div>
      </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/landingPage.js"></script>
</body>
</html>
// File: html/listOfClients.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clients List | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/listOfClients.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <header>
        <p class="gradient_Text"><a href="./admin.html">Admin Dashboard</a></p>
    </header>
    <div id="loading" style="display: none; position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); z-index: 1000;">
        <img src="../images/loading.gif" alt="Loading..." style="width: 50px; height: 50px;">
    </div>
    <main>
        <div id="adminPanel" >

            <p id="controlPanel">List Of Clients</p>

            <div id="panelLine"></div>

            <section>

                <input id="textInput" placeholder="Search by email">

                <table id="clientsTable">
                    <thead>
                        <tr>
                            <th><span class="idcol">Id</span></th>
                            <th><span>Name</span></th>
                            <th><span>Email</span></th>
                        </tr>
                    </thead>
                    <tbody id="clientsTableBody">
                        <div id="loading" style="display: none; text-align: center; padding: 10px;">
                            Loading...
                        </div>
                        <tr id="hidden">
                            <th><span class="idcol">-</span></th>
                            <th class="scrollable-content"><span>There is noone here</span></th>
                            <th><span>With this given email address</span></th>
                        </tr>
                        <!-- <tr>
                            <th><span class="idcol">1</span></th>
                            <th class="scrollable-content"><span>Rosca Alexandru-David</span></th>
                            <th><span>alexandrurosca434@gmail.com</span></th>
                            <th class="deleteBtn"><span class="emoji">🗑️</span></th>
                            <th><span class="emoji">🌱</span></th>
                        </tr> -->
                    </tbody>
                </table>
            </section>
        
        </div>

        <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>
    
    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/listOfClients.js"></script>
</body>
</html>
// File: html/login.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/login.css">
    <link rel="stylesheet" href="../css/loginRegisterHeader.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <header>
        <div class="left">
            <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
            <h1 class="gradient_Text">HeMa (Herbal Web Manager)</h1>
        </div>
    </header>
    <main>

    
        <div class = "login" id ="login1">

            <p class ="headerLogin gradient_Text">Welcome Back</p>

            <div class = "line"></div>

            <div id="textBox">
                <p class="gradient_Text">‎ ‎ ‎ ‎ ‎ ‎ ‎Welcome to our Digital Herbarium – your gateway to the fascinating world of botanical collections!</p>
                <br>
                <p class="gradient_Text">‎ ‎ ‎ ‎ ‎ ‎ ‎Step into a realm where the beauty of nature meets the convenience of modern technology. Our platform is dedicated to plant enthusiasts, nature lovers, and anyone with a curiosity about the botanical wonders that surround us.</p>
            </div>
        </div>

    
            <div class = "login" id="login2">

                <p class ="headerLogin gradient_Text" >Login</p>

                <div class = "line"></div>

                <form id="login_form" action="/testCredentials" method="post">

                    <p class ="gradient_Text">Email</p><br>
                    <input type="text" name="Email" id="Email" placeholder="My Email Is" autocomplete="off" required><br>
                    <p class ="gradient_Text">Password</p><br>
                    <input type="password" name="Password" id="Password" placeholder="My Password Is" autocomplete="off" required><br><br>
                    
                    <p id="Error_Message"></p>
                
                    <input type="submit" value="Log In" id="submit">
                    <div id="register">Register</div>
                </form>                

                <!-- <form id = "login_form" action="./index.html" method="post">

                    <p class ="gradient_Text">Email</p><br>
                    <input type="text" name="Email" id="Email" placeholder="My Email Is" autocomplete="off" ><br>
                    <p class ="gradient_Text">Password</p><br>
                    <input type="password" name="Password" id="Password" placeholder="My Password Is" autocomplete="off"><br><br>
                    
                    <p id = "Error_Message"></p>

                    <input type="submit" value="Log In" id = "submit">
                    <div id = "register">Register</div>
                </form> -->
            </div>
        
            <div class="f-wrapper f-wrapper--1">
                <div class="f">
                    <div class="flower__leaf flower__leaf--1"></div>
                    <div class="flower__leaf flower__leaf--2"></div>
                    <div class="flower__leaf flower__leaf--3"></div>
                    <div class="flower__leaf flower__leaf--4"></div>
                    <div class="flower__leaf flower__leaf--5"></div>
                    <div class="flower__leaf flower__leaf--6"></div>
                    <div class="flower__leaf flower__leaf--7"></div>
                </div>
            </div>

            <div class="f-wrapper f-wrapper--2">
                <div class="f">
                    <div class="flower__leaf flower__leaf--1"></div>
                    <div class="flower__leaf flower__leaf--2"></div>
                    <div class="flower__leaf flower__leaf--3"></div>
                    <div class="flower__leaf flower__leaf--4"></div>
                    <div class="flower__leaf flower__leaf--5"></div>
                    <div class="flower__leaf flower__leaf--6"></div>
                    <div class="flower__leaf flower__leaf--7"></div>
                </div>
            </div>

            <div class="f-wrapper f-wrapper--3">
                <div class="f">
                    <div class="flower__leaf flower__leaf--1"></div>
                    <div class="flower__leaf flower__leaf--2"></div>
                    <div class="flower__leaf flower__leaf--3"></div>
                    <div class="flower__leaf flower__leaf--4"></div>
                    <div class="flower__leaf flower__leaf--5"></div>
                    <div class="flower__leaf flower__leaf--6"></div>
                    <div class="flower__leaf flower__leaf--7"></div>
                </div>
            </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/login.js"></script>
</body>
</html>
// File: html/multisearch.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Search</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/cards.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>

        <form id="search-form">
            <div class="search-container">
              <label for="name">Name:</label>
              <input type="text" id="name" name="name">
            </div>
            <div class="search-container">
              <label for="scientific-name">Scientific Name:</label>
              <input type="text" id="scientific-name" name="scientific-name">
            </div>
            <div class="search-container">
              <label for="family">Family:</label>
              <input type="text" id="family" name="family">
            </div>
            <div class="search-container">
              <label for="genus">Genus:</label>
              <input type="text" id="genus" name="genus">
            </div>
            <div class="search-container">
              <label for="species">Species:</label>
              <input type="text" id="species" name="species">
            </div>
            <div class="search-container">
              <label for="origin">Origin:</label>
              <input type="text" id="origin" name="origin">
            </div>
            <div class="search-container">
              <label for="rarity">Rarity:</label>
              <input type="text" id="rarity" name="rarity">
            </div>
            <div class="search-container">
              <label for="color">Color:</label>
              <input type="text" id="color" name="color">
            </div>
            <button type="submit">Search</button>
          </form>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
</body>
</html>
// File: html/profile.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/hover-cards.css">
    <!-- <link rel="stylesheet" href="../css/profile.css"> -->
    <link rel="stylesheet" href="../css/collection-list.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>


<body>
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>

        <div id="modal" class="modal">
            <div class="modal-content">
              <span class="close">&times;</span>
              <form>
                <div id="updateTitle">
                    <p>UPDATE YOUR DATA</p>
                </div>
                <div id="updateLine"></div>
                <input type="text" placeholder="Name" name="name">
                <input type="text" placeholder="Occupation" name="occupation">
                <input type="text" placeholder="City" name="city">
                <input type="text" placeholder="Street" name="street">
                <input type="text" placeholder="Number" name="number">
                <input type="text" placeholder="Facebook" name="facebook">
                <input type="text" placeholder="Github" name="github">
                <input type="text" placeholder="Instagram" name="Instagram">
                <input type="text" placeholder="Twitter" name="twitter">

                <button type="submit" id="updateDataButton">Save</button>
              </form>
            </div>
          </div>

        <div id="container">
            <div class="collections-card" id="data">
                <div class="d-flex flex-column align-items-center text-center">
                    <div class="collections  collection-particularity">
                        <div id="profileInfo">
                            <div id="circleAvatar">
                                <img id="avatar" src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="Admin" width="150">
                            </div>
                            <div id="circleData">
                                <h2 id="userName"></h2>
                                <h3 id="userOccupation"></h3>
                                <h3 id="userAddress"></h3>
                                <div class="button-div">
                                    <button class="format-btn" id="followButton">Follow</button>
                                    <button class="format-btn" id="editButton">Edit Info</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card collections-card" id="socialLinks">
                <div class="collections" id="links">
                    <img class="socialMediaIcon2" id="faceb" src="../images/social_media/icons8-facebook-100.png" alt="Facebook">
                    <img class="socialMediaIcon2" id="git" src="../images/social_media/icons8-github-100.png" alt="Twitter">
                    <img class="socialMediaIcon2" id="insta" src="../images/social_media/icons8-instagram-100.png" alt="Instagram">
                    <img class="socialMediaIcon2" id="tw" src="../images/social_media/icons8-twitter-100.png" alt="LinkedIn">
                </div>
            </div>
            <div class="card collections-card" id="collectionList">
                <h2 class="collections-title">Plant Collections</h2>
                <button id="addPlantButton" class="floating-button" title="Add New Button">&#43;</button>
                <div class="collections collectionsPlace" id="figurePlace">
                    <div class="line"></div>
                    <p class="no-collections-message">No collections have been made yet.</p>
                    <!-- <figure>
                        <img src="../images/background/card2.jpg" alt="Mountains" width="250" height="300">
                        <figcaption>Collection1</figcaption>
                    </figure>
                    <figure>
                        <img src="../images/background/picture2.png" alt="Mountains" width="250" height="300">
                        <figcaption>Collection2</figcaption>
                    </figure>
                    <figure>
                        <img src="../images/background/picture8.png" alt="Mountains" width="250" height="300">
                        <figcaption>Collection3</figcaption>
                    </figure> -->
                    
                </div>
            </div>
            <div class="card collections-card">
                <h2 class="collections-title">Following List</h2>
                <div class="collections">
                    <div class="line"></div>
                    <img class="friend" src="../images/background/friend.png" alt="Mountains" width="100" height="100">
                    <img class="friend" src="../images/background/friend.png" alt="Mountains" width="100" height="100">
                    <img class="friend" src="../images/background/friend.png" alt="Mountains" width="100" height="100">  
                    <img class="friend" src="../images/background/friend.png" alt="Mountains" width="100" height="100">
                    <img class="friend" src="../images/background/friend.png" alt="Mountains" width="100" height="100">
                    <img class="friend" src="../images/background/friend.png" alt="Mountains" width="100" height="100">  
                </div>
            </div>
        </div>
    </main>

  <footer>
    <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
    <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
    <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <script src="../scripts/footer.js"></script>
    <script src="../scripts/profile.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/register.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register | HeMa</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/register.css">
    <link rel="stylesheet" href="../css/loginRegisterHeader.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <header>
        <div class="left">
            <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
            <h1 class="gradient_Text">HeMa (Herbal Web Manager)</h1>
        </div>
    </header>
    <main>

    
        <div class = "login" id ="login1">

            <p class = "headerText gradient_Text">Hello There!</p>

            <div class = "line" id="line2"></div>

            <div id="textBox">
                <p class="gradient_Text">‎ ‎ ‎ ‎ ‎ ‎ ‎Create your personalized account to unlock a host of features such the ability to curate your own digital herbarium collections, share your botanical discoveries with fellow enthusiasts, and contribute to our growing repository of botanical knowledge.</p>
                <br>
                <p class="gradient_Text">‎ ‎ ‎ ‎ ‎ ‎ ‎Join us on this journey of discovery and appreciation for the natural world. Let's explore, learn, and celebrate the rich tapestry of plant life together.</p>
            </div>
        </div>

    
        <div class = "login" id="login2">

            <p class = "headerText gradient_Text">Register</p>

            <div class = "line" id="line1"></div>

            <form id = "login_form" action="/login.html" method="post">

                <p class ="gradient_Text">Email</p><br>
                <input type="text" name="Email" id="Email" placeholder="My Email Is" autocomplete="off"><br>
                <p class ="gradient_Text">Name</p><br>
                <input type="text" name="Name" id="Name" placeholder="My Name Is" autocomplete="off"><br>
                <p class ="gradient_Text">Password</p><br>
                <input type="password" name="Password" id="Password" placeholder="My Password Is" autocomplete="off"><br><br>
                
                <p id = "Error_Message"></p>

                <input type="submit" value="Register" id = "submit">
                <div id = "register">Log In</div>
            </form>
        </div>       
        
        <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/register.js"></script>
</body>
</html>
// File: html/seasonalGardening.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seasonal Gardening</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/seasonalGardeningFlowers.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>
       
        <div class="container">

            <div id="titleHowToPress">
                <h1>Seasonal Gardening</h1>
                <p id="date">uploaded on 12/4/2024</p>
                <p id="signature">by Rosca Alexandru-David</p>
            </div>
        
            <div class="blog-post">
                <h2>Optimizing Your Garden for Each Season</h2>
                <p>Seasonal gardening involves adapting your gardening practices to the changing seasons to maximize plant health and yield. Here are some tips for optimizing your garden throughout the year:</p>
            
                <div class="image">
                    <img id="bestImage" src="../images/seasonalGardening/0.jpg" width="200" alt="">
                  </div>
            
            </div>

            <div class="blog-post">
                <h2>Spring:</h2>
              <p>Focus on planting cool-season crops like lettuce, spinach, peas, and radishes. Start seeds indoors for warm-season crops like tomatoes, peppers, and eggplant. Take steps to prevent and control pests and diseases as temperatures rise.</p>
            
              <div class="image">
                <img src="../images/seasonalGardening/1.jpg" width="200" alt="">
                <img src="../images/seasonalGardening/2.jpg" width="200" alt="">
                <img src="../images/seasonalGardening/3.jpg" width="200" alt="">
              </div>
                
            </div>

            <div class="blog-post">
                <h2>Summer</h2>
              <p> Water plants deeply and regularly, especially during hot and dry periods. Harvest ripe fruits and vegetables regularly to encourage continued production. Protect plants from heat stress and sunburn by providing shade and mulching around their bases.</p>
            
              <div class="image">
                <img src="../images/seasonalGardening/4.jpg" width="200" alt="">
                <img src="../images/seasonalGardening/5.jpg" width="200" alt="">
              </div>
            
            </div>

            <div class="blog-post">
                <h2>Fall</h2>
              <p>Plant cool-season crops for a fall harvest, such as carrots, beets, kale, and broccoli. Clean up garden beds by removing spent plants and debris. Consider planting cover crops to improve soil fertility and prevent erosion over the winter.</p>
           
              <div class="image">
                <img src="../images/seasonalGardening/6.jpg" width="200" alt="">
              </div>
           
            </div>

            <div class="blog-post">
                <h2>Winter</h2>
              <p> Protect tender plants from frost and freezing temperatures by covering them with frost blankets or bringing them indoors. Plan and prepare for next year's garden by ordering seeds, repairing garden tools and equipment, and amending soil as needed.</p>
            
              <div class="image">
                <img src="../images/seasonalGardening/7.jpg" width="200" alt="">
                <img src="../images/seasonalGardening/8.jpg" width="200" alt="">
              </div>
            
            </div>

            <a href="./blog.html"><div id="AddNew"><p>Back</p></div></a>
        
        </div>
          

        <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: html/urbanGardening.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Urban Gardening</title>
    <link rel="stylesheet" href="../css/template.css">
    <link rel="stylesheet" href="../css/flower.css">
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/urbanGardeningFlowers.css">
    <link rel="icon" href="../images/website_Icon/plant.png" type="image/x-icon">
</head>

<body>    
    <div class="nav">
        <input type="checkbox" id="nav-check">
        <div class="nav-header">
          <div class="nav-title">
            <div class="left">
                <img id="plant_Logo" src="../images/website_Icon/plant.png" alt="Logo Small">
                <h3 class="gradient_Text">HeMa (Herbal Web Manager)</h3>
            </div>
          </div>
        </div>
        <div class="nav-btn">
          <label for="nav-check">
            <span></span>
            <span></span>
            <span></span>
          </label>
        </div>
        
        <div class="nav-links">
          <a href="index.html" >Home</a>
          <a href="about.html" >About</a>
          <a href="contact.html" >Contact</a>
          <a id="logout" href="landingPage.html">Logout</a>
        </div>
      </div>
    <main>

        <div class="container">

            <div id="titleHowToPress">
                <h1>Urban Gardening</h1>
                <p id="date">uploaded on 12/4/2024</p>
                <p id="signature">by Rosca Alexandru-David</p>
            </div>

            <div class="blog-post">
                <h2>Gardening in Small Spaces</h2>
                <p>Urban gardening offers solutions for individuals living in apartments, condos, or homes with limited outdoor space. Here are some tips for gardening in small spaces:</p>
              <div class="image">
                <img id="bestImage" src="../images/urbanGardening/1.jpg" width="200" alt="">
              </div>
            </div>

            <div class="blog-post">
                <h2>Container Gardening</h2>
              <p>Use containers such as pots, planters, and hanging baskets to grow plants on balconies, patios, or windowsills.</p>

              <div class="image">
                <img src="../images/urbanGardening/2.jpg" width="200" alt="">
                <img src="../images/urbanGardening/3.webp" width="200" alt="">
              </div>

            </div>

            <div class="blog-post">

              <h2>Vertical Gardening</h2>
              <p>Before you get started, make sure you have the right supplies for the job! You’ll find most of these items around your house already:</p>
              
              <div class="image">
                <img src="../images/urbanGardening/4.jpg" width="200" alt="">
                <img src="../images/urbanGardening/5.jpg" width="200" alt="">
              </div>
            </div>

            <div class="blog-post">
              <h2> Community Gardens</h2>
              <p>Join or start a community garden in your neighborhood where you can share gardening space, resources, and knowledge with other urban gardeners.</p>
              <div class="image">
                <img src="../images/urbanGardening/6.jpg" width="200" alt="">
                <img src="../images/urbanGardening/7.jpg" width="200" alt="">
              </div>
            </div>

            <div class="blog-post">

              <h2>Microgreens and Sprouts</h2>
              <p>Grow nutritious microgreens and sprouts indoors on kitchen counters or shelves using trays, containers, or specialized growing kits.</p>
              <div class="image">
                <img src="../images/urbanGardening/8.jpg" width="200" alt="">
                <img src="../images/urbanGardening/9.webp" width="200" alt="">
              </div>
            </div>

            <a href="./blog.html"><div id="AddNew"><p>Back</p></div></a>
            
          </div>
          

        <div class="f-wrapper f-wrapper--1">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--2">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

        <div class="f-wrapper f-wrapper--3">
            <div class="f">
                <div class="flower__leaf flower__leaf--1"></div>
                <div class="flower__leaf flower__leaf--2"></div>
                <div class="flower__leaf flower__leaf--3"></div>
                <div class="flower__leaf flower__leaf--4"></div>
                <div class="flower__leaf flower__leaf--5"></div>
                <div class="flower__leaf flower__leaf--6"></div>
                <div class="flower__leaf flower__leaf--7"></div>
            </div>
        </div>

    </main>
    <footer>
        <img id = "github" class="socialMediaIcon" src="../images/social_media/github.png" alt="Logo Small">
        <p class="gradient_Text">© 2024 HeMa. All rights reserved.</p>
        <img id = "uaic" class="socialMediaIcon" src="../images/social_media/uaic_logo_small.png" alt="Logo Small">
    </footer>

    <!-- Scripts -->
    <script src="../scripts/footer.js"></script>
    <script src="../scripts/navBar.js"></script>
</body>
</html>
// File: scripts/addAdmin.js
const bcrypt = require('bcrypt');
const mysql = require('mysql2');
require('dotenv').config();

// DATA NEEDED TO CONNECT TO THE DATABASE
const pool = mysql.createPool({
    host: process.env.DATABASEHOST,
    user: process.env.DATABASEUSER,
    password: process.env.DATABASEPASSWORD,
    database: process.env.DATABASENAME,
    waitForConnections: true,
    connectionLimit: 20,
    queueLimit: 0
});

const adminEmail = 'admin@gmail.com';
const adminPassword = 'admin';
const adminHashedPassword = bcrypt.hashSync(adminPassword, 10);

pool.query('INSERT INTO admins (email, password, name) VALUES (?, ?, ?)', [adminEmail, adminHashedPassword, "Admin"], (error, results) => {
    if (error) {
        console.error('Error adding admin:', error);
    } else {
        console.log('Admin added successfully');
    }
});
// File: scripts/admin.js
let listOfClients = document.getElementById("listClients");
let generateReports = document.getElementById("generateReports");

listOfClients.addEventListener('click', function (event) {
    window.location.href = './listOfClients.html';
});

generateReports.addEventListener('click', function (event) {
    window.location.href = './generateReports.html';
});

document.getElementById('error').addEventListener('click', function (event) {
    window.location.href = './error404.html';
});

document.getElementById('documentation').addEventListener('click', function (event) {
    window.location.href = '../Documentatie/Documentatie.html';
});

document.getElementById('adminLogout').addEventListener("click", function(event){
    
    event.preventDefault();

    fetch('/logout', {
        method: 'POST',
        credentials: 'same-origin',
    })
    .then(response => {
        if (response.ok) {
            document.cookie = 'sessionId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            window.location.href = './landingPage.html';
        } else {
            console.error('Logout failed:', response.statusText);
        }
    })
    .catch(error => {
        console.error('Error during logout:', error);
    });
});
// File: scripts/adminUtils.js
const bcrypt = require('bcrypt');
const pool = require('./databaseConfig'); 

async function authenticateAdmin(email, password) {
    const connection = await pool.getConnection();
    try {
        const query = 'SELECT * FROM admins WHERE email = ?';
        const [results] = await connection.query(query, [email]);
        if (results.length > 0) {
            const admin = results[0];
            const isPasswordValid = await bcrypt.compare(password, admin.password);
            if (isPasswordValid) {
                return { success: true, userId: admin.id, username: admin.name, isAdmin: true };
            } else {
                return { success: false, message: "Incorrect password" };
            }
        } else {
            return { success: false, message: "Admin not found" };
        }
    } catch (err) {
        console.error('Authentication error:', err);
        return { success: false, message: "Authentication error" };
    } finally {
        connection.release();
    }
}

async function deleteResource(resourceId) {
    const connection = await pool.getConnection();
    try {
        const query = 'DELETE FROM resources WHERE id = ?';
        const [result] = await connection.query(query, [resourceId]);
        if (result.affectedRows > 0) {
            return { success: true, message: "Resource deleted successfully" };
        } else {
            return { success: false, message: "Resource not found" };
        }
    } catch (err) {
        console.error('Error deleting resource:', err);
        return { success: false, message: "Error deleting resource" };
    } finally {
        connection.release();
    }
}

module.exports = { authenticateAdmin, deleteResource };

// File: scripts/authAdmin.js
// auth.js
const bcrypt = require('bcrypt');
const pool = require('./databaseConfig');  

async function authenticateAdmin(email, password) {
    const connection = await pool.getConnection();
    try {
        const query = 'SELECT * FROM admins WHERE email = ?';
        const [results] = await connection.query(query, [email]);
        if (results.length > 0) {
            const admin = results[0];
            const isPasswordValid = await bcrypt.compare(password, admin.password);
            if (isPasswordValid) {
                return { success: true, userId: admin.id, username: admin.name, isAdmin: true };
            } else {
                return { success: false, message: "Incorrect password" };
            }
        } else {
            return { success: false, message: "Admin not found" };
        }
    } catch (err) {
        console.error('Authentication error:', err);
        return { success: false, message: "Authentication error" };
    } finally {
        connection.release();
    }
}

module.exports = { authenticateAdmin };

// File: scripts/blogPage.js
let postId;
let userID;
document.addEventListener('DOMContentLoaded', async function() {

  fetch('/api/id', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    },
  }).then((response) => {
      if(response.status === 200){
          userID = response.headers.get('userId');
      }
  });
  
  
  const storedData = sessionStorage.getItem('blogPostData');
    if (storedData != null) {
      const blogPostData = JSON.parse(storedData);
      sessionStorage.setItem('temporaryRefreshBlogPostData', blogPostData);
      sessionStorage.removeItem('blogPostData');

      try {
        const response = await fetch('/api/blogData', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ postId: blogPostData })
        });
        if (response.status === 404) {
          console.error('Resource not found');
          window.location.href = "./error404.html";
        }else if (!response.ok) {
          throw new Error('Failed to fetch data');
        }
        const responseData = await response.json();
        
        postId = responseData.post.id;
        document.title = responseData.post.title;
        console.log(responseData.post.user_id);
        console.log(userID);
        console.log(responseData);

        const container = document.querySelector('.container');
        const addNewButton = document.getElementById('AddNew');

        const [year, month, day] = responseData.post.post_date.substring(0, 10).split('-');

        // Create title, date, and signature elements
        const titleDiv = document.createElement('div');
        titleDiv.id = 'titleHowToPress';
        titleDiv.innerHTML = `<h1>${responseData.post.title}</h1>
                            <p id="date">uploaded on ${day}-${month}-${year}</p>
                            <p id="signature">by ${responseData.post.client_name}</p>`;
        container.appendChild(titleDiv);

        responseData.sections.forEach(section => {
        const sectionDiv = document.createElement('div');
        sectionDiv.classList.add('blog-post');

        const titleElement = document.createElement('h2');
        titleElement.textContent = section.title;

        const descriptionElement = document.createElement('p');
        descriptionElement.textContent = section.description;

        sectionDiv.appendChild(titleElement);
        sectionDiv.appendChild(descriptionElement);

        // // Add images to the section
        // section.images.forEach(imageUrl => {
        //     const imageElement = document.createElement('img');
        //     imageElement.src = imageUrl;
        //     sectionDiv.appendChild(imageElement);
        // });

        container.insertBefore(sectionDiv, addNewButton);
        });

        const buttonsDiv = document.createElement('div');
        buttonsDiv.id = 'interactivity';
        container.appendChild(buttonsDiv);

        // Add the "Back" button at the end of the container
        const backButtonDiv = document.createElement('div');
        backButtonDiv.id = 'AddNew';
        backButtonDiv.innerHTML = '<a href="./blog.html"><p>Back</p></a>';
        buttonsDiv.appendChild(backButtonDiv);

        if(userID == responseData.post.user_id){
          // Add the "Delete" button at the end of the container
          const deleteButtonDiv = document.createElement('div');
          deleteButtonDiv.id = 'Delete';
          deleteButtonDiv.innerHTML = '<p>Delete</p>';
          buttonsDiv.appendChild(deleteButtonDiv);

        document.getElementById('Delete').addEventListener('click', function() {

          fetch('/api/deletePost', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                  postId: postId 
              })
          })
          .then(response => {
            window.location.href = "./blog.html";
          })
          .catch(error => {
              window.location.href = "./error404.html";
              console.error('Error:', error);
          });
        });
      }

      } catch (error) {
        console.error('Error fetching data:', error);
      }
      
    } else {
      window.location.href = './error404.html';
    }

    fetchComments();
  });


const commentInput = document.querySelector('.comment-input');
const addCommentBtn = document.querySelector('.add-comment-btn');

commentInput.addEventListener('input', () => {
    commentInput.placeholder = "Write your comment here...";
});

addCommentBtn.addEventListener('click', () => {
  const commentText = commentInput.value.trim();

  if (commentText) {
      fetch('/api/blogComment', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({text: commentText, postId: postId})
      })
      .then(response => {
          if (response.ok) {
              commentInput.value = '';
              return response.json();
          } else {
              console.error('Failed to add comment:', response.status);
          }
      }).then(data => {
        
        const newComment = document.createElement('div');
        newComment.classList.add('comment');
        newComment.id = data.id;

        if(data.user_id == userID){
          const deleteButton = document.createElement('p');
          deleteButton.classList.add('deleteComment');
          deleteButton.textContent = '🗑️';
          newComment.appendChild(deleteButton);
        }

        const postedDate = new Date(data.posted_date);
        const currentTime = new Date();
        const timeDifference = currentTime - postedDate;

        const seconds = Math.floor(timeDifference / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        const weeks = Math.floor(days / 7);
        const months = Math.floor(days / 30);
        const years = Math.floor(days / 365);

        let timeString = '';
        if (years > 0) {
            timeString = years === 1 ? 'a year ago' : `${years} years ago`;
        } else if (months > 0) {
            timeString = months === 1 ? 'a month ago' : `${months} months ago`;
        } else if (weeks > 0) {
            timeString = weeks === 1 ? 'a week ago' : `${weeks} weeks ago`;
        } else if (days > 0) {
            timeString = days === 1 ? 'a day ago' : `${days} days ago`;
        } else if (hours > 0) {
            timeString = hours === 1 ? 'an hour ago' : `${hours} hours ago`;
        } else if (minutes > 0) {
            timeString = minutes === 1 ? 'a minute ago' : `${minutes} minutes ago`;
        } else {
            timeString = seconds <= 10 ? 'just now' : `${seconds} seconds ago`;
        }

        const timeDiv = document.createElement('div');
        timeDiv.classList.add('time');
        timeDiv.textContent = `Posted ${timeString}`;

        const userSpan = document.createElement('span');
        userSpan.classList.add('user');
        userSpan.textContent = `${data.user_name}:`;

        const nameDate = document.createElement('div');
        nameDate.classList.add('nameDate');
        nameDate.appendChild(userSpan);
        nameDate.appendChild(timeDiv);
        newComment.appendChild(nameDate);

        const contentDiv = document.createElement('div');
        contentDiv.classList.add('content');
        contentDiv.textContent = data.comment_text;
        newComment.appendChild(contentDiv);

        const commentsContainer = document.querySelector('#comments');

        const secondComment = commentsContainer.children[1];

        commentsContainer.insertBefore(newComment, secondComment);

    })
      .catch(error => {
          console.error('Error adding comment:', error);
      });
  } else {
      commentInput.placeholder = "Please write a comment before submitting";
  }
});


function fetchComments() {
  fetch('/api/blogComments', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify({ postId: postId })
  })
  .then(response => {
      if (response.ok) {
          return response.json();
      } else {
          console.error('Failed to fetch comments:', response.status);
      }
  })
  .then(comments => {
      console.log('Received comments:', comments);
      renderComments(comments);
  })
  .catch(error => {
      console.error('Error fetching comments:', error);
  });
}

function renderComments(comments) {
    const commentsContainer = document.querySelector('#comments');
    const firstCommentDiv = commentsContainer.children[0];

    while (commentsContainer.children.length > 1) {
        commentsContainer.removeChild(commentsContainer.children[1]);
    }

    for (let i = 0; i < comments.length; i++) {
        const commentData = comments[i];
        const commentElement = createCommentElement(commentData);
        commentsContainer.insertBefore(commentElement, firstCommentDiv.nextSibling);
    }
}

function createCommentElement(commentData) {
  const commentElement = document.createElement('div');
  commentElement.classList.add('comment');
  commentElement.id = commentData.id;

  if(commentData.user_id == userID){
    const deleteButton = document.createElement('p');
    deleteButton.classList.add('deleteComment');
    deleteButton.textContent = '🗑️';
    commentElement.appendChild(deleteButton);
  }

  const postedDate = new Date(commentData.posted_date);
  const currentTime = new Date();
  const timeDifference = currentTime - postedDate;

  const seconds = Math.floor(timeDifference / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const weeks = Math.floor(days / 7);
  const months = Math.floor(days / 30);
  const years = Math.floor(days / 365);

  let timeString = '';
  if (years > 0) {
      timeString = years === 1 ? 'a year ago' : `${years} years ago`;
  } else if (months > 0) {
      timeString = months === 1 ? 'a month ago' : `${months} months ago`;
  } else if (weeks > 0) {
      timeString = weeks === 1 ? 'a week ago' : `${weeks} weeks ago`;
  } else if (days > 0) {
      timeString = days === 1 ? 'a day ago' : `${days} days ago`;
  } else if (hours > 0) {
      timeString = hours === 1 ? 'an hour ago' : `${hours} hours ago`;
  } else if (minutes > 0) {
      timeString = minutes === 1 ? 'a minute ago' : `${minutes} minutes ago`;
  } else {
      timeString = seconds <= 10 ? 'just now' : `${seconds} seconds ago`;
  }

  const userSpan = document.createElement('span');
  userSpan.classList.add('user');
  userSpan.textContent = `${commentData.user_name}:`;

  const timeDiv = document.createElement('div');
  timeDiv.classList.add('time');
  timeDiv.textContent = `Posted ${timeString}`;

  const nameDate = document.createElement('div');
  nameDate.classList.add('nameDate');
  nameDate.appendChild(userSpan);
  nameDate.appendChild(timeDiv);
  commentElement.appendChild(nameDate);

  const contentDiv = document.createElement('div');
  contentDiv.classList.add('content');
  contentDiv.textContent = commentData.comment_text;
  commentElement.appendChild(contentDiv);

  return commentElement;
}


document.addEventListener('click', async (event) => {
  if (event.target.classList.contains('deleteComment')) {
      const commentId = event.target.parentNode.id;
      console.log(commentId);
      try {
          const response = await fetch('/api/deleteComment', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ commentId: commentId })
          });

          if (!response.ok) {
              throw new Error('Failed to delete comment');
          }
          fetchComments();
      } catch (error) {
          console.error('Error deleting comment:', error);
      }
  }
});


window.addEventListener('beforeunload', function (event) {
    sessionStorage.setItem('blogPostData', sessionStorage.getItem('temporaryRefreshBlogPostData'));
});
// File: scripts/blogs.js
document.getElementById('1').addEventListener('click', function(){
    window.location.href = './howToPress.html';
});

document.getElementById('2').addEventListener('click', function(){
    window.location.href = './seasonalGardening.html';
});

document.getElementById('3').addEventListener('click', function(){
    window.location.href = './urbanGardening.html';
});

document.getElementById('AddNew').addEventListener('click', function(){
    window.location.href = './createNewBlog.html';
});

document.getElementById('1').setAttribute('data-comment-title', 'how to press plants');
document.getElementById('1').setAttribute('data-comment-name', 'rosca alexandru-david');
document.getElementById('1').setAttribute('data-posted-date', '12/4/2024');
document.getElementById('2').setAttribute('data-comment-title', 'seasonal gardening');
document.getElementById('2').setAttribute('data-comment-name', 'rosca alexandru-david');
document.getElementById('2').setAttribute('data-posted-date', '12/4/2024');
document.getElementById('3').setAttribute('data-comment-title', 'urban gardening');
document.getElementById('3').setAttribute('data-comment-name', 'rosca alexandru-david');
document.getElementById('3').setAttribute('data-posted-date', '12/4/2024');

document.addEventListener('DOMContentLoaded', () => {
    fetch('/api/blogs')
      .then(response => {
        if (response.ok) {
            return response.json();
        } else {
          throw new Error('Failed to fetch data from server');
        }
      })
      .then(data => {
        const container = document.querySelector('.container');
        const addNewButton = document.getElementById('AddNew');

        data.forEach(blog => {
            const blogPostDiv = document.createElement('div');

            blogPostDiv.setAttribute('data-posted-date', blog.post_date);
            blogPostDiv.setAttribute('data-comment-name', blog.user_name);
            blogPostDiv.setAttribute('data-comment-title', blog.title);

            blogPostDiv.classList.add('blog-post');
            blogPostDiv.id = blog.id; 

            const titleElement = document.createElement('h2');
            titleElement.textContent = blog.title;

            const descriptionElement = document.createElement('p');
            descriptionElement.textContent = blog.description;

            blogPostDiv.appendChild(titleElement);
            blogPostDiv.appendChild(descriptionElement);

            container.insertBefore(blogPostDiv, addNewButton);

            blogPostDiv.addEventListener('click', async () => {
              const blogId = blogPostDiv.id;
              
              sessionStorage.setItem('blogPostData', blogId);
              window.location.href = './blogPage.html';
          });
        });
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  });
  

  const inputs = [
    document.getElementById('nameInput'),
    document.getElementById('clientInput'),
    document.getElementById('dateInput')
];
inputs.forEach((input, index) => {
    input.addEventListener('input', function(event) {
        const nameInputText = document.getElementById('nameInput').value.trim().toLowerCase();
        const clientInputText = document.getElementById('clientInput').value.trim().toLowerCase();
        const dateInputText = document.getElementById('dateInput').value.trim().toLowerCase();
        filterTable(nameInputText, clientInputText, dateInputText);
    });
});

function filterTable(nameInputText, clientInputText, dateInputText) {

    let numberOfShowedTables = 0;

    const tables = document.querySelectorAll('.blog-post');

    tables.forEach(table => {

      let firstCellText = table.getAttribute('data-comment-title').trim().toLowerCase();
      let secondCellText = table.getAttribute('data-comment-name').trim().toLowerCase();
      let thirdCellText;

      if(table.getAttribute('data-posted-date').length > 9){
        const [year, month, day] = table.getAttribute('data-posted-date').substring(0, 10).split('-');
        thirdCellText = day + "/" + month + "/" + year; 
      }else{
        thirdCellText = table.getAttribute('data-posted-date').trim().toLowerCase();
      }

        if (firstCellText.includes(nameInputText) && secondCellText.includes(clientInputText) && thirdCellText.includes(dateInputText)) {
            table.style.display = '';
            numberOfShowedTables++;
        } else {
            table.style.display = 'none';
        }
    });
}
// File: scripts/client.js
// // Funcție pentru a obține lista de clienți
// function fetchClients() {
//     fetch('/api/clients')
//         .then(response => response.json())
//         .then(data => displayClients(data))
//         .catch(error => console.error('Error fetching clients:', error));
// }

// // Funcție pentru a afișa clienții într-un tabel HTML
// function displayClients(clients) {
//     const table = document.getElementById('clientsTable');
//     clients.forEach(client => {
//         let row = table.insertRow();
//         let cell1 = row.insertCell(0);
//         let cell2 = row.insertCell(1);
//         let cell3 = row.insertCell(2);
//         cell1.innerHTML = client.id;
//         cell2.innerHTML = client.name;
//         cell3.innerHTML = client.email;
//     });
// }

// document.addEventListener('DOMContentLoaded', fetchClients);

// // Funcție pentru ștergerea unui client
// function deleteClient(clientId) {
//     fetch(`/api/clients/${clientId}`, { method: 'DELETE' })
//         .then(response => {
//             if (response.ok) {
//                 console.log('Client deleted successfully');
//                 fetchClients(); // Reîmprospătează lista de clienți
//             }
//         })
//         .catch(error => console.error('Error deleting client:', error));
// }

// // Adăugare listeneri pentru butoanele de ștergere
// document.querySelectorAll('.delete-button').forEach(button => {
//     button.addEventListener('click', () => {
//         const clientId = button.getAttribute('data-client-id');
//         deleteClient(clientId);
//     });
// });


// File: scripts/collection.js
document.addEventListener('DOMContentLoaded', function() {
    checkCollections();
    document.getElementById('addPlantButton').addEventListener('click', addFigure);
});

function addFigure() {
    let anchor = document.createElement('a');
    anchor.href = "./PlantProfilePage.html"; 
    anchor.setAttribute('target', '_blank'); 

    let figure = document.createElement('figure');

    let img = document.createElement('img');
    img.src = "../Images/website_Icon/LittleCactus.jpg";
    img.alt = "Cute Plant";

    let caption = document.createElement('figcaption');
    caption.textContent = 'Cute Plant';

    figure.appendChild(img);
    figure.appendChild(caption);

    anchor.appendChild(figure);

    document.querySelector('.container').appendChild(anchor);
    checkCollections();
}

function checkCollections() {
    let container = document.getElementById('collectionContainer');
    let messageExists = container.querySelector('.no-collections-message');
    let figuresExist = container.getElementsByTagName('figure').length > 0;

    if (!figuresExist && !messageExists) {
        let message = document.createElement('p');
        message.className = 'no-collections-message';
        message.textContent = 'No collections made yet.';
        container.appendChild(message);
    } else if (figuresExist && messageExists) {
        container.removeChild(messageExists);
    }

    if (messageExists) {
        messageExists.style.display = figuresExist ? 'none' : 'block';
    }
}


document.getElementById('delete').addEventListener('click', () =>{

    const collection__id = sessionStorage.getItem('data-collection-id');

    fetch('/api/deleteCollection', {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({collectionId: collection__id})
    })
    .then(response => {
        if (response.ok) {
            console.log('Collection deleted successfully');
        } else {
            console.error('Failed to delete collection:', response.status);
        }
    })
    .catch(error => {
        console.error('Error deleting collection:', error);
    });
    
    window.location.href = "./profile.html";
});

    const modal = document.getElementById('modal');
    const editButton = document.getElementById('edit');


    editButton.addEventListener('click', () => {
    
        const titleInput = document.querySelector('input[name="title"]');
        const descriptionInput = document.querySelector('input[name="description"]');
        const isSharedCheckbox = document.querySelector('input[name="isShared"]');

        titleInput.value = document.getElementById('titleText').textContent || '';
        descriptionInput.value = document.getElementById('descriptionText').textContent || '';

        const isSharedValue = document.getElementById('title').getAttribute('isShared');
        if (isSharedValue === '1') {
            isSharedCheckbox.checked = true;
        } else {
            isSharedCheckbox.checked = false;
        }

        modal.style.display = 'flex';
        
    });

    document.querySelector('.close').addEventListener('click', () => {
    modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
    if (event.target == modal) {
        modal.style.display = 'none';
    }
    });

////////////////////////////////////////////////////////////////////////////////////


const form = document.querySelector('form');

form.addEventListener('submit', (event) => {
  event.preventDefault();

  const formData = new FormData(form);
  const formDataJson = {};
  formData.forEach((value, key) => {
    formDataJson[key] = value;
  });

  formDataJson.collectionId = sessionStorage.getItem('data-collection-id');

  if (!form.elements.isShared.checked) {
    formDataJson.isShared = 0;
    }

        console.log(formDataJson);

        document.getElementById('titleText').textContent = formDataJson.title;
        document.title = formDataJson.title + ' | HeMa';
        document.getElementById('descriptionText').textContent = formDataJson.description;

        document.getElementById('title').setAttribute('isShared', formDataJson.isShared);

        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth() + 1; 
        const day = currentDate.getDate();

        const formattedDay = day < 10 ? '0' + day : day;
        const fromattedMonth = month < 10 ? '0' + month : month;

        document.getElementById('right').innerHTML  = document.getElementById('right').textContent.substring(0, 24) + '<br>Last Update: ' + formattedDay + '/' + fromattedMonth + '/' + year;

        fetch('/api/updateCollection', {
            method: 'PUT',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(formDataJson)
        })
        .then(response => {
            if (response.ok) {
                console.log('Collection Updated');
            } else {
                console.error('Failed to add comment:', response.status);
            }
          }).catch(error => {
            console.error('Error submitting form:', error);
        });
        

  modal.style.display = 'none';
});

async function fetchCollectionData(collectionID) {


    fetch('/api/id', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
      }).then((response) => {
          if(response.status === 200){
            userID = response.headers.get('userId');
          
            fetch('/api/collectionData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ collectionId: collectionID })
            })
            .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                console.error('Failed to add comment:', response.status);
            }
            }).then(data => {
                    
                const information = data[0];

                console.log(information);

                if(information.client_id != userID){
                    document.getElementById('collectionButtons').style.display = 'none';
                  }

                document.getElementById('titleText').textContent = information.name;
                document.title = information.name + ' | HeMa';
                document.getElementById('descriptionText').textContent = information.description;

                document.getElementById('title').setAttribute('isShared', information.is_shared);

                const creationYear = information.creation_time.substring(0, 4);
                const creationMonth = information.creation_time.substring(5, 7); 
                const creationDay = information.creation_time.substring(8, 10);

                const modificationYear = information.modification_time.substring(0, 4);
                const modificationMonth = information.modification_time.substring(5, 7); 
                const modificationDay = information.modification_time.substring(8, 10);


                document.getElementById('right').innerHTML = 'Uploaded at: ' + creationDay + '/' + creationMonth + '/' + creationYear + '<br> Last Update:' + modificationDay + '/' + modificationMonth + '/' + modificationYear;
                document.getElementById('left').innerHTML = 'Author: ' + information.clientName;

            })
            .catch(error => {
                console.error('Error submitting form:', error);
            });
        }
    });
}


document.addEventListener('DOMContentLoaded', () => {
    const collectionID = sessionStorage.getItem('data-collection-id'); 
  
    fetchCollectionData(collectionID);
  });
  
// File: scripts/contact.js
document.addEventListener('DOMContentLoaded', function () {
    const contactForm = document.getElementById('contact_form');

    contactForm.addEventListener('submit', function (event) {

        event.preventDefault();

        const name = document.getElementById('name_input').value;
        const phone = document.getElementById('telephone_input').value;
        const email = document.getElementById('das').value;
        const message = document.getElementById('message_input').value;
        const subject = document.getElementById('subject_input').value;

        let auth = true;

        if(name == ""){
            document.getElementById("name_input").placeholder = "Can't leave empty";
            auth = false;
        }
        if(phone == ""){
            document.getElementById("telephone_input").placeholder = "Can't leave empty";
            auth = false;
        }else if(!isRomanianPhoneNumber(phone)){
            document.getElementById("telephone_input").placeholder = "Use a Romanian Number";
            document.getElementById("telephone_input").value = "";
            auth = false;
        }
        if(email == ""){
            document.getElementById("das").placeholder = "Can't leave empty";
            auth = false;
        }else if(!isValidEmail(email)){
            document.getElementById("das").placeholder = "Use a Valid Email";
            document.getElementById("das").value = "";
            auth = false;
        }
        if(message == ""){
            document.getElementById("message_input").placeholder = "Can't leave empty";
            auth = false;
        }
        if(subject == ""){
            const optionElement = document.querySelector('option[value=""]');
            optionElement.textContent = "You have to choose a subject";
            auth = false;
        }

        if(auth){
            fetch('/sendEmail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    nume: name,
                    telephone: phone.replace(/\D/g, ''),
                    gmail: email,
                    message: message,
                    subject: subject,
                }),
            })
            .then((response) => {
                if (response.status === 500) {
                    document.getElementById('form_button').value = "There was an error";
                }else if(response.status === 200){    
                    document.getElementById('form_button').value = "Email sent successfully";

                    const myPromise = new Promise((resolve) => {
                        setTimeout(() => {
                          resolve("Promise resolved after 2 seconds");
                        }, 3000);
                      });

                    myPromise.then(() => {
                        window.location.href = "./index.html";    
                        document.getElementById('form_button').value = "SEND MESSAGE";                    
                    }).catch((error) => {
                        console.error(error);
                    });
                    }
                })
            .catch((error) => {
                console.error('Error:', error);
            });
        }
    });
});

function isRomanianPhoneNumber(input) {
    const phoneNumber = input.replace(/\D/g, '');
    
    const romanianPhoneNumberRegex = /^(4)?(02|03|07|08)\d{8}$/;
    
    return romanianPhoneNumberRegex.test(phoneNumber);
  }
  
  function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    return emailRegex.test(email);
  }
// File: scripts/createNewBlog.js
document.getElementById('AddNewSection').addEventListener('click', function(){
    
    let divElement = document.getElementById("sectionForSections");

    let htmlCode = `<div class="blog-post">
    <h2>Section Title:</h2>
    <input type="text" class="nameInput" name="nameInput"><br>
    
    <h2>Section Description:</h2><br>
    <textarea class="descriptionInput" name="descriptionInput" rows="4" cols="50"></textarea><br> 

    <div class="image"></div> 

    <div class="organizeButtons">
    <input type="file" class="fileInput" onchange="addPictures(this)">
    <button onclick="deleteSection(this)">Delete</button> 
    </div>
</div>`;

    divElement.insertAdjacentHTML('beforeend', htmlCode);

});

function deleteSection(button) {
    let section = button.closest('.blog-post'); // Find the parent section
    section.remove(); // Remove the section
}


function addPictures(button) {

    let blogPostDiv = button.closest('.blog-post');
    let addImagesDiv = blogPostDiv.querySelector('.image');
    let fileInput = blogPostDiv.querySelector('.fileInput');

    let existingImagesCount = addImagesDiv.querySelectorAll('img').length;
    if (existingImagesCount >= 3) {
        console.log('Maximum number of images (3) reached.');
        return;
    }

    for (let i = 0; i < fileInput.files.length; i++) {

        let imgElement = document.createElement("img");

        imgElement.src = URL.createObjectURL(fileInput.files[i]);


        imgElement.style.width = "200px";
        imgElement.style.marginTop = "10px";
        imgElement.style.marginBottom = "10px";
        imgElement.style.borderRadius = "32px";
        imgElement.style.marginLeft = "5px";
        imgElement.style.marginRight = "5px";
        imgElement.style.border = "1px solid #E2F4C5";
        imgElement.style.boxShadow = "0px 0px 20px rgba(0, 0, 0, 1)";

        addImagesDiv.appendChild(imgElement);
    }
}


document.getElementById('Save').addEventListener('click', async function(){

    // Create an array to store the blog post data
    let postData = [];

    // Iterate over each blog-post element
    let blogPosts = document.querySelectorAll('.blog-post');
    blogPosts.forEach(function(post, index) {
        // Get the title and description inputs
        let titleInput = post.querySelector('.nameInput').value;
        let descriptionInput = post.querySelector('.descriptionInput').value;

        let imageUrls = [];

        // Get the images added
        let images = post.querySelectorAll('.image img');
        images.forEach(function(img, imgIndex) {
            imageUrls.push(img.src);
        });

        postData.push({
            title: titleInput,
            description: descriptionInput,
            images: imageUrls
        });
    });

    try {
        // Send the postData array to the server
        const response = await fetch('/saveBlogPosts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(postData)
        });

        if (response.ok) {
            // Get the URLs of the first images from the server response
            const firstImageUrls = await response.json();

            // Open a new window/tab for each first image URL received from the server
            firstImageUrls.forEach(imageUrl => {
                window.open(imageUrl);
            });
        } else {
            console.error('Failed to save blog posts:', response.statusText);
        }
    } catch (error) {
        console.error('Error saving blog posts:', error);
    }
    window.location.href = './blog.html';
});

// File: scripts/error404.js
document.getElementById('linkToHome').addEventListener("click", function(event){
    
    event.preventDefault();

    fetch('/error404Return', {
        method: 'POST',
        credentials: 'same-origin',
    })
    .then(response => {
        if (response.ok) {
            const logicType = response.headers.get('isAdmin');

            if(logicType == 'True')
                window.location.href = './admin.html';
            else
                window.location.href = './index.html';

        } else {
            console.error('Logout failed:', response.statusText);
        }
    })
    .catch(error => {
        console.error('Error during logout:', error);
    });
});
// File: scripts/feed.js
let isTextDisplayOn = true;

document.querySelectorAll('.like, .dislike, .visit').forEach(th => {

    th.addEventListener('click', function() {
        if (th.classList.contains('like') || th.classList.contains('dislike')) {
          th.textContent = '+1';
        } else if (th.classList.contains('visit')) {
          //change webpage
        }
      });
    th.addEventListener('mouseover', function() {
      if (th.classList.contains('like') || th.classList.contains('dislike')) {
        th.textContent = '0';
      } else if (th.classList.contains('visit')) {
        th.textContent = 'Visit';
      }
    });
    th.addEventListener('mouseout', function() {
      th.style.fontSize = '20px'; 
      if (th.classList.contains('like')) {
        th.textContent = '👍🏻'; 
      }else if(th.classList.contains('dislike')){
        th.textContent = '👎🏻';
      } else if (th.classList.contains('visit')) {
        th.textContent = '🌱';
      }
    });
  });


const inputs = [
    document.getElementById('nameInput'),
    document.getElementById('clientInput'),
    document.getElementById('dateInput')
];
inputs.forEach((input, index) => {
    input.addEventListener('input', function(event) {
        const nameInputText = inputs[0].value.trim().toLowerCase();
        const clientInputText = inputs[1].value.trim().toLowerCase();
        const dateInputText = inputs[2].value.trim().toLowerCase();
        filterTable(nameInputText, clientInputText, dateInputText);
    });
});

function filterTable(nameInputText, clientInputText, dateInputText) {

    let numberOfShowedTables = 0;

    if(isTextDisplayOn){

        const tables = document.querySelectorAll('#switch1 .clientsTable');

        tables.forEach(table => {
            const tableRows = table.querySelectorAll('.clientsTableBody');
            const firstRow = tableRows[0];

            const firstCell = firstRow.querySelector(`td:nth-child(1)`);
            const secondCell = firstRow.querySelector(`td:nth-child(2)`);
            const thirdCell = firstRow.querySelector(`td:nth-child(3)`);

            const firstCellText = firstCell.textContent.trim().toLowerCase();
            const secondCellText = secondCell.textContent.trim().toLowerCase();
            const thirdCellText = thirdCell.textContent.trim().toLowerCase();

            if (firstCellText.includes(nameInputText) && secondCellText.includes(clientInputText) && thirdCellText.includes(dateInputText)) {
                table.style.display = '';
                numberOfShowedTables++;
            } else {
                table.style.display = 'none';
            }
        });
    }else{

        const flip_cards = document.querySelectorAll('.flip-card:not(#hideFlip)');

        flip_cards.forEach(flip_card => {

            const table = flip_card.querySelector(`table:nth-child(1)`);
            const tableRows = table.querySelectorAll('.scrollable-content');

            const firstCellText = tableRows[0].textContent.trim().toLowerCase();
            const secondCellText = tableRows[1].textContent.trim().toLowerCase();
            const thirdCellText = tableRows[2].textContent.trim().toLowerCase();

            if (firstCellText.includes(nameInputText) && secondCellText.includes(clientInputText) && thirdCellText.includes(dateInputText)) {
                flip_card.style.display = 'flex';
                numberOfShowedTables++;
            } else {
                flip_card.style.display = 'none';
            }
        });

    }

    if(numberOfShowedTables > 0){
        document.getElementById('hideFlip').style.display = 'none';
        document.getElementById('hiddenTable').style.display = 'none';
    }else{
        document.getElementById('hideFlip').style.display = 'flex';
        document.getElementById('hiddenTable').style.display = '';
    }
}





const modifyButtons = document.querySelectorAll('.flip-card-front');
const elementsToModify = document.querySelectorAll('.flip-card-inner');

modifyButtons.forEach((button, index) => {
    button.addEventListener('click', function() {
        elementsToModify[index].style.transform = "rotateX(180deg)";
    });

});

const modi = document.querySelectorAll('.flip-card-back');

modi.forEach((button, index) => {
    button.addEventListener('click', function(event) {
        const clickedElement = event.target;
        if (!clickedElement.closest('tfoot')) {
            elementsToModify[index].style.transform = "rotateX(0deg)";
        }
    });

});

const selectElement = document.getElementById('display_input');

selectElement.addEventListener('change', function(event) {
    const selectedIndex = selectElement.selectedIndex;
    const selectedText = selectElement.options[selectedIndex].text;

    if(selectedText === 'Text'){
        document.getElementById('switch1').style.display = '';
        document.getElementById('switch2').style.display = 'none';
        isTextDisplayOn = true;
    }else if(selectedText === 'Visual Spoiler'){
        document.getElementById('switch1').style.display = 'none';
        document.getElementById('switch2').style.display = 'flex';
        isTextDisplayOn = false
    }

    const nameInputText = inputs[0].value.trim().toLowerCase();
    const clientInputText = inputs[1].value.trim().toLowerCase();
    const dateInputText = inputs[2].value.trim().toLowerCase();
    filterTable(nameInputText, clientInputText, dateInputText);
});










const nameInputText = inputs[0].value.trim().toLowerCase();
const clientInputText = inputs[1].value.trim().toLowerCase();
const dateInputText = inputs[2].value.trim().toLowerCase();
filterTable(nameInputText, clientInputText, dateInputText);
// File: scripts/footer.js
let github_general = document.getElementById("github");
let uaic_general = document.getElementById("uaic");


function opa_over(event){
    event.target.style.opacity = "100%";
}

function opa_out(event){
    event.target.style.opacity = "60%";
}

github_general.addEventListener("mouseover",opa_over);
github_general.addEventListener("mouseout",opa_out);
uaic_general.addEventListener("mouseover",opa_over);
uaic_general.addEventListener("mouseout",opa_out);

github_general.addEventListener("click", function(){
    window.open('https://github.com/NovioAlexandruRosca/Proiect-Web-2024-HeMa-',"_blank");
});

uaic_general.addEventListener("click", function(){
    window.open('https://www.info.uaic.ro',"_blank");
});
// File: scripts/index.js
let userID;

document.addEventListener('DOMContentLoaded', () => {
    fetch('/api/user', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
    }).then((response) => {
        if(response.status === 200){
            const logicType = response.headers.get('Name');
            document.querySelector('#homeTitle p').textContent = `Hello ${logicType}, what would you like to do today?`;
        }
    });

    fetch('/api/id', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
    }).then((response) => {
        if(response.status === 200){
            userID = response.headers.get('userId');
        }
    });

  });
  

  document.getElementById('viewProfile').addEventListener('click', () => {
    sessionStorage.setItem('clientID', userID);
  });
// File: scripts/landingPage.js
const initSlider = () => {
    const container = document.getElementById('container');
    const imageList = document.querySelector(".slider-wrapper .image-list");
    const slideButtons = document.querySelectorAll(".slider-wrapper .slide-button");
    const sliderScrollbar = document.querySelector("#container .slider-scrollbar");
    const scrollbarThumb = sliderScrollbar.querySelector(".scrollbar-thumb");
    const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;
    
    let scrollDirection = 1;

    // Auto slide function
    const autoSlide = () => {
        const scrollAmount = imageList.clientWidth/ 500 * scrollDirection;
        imageList.scrollBy({ left: scrollAmount, behavior: "smooth" });

    // Toggle scroll direction when reaching the sides of the image list
    if (imageList.scrollLeft >= maxScrollLeft) {
        scrollDirection = -1; // Change direction to left
    } else if (imageList.scrollLeft <= 0) {
        scrollDirection = 1; // Change direction to right
    }
    };

    // Set interval for auto slide (change 3000 to desired interval in milliseconds)
    let autoSlideInterval = setInterval(autoSlide, 50);

    // Stop auto slide on mouse enter
    container.addEventListener("mouseenter", () => {
        clearInterval(autoSlideInterval);
    });

    // Resume auto slide on mouse leave
    container.addEventListener("mouseleave", () => {
        autoSlideInterval = setInterval(autoSlide, 50);
    });

    // Slide images according to the slide button clicks
    slideButtons.forEach(button => {
        button.addEventListener("click", () => {
            const direction = button.id === "prev-slide" ? -1 : 1;
            const scrollAmount = imageList.clientWidth / 3 * direction;
            imageList.scrollBy({ left: scrollAmount, behavior: "smooth" });
        });
    });

     // Show or hide slide buttons based on scroll position
    const handleSlideButtons = () => {
        slideButtons[0].style.display = imageList.scrollLeft <= 0 ? "none" : "flex";
        slideButtons[1].style.display = imageList.scrollLeft >= maxScrollLeft ? "none" : "flex";
    }

    // Update scrollbar thumb position based on image scroll
    const updateScrollThumbPosition = () => {
        const scrollPosition = imageList.scrollLeft;
        const thumbPosition = (scrollPosition / maxScrollLeft) * (sliderScrollbar.clientWidth - scrollbarThumb.offsetWidth);
        scrollbarThumb.style.left = `${thumbPosition}px`;
    }

    // Call these two functions when image list scrolls
    imageList.addEventListener("scroll", () => {
        updateScrollThumbPosition();
        handleSlideButtons();
    });
}

window.addEventListener("resize", initSlider);
window.addEventListener("load", initSlider);


let loginClients = document.getElementById("loginClients");
let loginAdmin = document.getElementById("loginAdmin");
let registerClients = document.getElementById("registerClients");

loginClients.addEventListener('click', function (event) {
    localStorage.setItem('clientIsAdmin', 'false');
    window.location.href = '/login.html';
});

loginAdmin.addEventListener('click', function (event) {
    localStorage.setItem('clientIsAdmin', 'true');
    window.location.href = '/login.html';
});

registerClients.addEventListener('click', function (event) {
    window.location.href = '/register.html';
});
// File: scripts/listOfClients.js
function showLoadingIndicator() {
    const loadingDiv = document.getElementById('loading');
    if (loadingDiv) {
        loadingDiv.style.display = 'block';
    }
}

function hideLoadingIndicator() {
    const loadingDiv = document.getElementById('loading');
    if (loadingDiv) {
        loadingDiv.style.display = 'none';
    }
}

function displayClients(clients) {
    const table = document.getElementById('clientsTableBody');
    table.innerHTML = '';
    clients.forEach(client => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><span class="idcol">${client.id}</span></td>
            <td class="scrollable-content"><span>${client.name}</span></td>
            <td><span>${client.email}</span></td>
            <td class="deleteBtn"><button class="emoji" onclick="deleteClient(${client.id}, this.parentElement.parentElement)">🗑️</button></td>
            <td><span class="emoji">🌱</span></td>
        `
        // row.innerHTML = `
        //     <td><span class="idcol">${client.id}</span></td>
        //     <td class="scrollable-content"><span>${client.name}</span></td>
        //     <td><span>${client.email}</span></td>
        //     <td class="deleteBtn"><button class="emoji" onclick="deleteClient(${client.id}, this.parentElement.parentElement)">🗑️</button></td>
        // `;
        table.appendChild(row);
    });
}

function displayNoClientsFound() {
    const table = document.getElementById('clientsTableBody');
    table.innerHTML = `<tr><td colspan="4">No clients found</td></tr>`;
}

function deleteClient(clientId) {
    console.log(clientId);
    fetch(`api/clients/${clientId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`!!!!!HTTP error! Status: ${response.status}\n`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            console.log('Client deleted successfully\n');
            window.location.reload(); 
        } else {
            // console.error('Failed to delete client\n');
            // alert('Failed to delete client, please try again.\n');
        }
    })
    .catch(error => {
        // console.error('Error:', error);
        // alert(`Failed to delete client, reloading the page to update state. Error: ${error}\n`);
        window.location.reload(); 
    });
}






async function fetchClientsWithRetry(maxRetries = 3) {
    let attempts = 0;
    while (attempts < maxRetries) {
        try {
            console.log(attempts + '------------------------------------------------------------\n')
            showLoadingIndicator();
            const response = await fetch('/api/clients');
            if (!response.ok) {
                throw new Error(`??????HTTP error! Status: ${response.status}\n`);
            }
            const clients = await response.json();
            hideLoadingIndicator(); 
            if (clients.length > 0) {
                displayClients(clients);
            } else {
                displayNoClientsFound(); 
            }
            break;  
        } catch (error) {
            console.error('Attempt', attempts + 1, 'failed:', error);
            if (attempts === maxRetries - 1) {
                displayError('Failed to fetch clients after several attempts. Please try again later.\n');
            }
            attempts++;
        } finally {
            hideLoadingIndicator();
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    fetchClientsWithRetry();
});


// async function fetchClientsWithRetry(maxRetries = 3) {
//     let attempts = 0;
//     while (attempts < maxRetries) {
//         try {
//             showLoadingIndicator();
//             const response = await fetch('/api/clients', { cache: 'no-cache' });
//             if (!response.ok) {
//                 throw new Error(`HTTP error! Status: ${response.status}`);
//             }
//             const clients = await response.json();
//             if (clients.length > 0) {
//                 displayClients(clients);
//                 break; 
//             }
//             throw new Error('No data received');
//         } catch (error) {
//             console.error('Attempt', attempts + 1, 'failed:', error);
//             if (attempts === maxRetries - 1) {
//                 displayError('Failed to fetch clients after several attempts. Please try again later.');
//             }
//             attempts++;
//         } finally {
//             hideLoadingIndicator();
//         }
//     }
// 

function displayError(message) {
    const errorDiv = document.getElementById('errorDisplay');
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
}

const textInput = document.getElementById('textInput');
textInput.addEventListener('input', async function(event) {
    const inputText = event.target.value.trim().toLowerCase();
    try {
        console.log('---------------------------HERE---------------------------------------')
        const response = await fetch(`/api/clients?search=${inputText}`, { cache: 'no-cache' });
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const filteredClients = await response.json();
        displayClients(filteredClients);
    } catch (error) {
        console.error('Error fetching filtered clients:', error);
        displayError('Failed to filter clients. Please try again.');
    }
});

// File: scripts/login.js
// document.getElementById('login_form').addEventListener('submit', function(event) {
//     event.preventDefault(); 

//     const formData = new FormData(this);
//     fetch('/testCredentials', {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json'
//         },
//         body: JSON.stringify({
//             Email: formData.get('Email'),
//             Password: formData.get('Password')
//         })
//     })
//     .then(response => response.json())
//     .then(data => {
//         if (data.message === 'Authenticated successfully') {
//             if (data.isAdmin === 'True') {
//                 window.location.href = '/admin.html'; 
//             } else {
//                 window.location.href = '/index.html'; 
//             }
//         } else {
//             document.getElementById('Error_Message').textContent = data.message || 'Login failed'; // Afișează mesaj de eroare
//         }
//     })
//     .catch(error => console.error('Error:', error));
// });

//----------------------------------

const register_button = document.getElementById("register");

register_button.addEventListener("click",() => {
    window.location.href = "./register.html";
});

document.getElementById("Email").addEventListener("click", () => {
    document.getElementById("Email").placeholder = "";
});

document.getElementById("Password").addEventListener("click", () => {
    document.getElementById("Password").placeholder = "";
});

document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login_form');
    const emailInput = document.getElementById('Email');
    const passwordInput = document.getElementById('Password');
    const errorMessage = document.getElementById('Error_Message');

    loginForm.addEventListener('submit', function (event) {
        event.preventDefault();

        const username = emailInput.value.trim();
        const password = passwordInput.value.trim();
        let isValid = true;

        if (username === "") {
            errorMessage.textContent = "Email can't be empty.";
            isValid = false;
        }
        if (password === "") {
            errorMessage.textContent = "Password can't be empty.";
            isValid = false;
        }

        if (isValid) {
            fetch('/testCredentials', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ Email: username, Password: password })
            })
            .then(response => response.json())
            .then(data => {
                if (data.message === 'Authenticated successfully') {
                    if (data.isAdmin === 'True') {
                        window.location.href = '/admin.html';
                    } else {
                        window.location.href = '/index.html';
                    }
                } else {
                    errorMessage.textContent = data.message || 'Login failed';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                errorMessage.textContent = "Login failed, please try again.";
            });
        }
    });
});





// File: scripts/navBar.js
document.getElementById('logout').addEventListener("click", function(event){
    
    event.preventDefault();

    fetch('/logout', {
        method: 'POST',
        credentials: 'same-origin',
    })
    .then(response => {
        if (response.ok) {
            document.cookie = 'sessionId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            window.location.href = './landingPage.html';
        } else {
            console.error('Logout failed:', response.statusText);
        }
    })
    .catch(error => {
        console.error('Error during logout:', error);
    });
});
// File: scripts/profile.js
document.addEventListener('DOMContentLoaded', function() {
    checkCollections();
    document.getElementById('addPlantButton').addEventListener('click', addFigure);
});

function addFigure() {

    const newFigure = document.createElement("figure");
    
    const newImage = document.createElement("img");
    newImage.src = "../images/background/card2.jpg";
    newImage.alt = "New Image";
    newImage.width = 250; 
    newImage.height = 300; 
    
    const newCaption = document.createElement("figcaption");
    newCaption.textContent = "New Collection"; 
    
    newFigure.appendChild(newImage);
    newFigure.appendChild(newCaption);

    fetch('/api/createCollection', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      }
    }).then(response => {
      if (response.ok) {
          return response.json();
      } else {
          throw new Error('Failed to create collection');
      }
    }).then(data => {
        const collectionId = data.collectionId;
        newFigure.setAttribute('data-collection-id', collectionId);
        
    }).catch(error => {
        console.error('Error creating collection:', error);
    });

    newFigure.addEventListener('click', function() {
      window.location.href = "./collection.html";
      sessionStorage.setItem('data-collection-id', newFigure.getAttribute('data-collection-id'));
    });

    const collectionsDiv = document.querySelector(".collectionsPlace");
    collectionsDiv.appendChild(newFigure);
  

    checkCollections();

}

function checkCollections() {
    let container = document.getElementById('figurePlace');
    let messageExists = container.querySelector('.no-collections-message');
    let figuresExist = container.getElementsByTagName('figure').length > 0;

    if (!figuresExist && !messageExists) {
        let message = document.createElement('p');
        message.className = 'no-collections-message';
        message.textContent = 'No collections made yet.';
        container.appendChild(message);
    } else if (figuresExist && messageExists) {
        container.removeChild(messageExists);
    }

    if (messageExists) {
        messageExists.style.display = figuresExist ? 'none' : 'block';
    }
}

/////////////////////////////////////////////////////////////////////////////////////

const facebookButton = document.getElementById('faceb');
const gitButton = document.getElementById('git');
const instaButton = document.getElementById('insta');
const twitterButton = document.getElementById('tw');

[facebookButton, gitButton, instaButton, twitterButton].forEach(button => {
    button.addEventListener('click', () => {
        const url = button.getAttribute('link');

        if(url != null && url != ''){
            const newTab = window.open(url, '_blank');
            if (newTab) {
                newTab.focus();
            }
        }
    });
});


///////////////////////////////////////////////////////////////////////////////////////////////

const modal = document.getElementById('modal');
const editButton = document.getElementById('editButton');


editButton.addEventListener('click', () => {

    const userAddressElement = document.getElementById('userAddress');
    const addressText = userAddressElement.textContent.trim();
    const addressParts = addressText.split(', ');

    const city = addressParts[0]; 
    let street;
    let number;
    if(addressParts[1])
      street = addressParts[1].substring(7); 
    if(addressParts[2])
      number = addressParts[2].substring(3); 

    const nameInput = document.querySelector('input[name="name"]');
    const occupationInput = document.querySelector('input[name="occupation"]');
    const cityInput = document.querySelector('input[name="city"]');
    const streetInput = document.querySelector('input[name="street"]');
    const numberInput = document.querySelector('input[name="number"]');
    const facebookInput = document.querySelector('input[name="facebook"]');
    const githubInput = document.querySelector('input[name="github"]');
    const instagramInput = document.querySelector('input[name="Instagram"]');
    const twitterInput = document.querySelector('input[name="twitter"]');
  
    nameInput.value = document.getElementById('userName').textContent || '';
    occupationInput.value = document.getElementById('userOccupation').textContent || '';
    cityInput.value = city || '';
    streetInput.value = street || '';
    numberInput.value = number || '';
    facebookInput.value = facebookButton.getAttribute('link');
    githubInput.value = gitButton.getAttribute('link');
    instagramInput.value = instaButton.getAttribute('link');
    twitterInput.value = twitterButton.getAttribute('link');
  
    modal.style.display = 'flex';

});

document.querySelector('.close').addEventListener('click', () => {
  modal.style.display = 'none';
});

window.addEventListener('click', (event) => {
  if (event.target == modal) {
    modal.style.display = 'none';
  }
});


const form = document.querySelector('form');

form.addEventListener('submit', (event) => {
  event.preventDefault();

  const formData = new FormData(form);
  const formDataJson = {};
  formData.forEach((value, key) => {
    formDataJson[key] = value;
  });

  fetch('/api/updateUser', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formDataJson)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Failed to submit form');
    }
    console.log(formDataJson);

    facebookButton.setAttribute('link', formDataJson.facebook || '');
    gitButton.setAttribute('link', formDataJson.github || '');
    instaButton.setAttribute('link', formDataJson.Instagram || '');
    twitterButton.setAttribute('link', formDataJson.twitter || '');

    document.getElementById('userName').textContent  = formDataJson.name || '';
    document.getElementById('userOccupation').textContent  = formDataJson.occupation || '';
    document.getElementById('userAddress').textContent  = formDataJson.city + ', Strada ' + formDataJson.street + ', nr.' + formDataJson.number;

    let addressString = formDataJson.city;

    if (formDataJson.street) {
        addressString += ', Strada ' + formDataJson.street;
    }

    if (formDataJson.number) {
        addressString += ', nr.' + formDataJson.number;
    }

    document.getElementById('userAddress').textContent  = addressString;

    console.log('Form submitted successfully');
  })
  .catch(error => {
    console.error('Error submitting form:', error);
  });

  modal.style.display = 'none';
});

////////////////////////////////////////////////////////////////////////////////////

let userID;

async function fetchClientData(clientId) {

  fetch('/api/id', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    },
  }).then((response) => {
      if(response.status === 200){
          userID = response.headers.get('userId');
      
          fetch('/api/clientData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ clientId: clientId })
        })
        .then(response => {
          if (response.ok) {
              return response.json();
          } else {
              console.error('Failed to add comment:', response.status);
          }
      }).then(data => {
          
          console.log(data[0].client_id, userID);
    
          if(data[0].client_id == userID){
            document.getElementById('followButton').style.display = 'none';
          }else{
            document.getElementById('editButton').style.display = 'none';
          }
    
          facebookButton.setAttribute('link', data[0].facebook_link || '');
          gitButton.setAttribute('link', data[0].github_link || '');
          instaButton.setAttribute('link', data[0].instagram_link || '');
          twitterButton.setAttribute('link', data[0].twitter_link || '');
    
          document.getElementById('userName').textContent  = data[0].name || '';
          document.getElementById('userOccupation').textContent  = data[0].occupation || '';
    
          const clientData = data[0];
          let addressString = clientData.city;
    
          if (clientData.street) {
              addressString += ', Strada ' + clientData.street;
          }
    
          if (clientData.house_number) {
              addressString += ', nr.' + clientData.house_number;
          }
    
          document.getElementById('userAddress').textContent  = addressString;
        })
        .catch(error => {
          console.error('Error submitting form:', error);
        });
        }
  });
  
}

async function fetchClientCollections(clientId) {

  fetch('/api/id', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    },
  }).then((response) => {
      if(response.status === 200){
          userID = response.headers.get('userId');
      
          fetch('/api/clientCollections', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ clientId: clientId })
        })
        .then(response => {
          if (response.ok) {
              return response.json();
          } else {
              console.error('Failed to add comment:', response.status);
          }
      }).then(data => {
          
          data.forEach(item => {
            const newFigure = document.createElement("figure");
            
            const newImage = document.createElement("img");
            newImage.src = "../images/background/card2.jpg";
            newImage.alt = "New Image";
            newImage.width = 250; 
            newImage.height = 300; 
            
            const newCaption = document.createElement("figcaption");
            newCaption.textContent = item.name || ''; 
            
            newFigure.appendChild(newImage);
            newFigure.appendChild(newCaption);
            
            newFigure.setAttribute('data-collection-id', item.collection_id);

            newFigure.addEventListener('click', function() {
                window.location.href = "./collection.html";
                sessionStorage.setItem('data-collection-id', newFigure.getAttribute('data-collection-id'));
            });

            const collectionsDiv = document.querySelector(".collectionsPlace");
            collectionsDiv.appendChild(newFigure);
            
        });
            checkCollections();
        })
        .catch(error => {
          console.error('Error submitting form:', error);
        });
        }
  });
  
}


document.addEventListener('DOMContentLoaded', () => {
  const clientId = sessionStorage.getItem('clientID'); 

  fetchClientData(clientId);
  fetchClientCollections(clientId);
});

// File: scripts/register.js
const login_button = document.getElementById("register");

login_button.addEventListener("click",() => {
    window.location.href = "./login.html";
});

document.getElementById("Email").addEventListener("click", () => {
    document.getElementById("Email").placeholder = "";
});

document.getElementById("Password").addEventListener("click", () => {
    document.getElementById("Password").placeholder = "";
});

document.getElementById("Name").addEventListener("click", () => {
    document.getElementById("Name").placeholder = "";
});

document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login_form');

    loginForm.addEventListener('submit', function (event) {

        event.preventDefault();

        const username = document.getElementById('Email').value;
        const name = document.getElementById('Name').value;
        const password = document.getElementById('Password').value;

        let auth = true;

        if(username == ""){
            document.getElementById("Email").placeholder = "Can't leave empty";
            auth = false;
        }else if(!isValidEmail(username)){
            document.getElementById("Email").placeholder = "Use a Valid Email";
            document.getElementById("Email").value = "";
            auth = false;
        }
        if(name == "")
        {
            document.getElementById("Name").placeholder = "Can't leave empty";
            auth = false;
        }
        if(password == "")
        {
            document.getElementById("Password").placeholder = "Can't leave empty";
            auth = false;
        }

        if(auth)
        {
            fetch('/registerCredentials', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    Email: username,
                    Password: password,
                    Name:name,
                }),
            })
            .then((response) => {
                if (response.status === 401) {

                    document.getElementById("Email").value = "";
                    document.getElementById("Error_Message").innerText = "Email already exists!";
                }
                else    
                    window.location.href = "/login.html";
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }
    });
});

function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    return emailRegex.test(email);
  }
// File: scripts/rss_generator.js
const RSS = require('rss-generator');
const fs = require('fs').promises;
require('dotenv').config();

const port = process.env.PORT || 5500;

const planteClasament = [
    { nume: 'Lavanda', popularitate: 100 },
    { nume: 'Rozmarin', popularitate: 80 },
    { nume: 'Musetel', popularitate: 70 },
    { nume: 'Busuioc', popularitate: 50 },
    { nume: 'Floare de colt', popularitate: 40 },
    { nume: 'Lavanda', popularitate: 10 },
];
async function generateRSS() {
    const feed = new RSS({
        title: 'Cele mai populare plante',
        description: 'Lista celor mai populare plante din aplicația noastră',
        feed_url: 'http:/plantemistoraudetot/rss',
        site_url: `http://localhost:${port}`
    });

    planteClasament.forEach(planta => {
        feed.item({
            title: planta.nume,
            description: `Popularitate: ${planta.popularitate}`,
            url: `http://example.com/plante/${planta.nume}`
        });
    });

    const xml = feed.xml();

    try {
        await fs.writeFile('./rss/rss.xml', xml);
        console.log('RSS-Generator: The RSS file was successfully created');
    } catch (err) {
        console.error('RSS-Generator: Error writing RSS file:', err);
    }
}

generateRSS();
// File: scripts/run-scripts.bat
rem run-scripts.bat

rem Run scheduler.js in the background
start node scripts\scheduler.js

rem Wait for a moment to ensure the scheduler script starts
timeout /t 2

rem Run the server
start npx nodemon scripts\server.js

rem Wait for a moment to ensure the server starts
timeout /t 2

start http://localhost:5500/
// File: scripts/scheduler.js
const cron = require('node-cron');
const { exec } = require('child_process');

console.log('Scheduler.js: The Scheduler.js was launched');

 // Primul câmp (0) specifică minutele.
// 0 înseamnă că functia lambda va fi rulată când campul minute este setat 0.
// Următoarele patru câmpuri (*) sunt folosite:
// ore, zile din lună, lună și zile săptămânii.
// /* înseamnă că funcția va fi rulată pentru orice valori valide pentru aceste câmpuri.

async function scheduleTask() {
    await new Promise((resolve) => {
        cron.schedule('* * * * *', () => {
            console.log('Scheduler.js: rss_generator.js is called');
            exec('node ./scripts/rss_generator.js', (error, stdout, stderr) => {
                if (error) {
                    console.error(`Error: ${error.message}`);
                    return;
                }
                if (stderr) {
                    console.error(`Error: ${stderr}`);
                    return;
                }
                console.log('Scheduler.js: The rss generator script ran successfully');
            });
            resolve();
        }, {
            scheduled: true,
            timezone: 'Europe/Bucharest'
        });
    });
}

scheduleTask().catch(err => console.error('Scheduler.js: Error scheduling task:', err));
// File: scripts/sendMail.js
const nodemailer = require('nodemailer');
require('dotenv').config();

function sendEmail(formData, callback) {

    const transporter = nodemailer.createTransport({
        service: 'Gmail',
        auth: {
            user: process.env.MAILADDRESS,
            pass: process.env.MAILPASSWORD,
        }
    });

    const nume = formData.nume;
    const telefon = formData.telephone;
    const email = formData.gmail;
    const mesaj = formData.message;
    const subiect = formData.subject;

    const mailOptions = {
        from: email,
        to: process.env.MAILADDRESS,
        subject: subiect,
        text: `Nume: ${nume}\nTelefon: ${telefon}\nEmail: ${email}\n\nMesaj: ${mesaj}`
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            console.error('Error sending email:', error);
            callback(error);
        } else {
            console.log('Email sent:', info.response);
            callback(null);
        }
    });
}

module.exports = sendEmail;
// File: scripts/server.js
require('dotenv').config();
console.log(require('dotenv').config());
const url = require('url');
const http = require('http');
const fs = require('fs');
const path = require('path');
const sendEmail = require('./sendMail');
const querystring = require('querystring');
const mysql = require('mysql2');
const { parse } = require('querystring');
const bcrypt = require('bcrypt');

//------------------------------

//----------------------------------


//DATA NEEDED TO CONNECT TO THE DATABASE
const pool = mysql.createPool({
    host: process.env.DATABASEHOST,
    user: process.env.DATABASEUSER,
    password: process.env.DATABASEPASSWORD,
    database: process.env.DATABASENAME,
    waitForConnections: true,
    connectionLimit: 20,
    queueLimit: 0
});

// const pool = mysql.createPool({
//     host: 'localhost',
//     user: 'andrei',
//     password: 'popica',
//     database: 'hema',
//     waitForConnections: true,
//     connectionLimit: 20,
//     queueLimit: 0
// });


// This variable checks to see if the client request is for an html/css... file or is used for registering login, data fetching....
let headerNotModified = true;

// Map to store session data
const sessions = {};

// Function to generate session ID
const generateSessionId = () => {
    return Math.random().toString(36).substring(2, 15);
};

// WE CREATE THE BASE OF THE SERVER
const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;
    const query = parsedUrl.query;

    const cookies = parseCookies(req.headers.cookie)
    const sessionId = cookies.sessionId;
    const sessionData = getSession(sessionId);

    const cookieValue = `sessionId=${sessionId}; HttpOnly; Max-Age=${24 * 60 * 60}`;
    res.setHeader('Set-Cookie', cookieValue);

    //USED FOR deleting a blog
    if(req.method === 'PUT' && req.url === '/api/updateCollection'){
        headerNotModified = false;        
        
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString(); 
        });

        req.on('end', () => {
            const collectionData = JSON.parse(body);

            console.log(collectionData);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }

                const modificationTime = new Date();
            
                connection.query('UPDATE plant_collections SET name = ?, description = ?, is_shared = ?, modification_time = ? WHERE collection_id = ?', 
                             [collectionData.title, collectionData.description, collectionData.isShared, modificationTime, collectionData.collectionId], 
                             (err, result) => {
                if (err) {
                    console.error('Error updating collection:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    connection.release();
                    return;
                }
        
                console.log(`Collection with ID ${collectionData.collectionId} updated successfully`);
                res.writeHead(200, { 'Content-Type': 'text/plain' });
                res.end('Collection updated successfully');
                
                connection.release();
            });
            });
            
        });

    }

    // USED FOR updating client data ---------------------------------
    // if (req.method === 'PUT' && req.url.startsWith('/api/clients/')) {
    //     const clientId = req.url.split('/')[3];
    //     let body = '';
    //     req.on('data', (chunk) => {
    //         body += chunk.toString();
    //     });
    //     req.on('end', () => {
    //         const clientData = JSON.parse(body);
    //         const query = 'UPDATE clients SET name = ?, email = ? WHERE id = ?';
    //         pool.query(query, [clientData.name, clientData.email, clientId], (error, result) => {
    //             if (error) {
    //                 res.writeHead(500, { 'Content-Type': 'application/json' });
    //                 res.end(JSON.stringify({ error: 'Failed to update client' }));
    //                 return;
    //             }
    //             res.writeHead(200, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ message: 'Client updated successfully' }));
    //         });
    //     });
    // }

    // USED FOR deleting a comment from a blog
    if(req.method === 'DELETE' && req.url === '/api/deleteCollection'){
        headerNotModified = false;        
        
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString(); 
        });

        req.on('end', () => {
            const {collectionId} = JSON.parse(body);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }
            
                if (!collectionId) {
                    console.log('Post ID is required');
                    res.writeHead(400, { 'Content-Type': 'text/plain' });
                    res.end('Post ID is required');
                    connection.release();
                    return;
                }
            
                connection.query('DELETE FROM plant_collections WHERE collection_id = ?', [collectionId], (err, result) => {
                    if (err) {
                        console.error('Error deleting comment:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                        connection.release();
                        return;
                    }
            
                    if (result.affectedRows > 0) {
                        console.log(`Collection with ID ${collectionId} deleted successfully`);
                        res.writeHead(200, { 'Content-Type': 'text/plain' });
                        res.end('Post deleted successfully');
                    } else {
                        console.log(`Collection with ID ${collectionId} not found`);
                        res.writeHead(404, { 'Content-Type': 'text/plain' });
                        res.end('Post not found');
                    }
            
                    connection.release();
                });
            });
            
        });

    }

    // USED FOR deleting a blog
    if(req.method === 'DELETE' && req.url === '/api/deletePost'){
        headerNotModified = false;        
        
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString(); 
        });

        req.on('end', () => {
            const { postId} = JSON.parse(body);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }
            
                if (!postId) {
                    console.log('Post ID is required');
                    res.writeHead(400, { 'Content-Type': 'text/plain' });
                    res.end('Post ID is required');
                    connection.release();
                    return;
                }
            
                connection.query('DELETE FROM blog_posts WHERE id = ?', [postId], (err, result) => {
                    if (err) {
                        console.error('Error deleting post:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                        connection.release();
                        return;
                    }
            
                    if (result.affectedRows > 0) {
                        console.log(`Post with ID ${postId} deleted successfully`);
                        res.writeHead(200, { 'Content-Type': 'text/plain' });
                        res.end('Post deleted successfully');
                    } else {
                        console.log(`Post with ID ${postId} not found`);
                        res.writeHead(404, { 'Content-Type': 'text/plain' });
                        res.end('Post not found');
                    }
            
                    connection.release();
                });
            });
            
        });

    }

    // USED FOR deleting a comment from a blog
    if(req.method === 'DELETE' && req.url === '/api/deleteComment'){
        headerNotModified = false;        
        
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString(); 
        });

        req.on('end', () => {
            const { commentId} = JSON.parse(body);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }
            
                if (!commentId) {
                    console.log('Post ID is required');
                    res.writeHead(400, { 'Content-Type': 'text/plain' });
                    res.end('Post ID is required');
                    connection.release();
                    return;
                }
            
                connection.query('DELETE FROM comments WHERE id = ?', [commentId], (err, result) => {
                    if (err) {
                        console.error('Error deleting comment:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                        connection.release();
                        return;
                    }
            
                    if (result.affectedRows > 0) {
                        console.log(`Comment with ID ${commentId} deleted successfully`);
                        res.writeHead(200, { 'Content-Type': 'text/plain' });
                        res.end('Post deleted successfully');
                    } else {
                        console.log(`Comment with ID ${commentId} not found`);
                        res.writeHead(404, { 'Content-Type': 'text/plain' });
                        res.end('Post not found');
                    }
            
                    connection.release();
                });
            });
            
        });

    }

    // USED FOR getting the users name
    if(req.method === 'GET' && req.url === '/api/user'){
        headerNotModified = false;        
        res.writeHead(200, { 'Content-Type': 'text/plain', 'Name' : sessionData.username });
        res.end('Error404 Back To Page');
    }

    // USED FOR getting the users id
    if(req.method === 'GET' && req.url === '/api/id'){
        headerNotModified = false;        
        res.writeHead(200, { 'Content-Type': 'text/plain', 'userId' : sessionData.userId });
        res.end('Error404 Back To Page');
    }

    // USED FOR getting the users name
    if (req.method === 'GET' && req.url === '/api/blogs') {
        headerNotModified = false; 
        pool.query('SELECT * FROM blog_posts', (error, results, fields) => {
            if (error) {
                console.error('Error fetching blogs from database:', error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Internal Server Error' }));
            } else {
                // Format the retrieved data into JSON format
                const jsonData = JSON.stringify(results);

                // Send the JSON response back to the client
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(jsonData);
            }
        });
    }

    // USED FOR getting the details of a client when he goes in his profile
    if (req.method === 'POST' && req.url === '/api/clientData') {
        headerNotModified = false; 
        let data = '';
        
        req.on('data', chunk => {
            data += chunk;
        });

        req.on('end', () => {
            const client_id  = JSON.parse(data);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                    return;
                }

                connection.query('SELECT * FROM clients_details WHERE client_id = ?', [client_id.clientId], (error, results) => {
                    connection.release();
                    if (error) {
                        console.error('Error querying comments:', error);
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Internal Server Error' }));
                        return;
                    }

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(results));
                });
            });
        });
    } 

    // USED TO create a new plant collection
    if (req.method === 'POST' && req.url === '/api/createCollection') {
        headerNotModified = false; 
        pool.getConnection((err, connection) => {
            if (err) {
                console.error('Error getting connection from pool:', err);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Internal Server Error' }));
                return;
            }
    
            connection.query('INSERT INTO plant_collections (client_id, name, creation_time, modification_time) VALUES (?, ?, NOW(), NOW())', 
                            [sessionData.userId, 'New Collection'], 
                            (insertError, insertResults) => {
                connection.release();
                if (insertError) {
                    console.error('Error inserting collection data:', insertError);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                    return;
                }

                const insertedId = insertResults.insertId;
    
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true, collectionId: insertedId }));
            });
        });
    }

    // USED TO get the data of a specific collection
    if (req.method === 'POST' && req.url === '/api/collectionData') {
        headerNotModified = false; 
        let data = '';
        
        req.on('data', chunk => {
            data += chunk;
        });

        req.on('end', () => {
            const collectionId  = JSON.parse(data);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                    return;
                }

                connection.query('SELECT plant_collections.*, clients.name as clientName FROM plant_collections JOIN clients ON clients.id = client_id WHERE collection_id = ? ', [collectionId.collectionId], (error, results) => {
                    connection.release();
                    if (error) {
                        console.error('Error querying comments:', error);
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Internal Server Error' }));
                        return;
                    }

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(results));
                });
            });
        });
    }
    
    // USED TO get all the plant collections of a user
    if (req.method === 'POST' && req.url === '/api/clientCollections') {
        headerNotModified = false; 
        let data = '';
        
        req.on('data', chunk => {
            data += chunk;
        });

        req.on('end', () => {
            const clientId  = JSON.parse(data);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                    return;
                }

                connection.query('SELECT * FROM plant_collections WHERE client_id = ?', [clientId.clientId], (error, results) => {
                    connection.release();
                    if (error) {
                        console.error('Error querying comments:', error);
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Internal Server Error' }));
                        return;
                    }

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(results));
                });
            });
        });
    }

    // USED FOR updating the user data
    if (req.method === 'POST' && req.url === '/api/updateUser') {
        headerNotModified = false; 
        let body = '';
    
        // Collect request body data
        req.on('data', (chunk) => {
            body += chunk.toString();
        });

        req.on('end', () => {
            const formData = JSON.parse(body);
        
            console.log(formData);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                    return;
                }
        
                const { name, occupation, city, street, number, facebook, github, Instagram, twitter } = formData;

                connection.query('SELECT * FROM clients_details WHERE client_id = ?', [sessionData.userId], (selectError, selectResults) => {
                    if (selectError) {
                        console.error('Error checking if user exists:', selectError);
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Internal Server Error' }));
                        connection.release();
                        return;
                    }
        
                    if (selectResults.length > 0) {
                        connection.query('UPDATE clients_details SET name = ? ,occupation = ?, city = ?, street = ?, house_number = ?, facebook_link = ?, github_link = ?, instagram_link = ?, twitter_link = ? WHERE client_id = ?', 
                                        [name, occupation, city, street, number, facebook, github, Instagram, twitter, sessionData.userId], 
                                        (updateError, updateResults) => {
                            connection.release();
                            if (updateError) {
                                console.error('Error updating user data:', updateError);
                                res.writeHead(500, { 'Content-Type': 'application/json' });
                                res.end(JSON.stringify({ error: 'Internal Server Error' }));
                                return;
                            }
                            connection.query('UPDATE clients SET name = ? WHERE id = ?', [name, sessionData.userId], (error, results) => {
                                connection.release();
                                if (error) {
                                    console.error('Error updating client name:', error);
                                    res.writeHead(500, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                                    return;
                                }
                    
                                const userData = {sessionId: sessionData.sessionId, userId: sessionData.userId, username: name, isAdmin: sessionData.isAdmin};
                                setSessionData(sessionId, userData);

                                res.writeHead(200, { 'Content-Type': 'application/json' });
                                res.end(JSON.stringify({ success: true }));
                            });
                        });
                    } else {
                        connection.query('INSERT INTO clients_details (client_id, name, occupation, city, street, house_number, facebook_link, github_link, instagram_link, twitter_link) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
                                        [sessionData.userId, name, occupation, city, street, number, facebook, github, Instagram, twitter], 
                                        (insertError, insertResults) => {
                            connection.release();
                            if (insertError) {
                                console.error('Error inserting user data:', insertError);
                                res.writeHead(500, { 'Content-Type': 'application/json' });
                                res.end(JSON.stringify({ error: 'Internal Server Error' }));
                                return;
                            }
                            connection.query('UPDATE clients SET name = ? WHERE id = ?', [name, sessionData.userId], (error, results) => {
                                connection.release();
                                if (error) {
                                    console.error('Error updating client name:', error);
                                    res.writeHead(500, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                                    return;
                                }
                    
                                const userData = {sessionId: sessionData.sessionId, userId: sessionData.userId, username: name, isAdmin: sessionData.isAdmin};
                                setSessionData(sessionId, userData);

                                res.writeHead(200, { 'Content-Type': 'application/json' });
                                res.end(JSON.stringify({ success: true }));
                            });
                        });
                    }
                });
            });
        });
        
    }

    // USED FOR getting the blog comments for a post
    if (req.method === 'POST' && req.url === '/api/blogComments') {
        headerNotModified = false; 
        let data = '';
        
        req.on('data', chunk => {
            data += chunk;
        });

        req.on('end', () => {
            const postId  = JSON.parse(data);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                    return;
                }

                connection.query('SELECT * FROM comments WHERE post_id = ?', [postId.postId], (error, results) => {
                    connection.release();
                    if (error) {
                        console.error('Error querying comments:', error);
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Internal Server Error' }));
                        return;
                    }

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(results));
                });
            });
        });
    } 

    // USED FOR ADDING COMMENTS TO POSTS
    if (req.method === 'POST' && req.url === '/api/blogComment') {
        headerNotModified = false; 
        let body = '';

        req.on('data', (chunk) => {
            body += chunk;
        });

        req.on('end', () => {
            const postData = JSON.parse(body);

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection from pool:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }
            
                connection.query('INSERT INTO comments (post_id, user_id, user_name, comment_text) VALUES (?, ?, ?, ?)',
                    [postData.postId, sessionData.userId, sessionData.username, postData.text],
                    (error, result) => {
                        if (error) {
                            console.error('Error inserting comment:', error);
                            res.writeHead(500, { 'Content-Type': 'text/plain' });
                            res.end('Internal Server Error');
                        } else {
                            const insertedId = result.insertId;

                            connection.query('SELECT * FROM comments WHERE id = ?', [insertedId], (error2, results2) => {
                                if (error2) {
                                    console.error('Error retrieving inserted comment:', error2);
                                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                                    res.end('Internal Server Error');
                                } else {
                                    const insertedComment = results2[0];
                                    console.log('Comment inserted successfully:', insertedComment);

                                    res.writeHead(200, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify(insertedComment));
                                }
                            });
                        }
                    });
                connection.release();
            });
            
            
        });
    }

    // USED FOR GETTING A SPECIFIC BLOG DATA 
    if (req.method === 'POST' && req.url === '/api/blogData') {
        headerNotModified = false; 
        let body = '';
      
        req.on('data', (chunk) => {
            body += chunk;
        });
      
        req.on('end', () => {
            try {
                const postData = JSON.parse(body);
                const postId = postData.postId;
    
                // Get a connection from the pool
                pool.getConnection((err, connection) => {
                    if (err) {
                        console.error('Error getting connection from pool:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                        return;
                    }
    
                    // Query the database for blog post data and client name
                    connection.query('SELECT b.id, b.user_id, b.title, b.description, c.name AS client_name, b.post_date FROM blog_posts b INNER JOIN clients c ON b.user_id = c.id WHERE b.id = ?', [postId], async (error, results) => {
                        if (error) {
                            console.error('Error querying blog post data:', error);
                            res.writeHead(500, { 'Content-Type': 'text/plain' });
                            res.end('Internal Server Error');
                            connection.release();
                            return;
                        }

                        if (results.length === 0) {
                            res.writeHead(404, { 'Content-Type': 'text/plain' });
                            res.end('Post Not Found');
                            connection.release();
                            return;
                        }
    
                        const postData = results[0];
    
                        // Query the database for blog post sections
                        connection.query('SELECT * FROM blog_post_sections WHERE post_id = ?', [postId], async (error1, sections) => {
                            if (error1) {
                                console.error('Error querying blog post sections:', error1);
                                res.writeHead(500, { 'Content-Type': 'text/plain' });
                                res.end('Internal Server Error');
                                connection.release();
                                return;
                            }
    
                            // Iterate over sections to fetch associated images
                            for (let i = 0; i < sections.length; i++) {
                                const section = sections[i];
                                // Query the database for images associated with this section
                                const images = await new Promise((resolve, reject) => {
                                    connection.query('SELECT image_url FROM section_images WHERE section_id = ?', [section.id], (error2, results) => {
                                        if (error2) {
                                            console.error('Error querying section images:', error2);
                                            reject(error2);
                                            return;
                                        }
                                        resolve(results.map(result => result.image_url));
                                    });
                                });
                                // Add images to the section object
                                section.images = images;
                            }
    
                            // Release the connection back to the pool
                            connection.release();
    
                            // Send the response back to the client
                            const responseData = {
                                post: postData,
                                sections: sections
                            };
                            res.writeHead(200, { 'Content-Type': 'application/json' });
                            res.end(JSON.stringify(responseData));
                        });
                    });
                });
            } catch (error) {
                console.error('Error parsing JSON:', error);
                res.writeHead(400, { 'Content-Type': 'text/plain' });
                res.end('Bad Request');
            }
        });
    }
    
    // USED FOR SAVING BLOGS
    if (req.method === 'POST' && req.url === '/saveBlogPosts') {
        headerNotModified = false;   
        let body = '';

        req.on('data', (chunk) => {
            body += chunk;
        });

        req.on('end', async () => {
            try {
                const postData = JSON.parse(body);

                const { title, description, images} = postData[0];
                let postId = await addBlogPost(title, description, sessionData.userId, sessionData.username);
                let blogDetails = true;

                postData.forEach(async (post) => {
                    const { title, description, images } = post;

                    if(blogDetails){
                        blogDetails = false;
                    }else{
                        let sectionId = await addSection(postId, title, description);
                        for (const imageUrl of images) {
                            pool.query('INSERT INTO section_images (post_id, section_id, image_url) VALUES (?, ?, ?)', [postId, sectionId, imageUrl]);
                        }
                    }                 
                });

                console.log('Blog posts saved successfully');
                res.writeHead(200, { 'Content-Type': 'text/plain' });
                res.end('Blog added succesfully');
            } catch (error) {
                console.error('Error parsing JSON:', error);
                res.writeHead(400, { 'Content-Type': 'text/plain' });
                res.end('Bad Request');
            }
        });
    }

    // USED FOR LOGGING OUT
    if(req.method === 'POST' && req.url === '/error404Return'){
        headerNotModified = false;      
        
        let isAdmin = sessionData && sessionData.isAdmin ? sessionData.isAdmin : false;

        res.writeHead(200, { 'Content-Type': 'text/plain', 'isAdmin': isAdmin });
        res.end('Error404 Back To Page');
    }

    // USED FOR LOGGING OUT
    if(req.method === 'POST' && req.url === '/logout'){
        headerNotModified = false;

        if(sessionData.isAdmin == undefined)
        sessionData.isAdmin = 'False';

        if(sessionData.isAdmin == 'True'){
            console.log(`Admin with ID ${sessionData.userId} Logged Out`);
        }else{
            console.log(`User with ID ${sessionData.userId} Logged Out`);
        }
        destroySession(sessionId);
        res.setHeader('Set-Cookie', 'sessionId=; HttpOnly; Max-Age=0');
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('Logout successful');
    }

    // USED FOR LOGGING IN(TESTING THE CREDENTIALS)
    if (req.method === 'POST' && req.url === '/testCredentials') {
        headerNotModified = false;
        let body = '';
        req.on('data', (chunk) => {
            body += chunk.toString();
        });
        req.on('end', async () => {
            try {
                console.log('Received body:', body);  // Log the raw body received
                const { Email, Password } = JSON.parse(body);
                console.log('Parsed credentials:', { Email, Password });  // Log parsed credentials
    
                pool.getConnection(async (err, connection) => {
                    if (err) {
                        console.error('Error getting connection from pool:', err);
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Internal Server Error' }));
                        return;
                    }
    
                    // First, try to find the user in the admins table
                    let query = `SELECT * FROM admins WHERE email = ?`;
                    console.log('Executing query in admins:', query, Email);  // Log the query and parameters
                    connection.query(query, [Email], async (err, results) => {
                        if (err) {
                            console.error('Error executing query in admins:', err);
                            connection.release();  // Release connection in case of query error
                            res.writeHead(500, { 'Content-Type': 'application/json' });
                            res.end(JSON.stringify({ error: 'Internal Server Error' }));
                            return;
                        }
    
                        if (results.length > 0 && await bcrypt.compare(Password, results[0].password)) {
                            console.log('Admin password match:', results[0]);  // Log successful password match
                            handleSuccessfulLogin(res, results[0], true); // Admin found and password matches
                        } else {
                            // If not found in admins, check the clients table
                            query = `SELECT * FROM clients WHERE email = ?`;
                            console.log('Executing query in clients:', query, Email);  // Log the query and parameters
                            connection.query(query, [Email], async (err, results) => {
                                connection.release();  // Ensure connection is released in case of any outcome
                                if (err) {
                                    console.error('Error executing query in clients:', err);
                                    res.writeHead(500, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                                    return;
                                }
    
                                if (results.length > 0 && await bcrypt.compare(Password, results[0].password)) {
                                    console.log('Client password match:', results[0]);  // Log successful password match
                                    handleSuccessfulLogin(res, results[0], false); // Client found and password matches
                                } else {
                                    console.log('Login failed for user:', Email);  // Log failed login attempt
                                    res.writeHead(401, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify({ message: 'Unauthorized' }));
                                }
                            });
                        }
                    });
                });
            } catch (error) {
                console.error('Error parsing JSON or handling request:', error);
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: 'Bad Request' }));
            }
        });
    }

    // USED FOR REGISTERING
    if (req.method === 'POST' && req.url === '/registerCredentials') {
        headerNotModified = false;
        let body = '';
        req.on('data', (chunk) => {
            body += chunk.toString();
        });
        req.on('end', async () => {
            try {
                const { Email, Name, Password } = JSON.parse(body);

                const hashedPassword = await bcrypt.hash(Password, 10);

                pool.getConnection((err, connection) => {
                    if (err) {
                        console.error('Error getting connection from pool:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                        return;
                    }
    
                    // Check if the email already exists
                    connection.query('SELECT * FROM clients WHERE email = ?', [Email], (err, results, fields) => {
                        if (err) {
                            console.error('Error executing query:', err);
                            res.writeHead(500, { 'Content-Type': 'text/plain' });
                            res.end('Internal Server Error');
                            connection.release();
                            return;
                        }
                        
                        if (results.length > 0) {
                            console.log('The email already exists');
                            res.writeHead(401, { 'Content-Type': 'text/plain' });
                            res.end('Unauthorized');
                            connection.release();
                            return;
                        } 

                        // Insert new user
                        connection.query('INSERT INTO clients (email, name, password) VALUES (?, ?, ?)', [Email, Name, hashedPassword], (err, results, fields) => {
                            if (err) {
                                console.error('Error executing query:', err);
                                res.writeHead(500, { 'Content-Type': 'text/plain' });
                                res.end('Internal Server Error');
                                connection.release();
                                return;
                            }

                            console.log('Inserted ID:', results.insertId); 

                            connection.query('INSERT INTO clients_details (client_id, name) VALUES (?, ?)', 
                            [results.insertId, Name], 
                            (insertError, insertResults) => {
                                connection.release();
                                if (insertError) {
                                    console.error('Error inserting user data:', insertError);
                                    res.writeHead(500, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify({ error: 'Internal Server Error' }));
                                    return;
                                }
                            });
                        
                            console.log('New user registered successfully');
                            res.writeHead(200, { 'Content-Type': 'text/plain' });
                            res.end('OK');
                        
                            connection.release();
                        });
                    });
                });
            } catch (error) {
                console.error('Error parsing JSON:', error);
                res.writeHead(400, { 'Content-Type': 'text/plain' });
                res.end('Bad Request');
            }
        });
    }

    // IF THE CLIENTS SENT A CONTACT FORM
    if (req.method === 'POST' && req.url === '/sendEmail') {
        headerNotModified = false;

        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });

        req.on('end', () => {
            const formData = JSON.parse(body);
            sendEmail(formData, (error) => {
                if (error) {
                    res.writeHead(500);
                    res.end('Error sending email');
                } else {

                    pool.getConnection((err, connection) => {
                        if (err) {
                            console.error('Error getting connection from pool:', err);
                            res.writeHead(500, { 'Content-Type': 'text/plain' });
                            res.end('Internal Server Error');
                            return;
                        }
                        
                        connection.query('INSERT INTO sentemails (account_email, sender_name, sender_email, recipient_email, subject, message) VALUES ("alexandrurosca434", ?, ?, ?, ?, ?)', [formData.nume, formData.gmail, process.env.MAILADDRESS, formData.subject, formData.message], (err, results, fields) => {
                            if (err) {
                                console.error('Error executing query:', err);
                                res.writeHead(500, { 'Content-Type': 'text/plain' });
                                res.end('Internal Server Error');
                                return;
                            }
                        
                            connection.release();
                            res.writeHead(200);
                            res.end('Email sent successfully');
                        });
                    });
                }
            });
        });
    }

    // //---------------------ADMIN----------------------------

    //USED FOR getting the clients
    if (req.method === 'GET' && pathname === '/api/clients') {
        const searchParam = query.search || '';
        let sqlQuery = 'SELECT id, name, email FROM clients WHERE 1=1';
        const queryParams = [];
    
        if (searchParam) {
            sqlQuery += ' AND email LIKE ?';
            queryParams.push(`%${searchParam}%`);
        }
    
        const attemptQuery = (attemptsLeft = 3) => {
            if (attemptsLeft === 0) {
                if (!res.headersSent) {
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Internal Server Error', details: 'Failed to connect to database after several attempts' }));
                }
                return;
            }
    
            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Failed to get connection from pool:', err);
                    attemptQuery(attemptsLeft - 1);  
                    return;
                }
    
                connection.query(sqlQuery, queryParams, (error, results) => {
                    if (error) {
                        console.error('Error fetching clients:', error);
                        connection.release();
                        if (!res.headersSent) {
                            res.writeHead(500, { 'Content-Type': 'application/json' });
                            res.end(JSON.stringify({ error: 'Internal Server Error', details: error.message }));
                        }
                        return;
                    }
    
                    connection.release();
                    
                    if (!res.headersSent) {
                        res.writeHead(200, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify(results));
                    }
                });
            });
        };
    
        attemptQuery();
    }

    // USED FOR deleting a client
    // USED FOR deleting a client by ID
    if (req.method === 'DELETE' && pathname.startsWith('/api/clients/')) {
        const clientId = pathname.split('/')[3];  // Extrage ID-ul clientului din URL
        console.log(`\nTHE CLIENT ID IS:-${clientId}-\n`)

        if (!clientId || isNaN(Number(clientId))) {
            if (!res.headersSent) {
                console.log("Sending 400 - Invalid ID");
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Invalid client ID provided' }));
            }
            return;
        }

        pool.getConnection((err, connection) => {
            if (err) {
                console.error('Failed to get connection from pool:', err);
                if (!res.headersSent) {
                    console.log("Sending 500 - DB Connection Error");
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Database connection error', details: err.message }));
                }
                return;
            }

            connection.query('DELETE FROM clients WHERE id = ?', [clientId], (error, result) => {
                if (error) {
                    console.error('Error deleting client:', error);
                    if (!res.headersSent) {
                        console.log("Sending 500 - Error on deletion");
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Internal Server Error', details: error.message }));
                    }
                } else if (result.affectedRows === 0) {
                    if (!res.headersSent) {
                        console.log("Sending 404 - Client not found");
                        res.writeHead(404, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ message: 'Client not found' }));
                    }
                } else {
                    if (!res.headersSent) {
                        console.log("Sending 200 - Client deleted");
                        res.writeHead(200, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ message: 'Client deleted successfully' }));
                    }
                }
                connection.release();
            });
        });
    }

    // if (req.method === 'DELETE' && pathname.startsWith('/api/clients')) {
    //     const clientId = pathname.split('/')[3];
    
    //     if (!clientId || isNaN(Number(clientId))) {
    //         if (!res.headersSent) {
    //             console.log("Sending 400 - Invalid ID");
    //             res.writeHead(400, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ error: 'Invalid client ID provided' }));
    //         }
    //         return;
    //     }
    
    //     pool.getConnection((err, connection) => {
    //         if (err) {
    //             console.error('Failed to get connection from pool:', err);
    //             if (!res.headersSent) {
    //                 console.log("Sending 500 - DB Connection Error");
    //                 res.writeHead(500, { 'Content-Type': 'application/json' });
    //                 res.end(JSON.stringify({ error: 'Database connection error', details: err.message }));
    //             }
    //             return;
    //         }
    
    //         connection.query('DELETE FROM clients WHERE id = ?', [clientId], (error, result) => {
    //             if (error) {
    //                 console.error('Error deleting client:', error);
    //                 if (!res.headersSent) {
    //                     console.log("Sending 500 - Error on deletion");
    //                     res.writeHead(500, { 'Content-Type': 'application/json' });
    //                     res.end(JSON.stringify({ error: 'Internal Server Error', details: error.message }));
    //                 }
    //             } else if (result.affectedRows === 0) {
    //                 if (!res.headersSent) {
    //                     console.log("Sending 404 - Client not found");
    //                     res.writeHead(404, { 'Content-Type': 'application/json' });
    //                     res.end(JSON.stringify({ message: 'Client not found' }));
    //                 }
    //             } else {
    //                 if (!res.headersSent) {
    //                     console.log("Sending 200 - Client deleted");
    //                     res.writeHead(200, { 'Content-Type': 'application/json' });
    //                     res.end(JSON.stringify({ message: 'Client deleted successfully' }));
    //                 }
    //             }
    //             connection.release();
    //         });
    //     });
    // }
    
    
    
    
    // if (req.method === 'DELETE' && pathname.startsWith('/api/clients/')) {
    //     const clientId = pathname.split('/')[3];
    
    //     if (!clientId || isNaN(Number(clientId))) {
    //         if (!res.headersSent) {
    //             res.writeHead(400, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ error: 'Invalid client ID provided' }));
    //         }
    //         return;
    //     }
    
    //     const attemptDelete = (attemptsLeft = 3) => {
    //         if (attemptsLeft === 0) {
    //             if (!res.headersSent) {
    //                 res.writeHead(500, { 'Content-Type': 'application/json' });
    //                 res.end(JSON.stringify({ error: 'Internal Server Error', details: 'Failed to delete client after several attempts' }));
    //             }
    //             return;
    //         }
    
    //         pool.getConnection((err, connection) => {
    //             if (err) {
    //                 console.error('Failed to get connection from pool:', err);
    //                 attemptDelete(attemptsLeft - 1);
    //                 return;
    //             }
    
    //             connection.query('DELETE FROM clients WHERE id = ?', [clientId], (error, result) => {
    //                 connection.release();
    //                 if (error) {
    //                     console.error('Error deleting client:', error);
    //                     if (!res.headersSent) {
    //                         res.writeHead(500, { 'Content-Type': 'application/json' });
    //                         res.end(JSON.stringify({ error: 'Internal Server Error', details: error.message }));
    //                     }
    //                     return;
    //                 }
    
    //                 if (result.affectedRows === 0) {
    //                     if (!res.headersSent) {
    //                         res.writeHead(404, { 'Content-Type': 'application/json' });
    //                         res.end(JSON.stringify({ message: 'Client not found' }));
    //                     }
    //                     return;
    //                 }
    
    //                 if (!res.headersSent) {
    //                     res.writeHead(200, { 'Content-Type': 'application/json' });
    //                     res.end(JSON.stringify({ message: 'Client deleted successfully' }));
    //                 }
    //             });
    //         });
    //     };
    
    //     attemptDelete();
    // }
    


    // if (req.method === 'DELETE' && pathname.startsWith('/api/clients/')) {
    //     const clientId = pathname.split('/')[3];

    //     // Validate the client ID
    //     if (!clientId || isNaN(Number(clientId))) {
    //         res.writeHead(400, { 'Content-Type': 'application/json' });
    //         res.end(JSON.stringify({ error: 'Invalid client ID provided' }));
    //         return;
    //     }

    //     pool.query('DELETE FROM clients WHERE id = ?', [clientId], (error, result) => {
    //         if (error) {
    //             console.error('Error deleting client:', error);
    //             res.writeHead(500, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ error: 'Internal Server Error', details: error.message }));
    //             return;
    //         }
    //         if (result.affectedRows === 0) {
    //             res.writeHead(404, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ message: 'Client not found' }));
    //             return;
    //         }

    //         res.writeHead(200, { 'Content-Type': 'application/json' });
    //         res.end(JSON.stringify({ message: 'Client deleted successfully' }));
    //     });
    // }


    // USED FOR getting the list of clients or searching clients by email
    // if (req.method === 'GET' && pathname === '/api/clients') {
    //     const searchParam = query.search || '';
    //     let sqlQuery = 'SELECT id, name, email FROM clients';
    //     const queryParams = [];

    //     if (searchParam) {
    //         sqlQuery += ' WHERE email LIKE ?';
    //         queryParams.push(`%${searchParam}%`);
    //     }

    //     pool.query(sqlQuery, queryParams, (error, results) => {
    //         if (error) {
    //             console.error('Error fetching clients:', error);
    //             res.writeHead(500, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ error: 'Internal Server Error', details: error.message }));
    //             return;
    //         }
    //         res.writeHead(200, { 'Content-Type': 'application/json' });
    //         res.end(JSON.stringify(results));
    //     });
    // }


    // USED FOR deleting a client
    // if (req.method === 'DELETE' && pathname.startsWith('/api/clients/')) {
    //     const clientId = pathname.split('/')[3];

    //     // Validate the client ID
    //     if (!clientId || isNaN(Number(clientId))) {
    //         res.writeHead(400, { 'Content-Type': 'application/json' });
    //         res.end(JSON.stringify({ error: 'Invalid client ID provided' }));
    //         return;
    //     }

    //     pool.query('DELETE FROM clients WHERE id = ?', [clientId], (error, result) => {
    //         if (error) {
    //             console.error('Error deleting client:', error);
    //             res.writeHead(500, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ error: 'Internal Server Error', details: error.message }));
    //             return;
    //         }
    //         if (result.affectedRows === 0) {
    //             res.writeHead(404, { 'Content-Type': 'application/json' });
    //             res.end(JSON.stringify({ message: 'Client not found' }));
    //             return;
    //         }

    //         res.writeHead(200, { 'Content-Type': 'application/json' });
    //         res.end(JSON.stringify({ message: 'Client deleted successfully' }));
    //     });
    // }



    // if (req.url.startsWith('/admin/') && !userIsAdmin(req)) {
    //     res.writeHead(403, { 'Content-Type': 'application/json' });
    //     res.end(JSON.stringify({ message: 'Access denied' }));
    //     return;
    // }   

    //---------------------ADMIN----------------------------

    // OTHERWISE IF IT REQUESTED AN HTML,CSS,JS OR ANYTHING ELSE


    if(headerNotModified){
        let filePath = null;

        if(req.url == '../Documentatie/Documentatie.html'){
            filePath = 'Documentatie/Documentatie.html';
        }else if(getContentType(req.url) == 'text/html'){
            filePath = './html' + req.url;
        }else if(req.url == '/'){
            filePath = './html/landingPage.html';
        }

        //If they aren't logged in they should be able to see anything but the 3 pages from the second part of the if
        if (!sessionData) {
            if(getContentType(req.url) == 'text/html' && (filePath != './html/landingPage.html' && filePath != './html/login.html' && filePath != './html/register.html'))
                filePath = './html/landingPage.html';
        }

        if(sessionData){
           if(getContentType(req.url) == 'text/html')
                if(sessionData.isAdmin == 'True' && (filePath != './html/admin.html' && filePath != './html/generateReports.html' && filePath != './html/listOfClients.html' && filePath != './html/landingPage.html' && filePath != './html/login.html' && filePath != './html/register.html'))
                    filePath = './html/error404.html';
                else if(sessionData.isAdmin == 'False' && (filePath == './html/admin.html' || filePath == './html/generateReports.html' || filePath == './html/listOfClients.html'))
                    filePath = './html/error404.html';
        }

        // if (sessionData && sessionData.isAdmin === 'True') {
        //     if (['/admin.html', '/generateReports.html', '/listOfClients.html'].indexOf(req.url) === -1) {
        //         filePath = './html/admin.html'; 
        //     }
        // } else if (!sessionData) {
        //     if(getContentType(req.url) == 'text/html' && (filePath != './html/landingPage.html' && filePath != './html/login.html' && filePath != './html/register.html'))
        //         filePath = './html/landingPage.html';
        // } else {
        //     if(sessionData.isAdmin === 'False' && (filePath == './html/admin.html' || filePath == './html/generateReports.html' || filePath == './html/listOfClients.html'))
        //         filePath = './html/error404.html';
        // }

        filePath = path.join(__dirname, '..', filePath || req.url);

        const contentType = getContentType(filePath);
        fs.readFile(filePath, (err, content) => {
            if (err) {
                if (err.code === 'ENOENT') {
                    // File not found, read the 404 error page
                    fs.readFile('./html/error404.html', (err404, content404) => {
                        if (err404) {
                            // Failed to load the error page, check if headers have already been sent
                            if (!res.headersSent) {
                                res.writeHead(500, { 'Content-Type': 'text/html' });
                                res.end("Error loading error page");
                            }
                            return;
                        }
                        // Successfully loaded the error page, check if headers have already been sent
                        if (!res.headersSent) {
                            res.writeHead(404, { 'Content-Type': 'text/html' });
                            res.end(content404, 'utf-8');
                        }
                        return;
                    });
                } else {
                    // Some other error reading the file, check if headers have already been sent
                    if (!res.headersSent) {
                        res.writeHead(500, { 'Content-Type': 'text/html' });
                        res.end(`Server Error: ${err.code}`);
                    }
                    return;
                }
            } else {
                // File successfully read, check if headers have already been sent
                if (!res.headersSent) {
                    res.writeHead(200, { 'Content-Type': contentType });
                    res.end(content, 'utf-8');
                }
                return;
            }
        });              
    }
    headerNotModified = true;
});

// WE MAKE THE SERVER LISTEN FOR REQUESTS
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}/`);
});

// WE CLOSE THE DATABASE WHEN WE CLOSE THE SERVER (Ctrl+C)
process.on('SIGINT', () => {
    console.log('Received SIGINT signal, closing database pool...');
    pool.end((err) => {
        if (err) {
            console.error('Error closing database pool:', err);
            process.exit(1);
        }
        console.log('Database pool closed.');
        process.exit(0);
    });
});

function getContentType(filePath) {
    const extname = path.extname(filePath).toLowerCase();
    switch (extname) {
        case '.html':
            return 'text/html';
        case '.css':
            return 'text/css';
        case '.js':
            return 'text/javascript';
        case '.json':
            return 'application/json';
        case '.png':
            return 'image/png';
        case '.jpg':
        case '.jpeg':
            return 'image/jpeg';
        default:
            return 'application/octet-stream';
    }
}

//Function to handle the login
function handleSuccessfulLogin(res, userData, isAdmin) {
    const sessionId = createSession();
    const cookieValue = `sessionId=${sessionId}; HttpOnly; Max-Age=${24 * 60 * 60}`;
    res.setHeader('Set-Cookie', cookieValue);
    const userDetails = {
        sessionId,
        userId: userData.id,
        username: userData.name,
        isAdmin: isAdmin ? 'True' : 'False'
    };
    setSessionData(sessionId, userDetails);
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Authenticated successfully', isAdmin: userDetails.isAdmin }));
}


// Function to create session
const createSession = () => {
    const sessionId = generateSessionId();
    sessions[sessionId] = {};
    return sessionId;
};

// Function to get session
const getSession = (sessionId) => {
    return sessions[sessionId];
};

// Function to set session data
const setSessionData = (sessionId, data) => {
    sessions[sessionId] = data;
};

// Function to destroy session
const destroySession = (sessionId) => {
    delete sessions[sessionId];
};

// Function to parse cookies from the request headers
function parseCookies(cookieHeader) {
    const cookies = {};
    if (cookieHeader) {
        cookieHeader.split(';').forEach(cookie => {
            const parts = cookie.split('=');
            cookies[parts[0].trim()] = parts[1].trim();
        });
    }
    return cookies;
}

function addBlogPost(title, description, userId, username) {
    return new Promise((resolve, reject) => {
        const currentDate = new Date().toISOString().slice(0, 10);
        pool.query('INSERT INTO blog_posts (title, description, post_date, user_id, user_name) VALUES (?, ?, ?, ?, ?)', [title, description, currentDate, userId, username], (error, results) => {
            if (error) {
                console.error('Error adding blog post:', error);
                reject(error); 
            } else {
                const postId = results.insertId; 
                console.log('Blog post added successfully. Post ID:', postId);
                resolve(postId); 
            }
        });
    });
}

function addSection(postId, title, description) {
    return new Promise((resolve, reject) => {
        const query = 'INSERT INTO blog_post_sections (post_id, title, description) VALUES (?, ?, ?)';
        pool.query(query, [postId, title, description], (error, results) => {
            if (error) {
                console.error('Error adding section:', error);
                reject(error);
            }else {
                const sectionId = results.insertId; 
                console.log('Section added successfully. Post ID:', sectionId);
                resolve(sectionId);
            }
        });
    });
}
// File: scripts/settingsJson.js
require('dotenv').config();
const fs = require('fs');

const jsonData = {
    "liveServer.settings.port": process.env.PORT,
};

fs.writeFileSync('./.vscode/settings.json', JSON.stringify(jsonData, null, 2));

console.log(jsonData);
// File: css/about.css
main{
	width: 100%;
	display: flex;
	flex-direction: column;
	align-items: center;
	margin-top: 30px;
}

.desc{
	color:black;
	font-size: 1.5em;
	text-align: center;
}

#homeTitle{
	width: 90%;
	background-color: #a0e090a2;
	font-size: 70px;
	z-index:1;
	text-align: center;
	border-radius: 32px 32px 0px 0px;
	padding: 20px 0px 10px 0px;
	box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
	text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); 
}

.about-main {
    width: 90%;
    display: flex;
	flex-wrap: wrap;
    justify-content:space-evenly;
	background-color: #a0e090a2;
	padding: 20px 30px 20px 30px;
	border-radius: 0px 0px 32px 32px;
	box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

.fact-item {
    display: flex;
    flex-basis: calc(33.333% - 20px); 
    background-size: cover;
    background-position: center;
    margin: 10px;
    align-items: center; 
    justify-content: center; 
    color: white; 
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); 
    border-radius: 10px; 
}

.fact-description {
    background: rgba(0, 0, 0, 0.5); 
    padding: 10px 20px; 
    border-radius: 5px; 
    text-align: center;
    max-width: 80%; 
}

* {
	box-sizing: border-box;
}

.body-extension {
	gap: 2rem;
	justify-content: center;
}

img {
	display: block;
	width: 100%;
}

h2 {
	margin: 0;
	font-size: 1.4rem;
}

@media (min-width: 50em) {
	h2 {
		font-size: 1.8rem;
	}
}

.cta {
	--shadowColor: 187 60% 40%;
	display: flex;
	flex-wrap: wrap;
	background: hsl(187 70% 85%);
	max-width: 50rem;
	width: 33%;
	box-shadow: 0.65rem 0.65rem 0 hsl(var(--shadowColor) / 1);
	border-radius: 0.8rem;
	overflow: hidden;
	border: 0.5rem solid;
	margin-bottom: 20px;
}

.cta img {
	aspect-ratio: 3 / 2;
	object-fit: cover;
	flex: 1 1 300px;
	outline: 0.5rem solid;
}

.cta__text-column {
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: min(2rem, 5vw) min(2rem, 5vw) min(2.5rem, 5vw);
	flex: 1 0 50%;
}

.cta__text-column a{
	text-align: center;
	width:50%;
}

.cta__text-column a:hover{
	background: hsl(128, 63%, 43%);
	box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

.cta__text-column > * + * {
	margin: min(1.5rem, 2.5vw) 0 0 0;
}

.cta a {
	display: inline-block;
	color: black;
	padding: 0.5rem 1rem;
	text-decoration: none;
	background: hsl(187, 75%, 64%);
	border-radius: 0.6rem;
	font-weight: 700;
	border: 0.2rem solid;
	font-size: 20px;
}

@media screen and (max-width: 1300px) {
    .about-main{
		width: 700px;
		flex-direction: column;
		flex-wrap: nowrap;
		align-items: center;
	}
	.cta{
		width: 85%;
		margin-top: 30px;
		margin-bottom: 10px;
	}
	.cta:last-child{
		margin-bottom: 30px;
	}
	#homeTitle{
		width:700px;
		font-size: 60px;
	}
}

@media screen and (max-width: 700px) {
    .about-main{
		width: 95%;
		flex-direction: column;
		flex-wrap: nowrap;
		align-items: center;
		padding: 10px;
	}
	.cta{
		width: 95%;
		margin-top: 30px;
		margin-left: 0px;
		margin-right: 0px;
	}
	#homeTitle{
		width:95%;
		font-size: 35px;
		padding: 15px;
	}
	main{
		margin-top: 10px;
	}
}

// File: css/aboutUsCards.css
.card h1 {
	font-size:  max(10pt, 5.25vmin);
	text-align: center;
	color: #A8CD9F;
}
.card p {
	font-size: max(10pt, 2.5vmin);
	line-height: 1.4;
	color: #0e390e;
	margin-bottom: 1.5rem;
}

.wrap ::-webkit-scrollbar{
    width: 7px;
}

.wrap ::-webkit-scrollbar-track-piece{
    background: #58A399;
}

.wrap ::-webkit-scrollbar-thumb{
   background-color: rgb(160, 224, 144);
}

.wrap ::-webkit-scrollbar-thumb:hover{
	background-color: rgb(49, 100, 36);
}

.wrap {
	display: flex;
	flex-wrap: nowrap;
	justify-content: space-between;
	width: 85vmin;
	height: 50vmin;
	margin: 2rem 3rem auto;
	border: 4px solid;
	border-radius: 2%;
	border-image: linear-gradient(
			-50deg,
			rgba(38, 49, 148, 0.541),
			#58A399,
			#496989,
			#58A399,
			#496989
		)
		1;
	transition: 0.3s ease-in-out;
	position: relative;
	overflow: hidden;
}

#whoAreWe{
	height: 65vmin;
}

.overlay {
	position: relative;
	display: flex;
	width: 100%;
	height: 100%;
	padding: 1rem 0.75rem;
	background: #496989;
	transition: 0.4s ease-in-out;
	z-index: 1;
}
.overlay-content {
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	width: 15vmin;
	height: 100%;
	padding: 0.5rem 0 0 0.5rem;
	border: 3px solid;
	border-image: linear-gradient(
			to bottom,
			#A8CD9F,
			#58A399,
			#A8CD9F
		)
		0 0 0 100%;
	transition: 0.3s ease-in-out 0.2s;
	z-index: 1;
}
.image-content {
	position: absolute;
	top: 0;
	right: 0;
	width: 60vmin;
	height: 100%;
	background-size: cover;
	transition: 0.3s ease-in-out;
}

#card1{
	background-image: url("../images/background/card1");
}

#card2{
	background-image: url("../images/background/card2.jpg");
}

#card3{
	background-image: url("../images/background/card3.jpg");
}


.inset {
	max-width: 50%;
	margin: 0.25em 1em 1em 0;
	border-radius: 0.25em;
	float: left;
	background-color: rgb(230, 229, 229);
	border: solid #58A399 2px;
}

.dots {
	position: absolute;
	bottom: 1rem;
	right: 2rem;
	display: flex;
	flex-direction: row;
	justify-content: space-around;
	align-items: center;
	width: 55px;
	height: 4vmin;
	transition: 0.3s ease-in-out 0.3s;
}
.dot {
	width: 14px;
	height: 14px;
	background: indigo;
	border: 1px solid indigo;
	border-radius: 50%;
	transition: 0.3s ease-in-out 0.3s;
}

.text {
	position: absolute;
	top: 0;
	right: 0;
	width: 60vmin;
	height: 100%;
	padding: 3vmin 4vmin;
	background: #fff;
	box-shadow: inset 1px 1px 15px 0 rgba(0 0 0 / 0.4);
	overflow-y: scroll;
}

.wrap:hover .overlay {
	transform: translateX(-60vmin);
}
.wrap:hover .image-content {
	width: 30vmin;
}
.wrap:hover .overlay-content {
	border: none;
	transition-delay: 0.2s;
	transform: translateX(60vmin);
}
.wrap:hover .dots {
	transform: translateX(1rem);
}
.wrap:hover .dots .dot {
	background: white;
}

.wrap:hover h1 {
    display: none;
}

.smallTitle{
	color: #A8CD9F;
	margin-bottom: 2rem;
}

.wrap:hover .smallTitle{
	display: none;
}

#colorGreen{
	color: #A8CD9F;
}

/* Animations and timing delays */
.animate {
	animation-duration: 0.7s;
	animation-timing-function: cubic-bezier(0.26, 0.53, 0.74, 1.48);
	animation-fill-mode: backwards;
}
/* Pop In */
.pop {
	animation-name: pop;
}
@keyframes pop {
	0% {
		opacity: 0;
		transform: scale(0.5, 0.5);
	}
	100% {
		opacity: 1;
		transform: scale(1, 1);
	}
}

/* Slide In */
.slide {
	animation-name: slide;
}
@keyframes slide {
	0% {
		opacity: 0;
		transform: translate(4em, 0);
	}
	100% {
		opacity: 1;
		transform: translate(0, 0);
	}
}

/* Slide Left */
.slide-left {
	animation-name: slide-left;
}
@keyframes slide-left {
	0% {
		opacity: 0;
		transform: translate(-40px, 0);
	}
	100% {
		opacity: 1;
		transform: translate(0, 0);
	}
}

.slide-up {
	animation-name: slide-up;
}
@keyframes slide-up {
	0% {
		opacity: 0;
		transform: translateY(3em);
	}
	100% {
		opacity: 1;
		transform: translateY(0);
	}
}

.delay-1 {
	animation-delay: 0.3s;
}
.delay-2 {
	animation-delay: 0.6s;
}
.delay-3 {
	animation-delay: 0.9s;
}
.delay-4 {
	animation-delay: 1.2s;
}
.delay-5 {
	animation-delay: 1.5s;
}
.delay-6 {
	animation-delay: 1.8s;
}
.delay-7 {
	animation-delay: 2.1s;
}
.delay-8 {
	animation-delay: 2.4s;
}

// File: css/admin.css

/* Reset default margin and padding */
body, h1, p {
    margin: 0;
    padding: 0;
}

/* Apply flexbox layout to the main container */
main {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    height: 100vh;
}

#adminPanel{
    margin-top: 20px;
    background-image: linear-gradient(#a0e0908c, #e2f4c57c, #a0e09080);
    padding: 30px 20px 40px 20px;
    border-radius: 32px;
    border: 1px black solid;
    box-shadow: 0 0 20px rgba(0, 0, 0, 1); 

    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

#controlPanel{
    font-size: 50px;
    margin-bottom: 10px;
    font-weight: bold;
}

#panelLine{
    width: 60%;
    height: 2px;
    background-color: black;
    margin-bottom: 30px;
}

section {
    text-align: center;
    background-color: #ffffff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); 
    border: 2px solid #e0e0e0; 
    max-width: 600px; 
}

section:hover {
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.3); 
    background-color: #dfe6df;
}

section p{
    font-size: 20px;
}

section:not(:last-child){
    margin-bottom: 40px;
}


@media screen and (max-width: 768px) {

    #adminPanel{
        width: 85%; 
    }
    section {
        width: 80%; 
    }
}

header {
    background-color: #496989cb;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    border-bottom: 1px solid black;
}

header p{
    font-weight: bold;
    font-size: max(4vmin, 15px);
    margin: 8px 10px;
}

@media (max-width: 600px) {
    header p {
        font-size: 35px;
        margin: 8px 10px;
    }

}
// File: css/blog.css
main{
    display: flex;
    justify-content: center;
}

.container{
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    width:50%;
    margin-top: 50px;
    background-color: rgba(255, 255, 255, 0.733);
    border-radius: 32px;
    border: 2px solid black;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

.container p{
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    color:black;
    font-size: 25px;
}

.blog-post{
    display: flex;
    flex-direction: column;
    width:80%;
    background-color: #58a399ab;
    margin-bottom: 20px;
    border-radius: 32px;
    padding:20px 30px 20px 30px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

.blog-post p{
    text-align: center;
}

.blog-post h2{
    font-size: 30px;
    text-align: center;
    margin-bottom: 10px;
}

.image{
    margin-top: 20px;
    display: flex;
    justify-content: space-evenly;
}

.image img{
    margin-top: 10px;
    margin-bottom: 10px;
    border-radius: 32px;
    margin-left:5px;
    margin-right:5px;
    border: 1px solid #E2F4C5;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

.item{
    margin-top: 10px;
}

#AddNew{
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    display: flex;
    align-items: center;
    margin-top: 30px;
    display: flex;
    flex-direction: column;
    background-color: #58a399ab;
    margin-bottom: 20px;
    border-radius: 32px;
    padding:20px 30px 20px 30px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    transition: background-color 0.3s;
}

a{
    color: inherit;
    text-decoration: none;
}

#AddNew:hover{
    background-color: #458b82;
}

#bestImage{
    width:400px;
}

#titleHowToPress{
    font-size: 30px;
    font-weight: bold;
    text-align: center;
    width:80%;
    padding: 30px 20px 20px 20px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

#titleHowToPress #signature{
    float:right;
}

#titleHowToPress #date{
    float:left;
}


@media (max-width: 1140px) {
    .image{
        flex-direction: column;
        align-items: center;
    }
    #titleHowToPress #signature{
        float:none;
    }
    #titleHowToPress #date{
        float:none;
    }
    .container{
        width: 600px;
    }
}

@media (max-width: 550px) {
    .image{
        flex-direction: column;
        align-items: center;
    }
    #titleHowToPress #signature{
        float:none;
    }
    .container{
        width: 95%;
    }
    #bestImage{
        width:260px;
    }
    h1{
        font-size: 50px;
    }
}


.f-wrapper--1 {
    top: 97.9%;
    left: 90vw;
}

.f-wrapper--2 {
    top: 97.9%;
    left: 5vw;
}

.f-wrapper--3 {
    top: 90px;
    left: 98vw;
}
  
.f-wrapper--3 .f{
    transform: translate(-350%,-50%) rotate(-160deg);
}

.f-wrapper--2 {
    left: 10vw;
}

.f-wrapper--2 .f{
    transform: translate(-350%,-50%) rotate(-340deg);
}

#back{
    width: 100px;
    height: 100px;
    background-color: red;
}
// File: css/blogList.css
.blog-post:hover{
    background-color: #58a399f8;
    box-shadow: 0px 0px 40px rgba(0, 0, 0, 1);
}


.f-wrapper--2 .flower__leaf--1 {
    background-color: #ff8a65; /* New color */
}

.f-wrapper--2 .f .flower__leaf--8 {
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #fcbf49, #fc1a1a); /* New gradient colors */
}

.f-wrapper--2 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #ff8a65, #ffcd3c, #a8ff78 99%); /* New gradient colors */
}

.f-wrapper--3 .flower__leaf--1 {
    background-color: #c4fb6d; /* New color */
}

.f-wrapper--3 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #ff68ff, #7d00ff); /* New gradient colors */
}

.f-wrapper--3 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #ff6b6b, #f3c623, #ffaa00 99%); /* New gradient colors */
}

.f-wrapper--1 .flower__leaf--1 {
    background-color: #9cd9fb; /* New color */
}

.f-wrapper--1 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #ff68ff, #7d00ff); /* New gradient colors */
}

.f-wrapper--1 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #ff6b6b, #f3c623, #ffaa00 99%); /* New gradient colors */
}


.f-wrapper--2 {
    top: 90px;
    left: 10vw;
}

.f-wrapper--3 {
    top: 90px;
    left: 98vw;
}
  
.f-wrapper--2 .f{
    transform: translate(-350%,-50%) rotate(160deg);
}

.textInput{
    font-family: 'Dancing Script', sans-serif;
    font-weight: bold;
    font-size: 20px;
    color: black;
    width: 30%;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5%;
    border: 1px solid black;
    text-align: center;
}

.textInput:focus{
    background-color: rgb(219, 217, 217);
    border: 1px solid #496989cb;
}

.textInput::placeholder{
    color: black;
}

.textInput:not(:last-child){
    margin-left: 4px;
    margin-right: 4px;
}

@media screen and (max-width: 1630px) {
    .textInput{
        min-width: 300px;
    }
    #searchBar{
        flex-direction: column;
    }
}

#textInput::placeholder{
    color: black;
}

#searchBar{
    margin-bottom: 10px;
    display: flex;
    justify-content: space-evenly;
}
// File: css/blogPage.css
main{
    display: flex;
    flex-direction: column;
    align-items: center;
}

#interactivity{
    display: flex;
    width:50%;
    justify-content: space-evenly;
}

#Delete{
    margin-left: 20px;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    display: flex;
    align-items: center;
    margin-top: 30px;
    flex-direction: column;
    background-color: #58a399ab;
    margin-bottom: 20px;
    border-radius: 32px;
    padding:20px 30px 20px 30px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    transition: background-color 0.3s;
}

#Delete:hover{
    background-color: #458b82;
}



#comments{
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    width:50%;
    margin-top: 30px;
    background-color: rgba(255, 255, 255, 0.733);
    border-radius: 16px;
    border: 2px solid black;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

#comments p{
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    color:black;
    font-size: 25px;
}

@media (max-width: 1140px) {
    #comments{
        width: 600px;
    }
}

@media (max-width: 550px) {
    #comments{
        width: 95%;
    }
}

#comments h1 {
    margin-top: 15px;
    margin-bottom: 10px;
}

.comment {
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.6);
    border: 1px solid #458b82;
    position: relative;
    background-color: #58a399ab;
    border-radius: 16px;
    border-bottom: 1px solid #ccc;
    padding: 10px 5px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-top: 10px;
    width: 70%;
}

.comment:last-child{
    margin-bottom: 10px;
}

.user {
    font-weight: bold;
    margin-right: 10px;
    font-size: 25px;
    margin-left: 10px;
}

.content {
    font-size: 20px;
    margin-top: 5px;
    margin-left: 10px;
}

.time{
    margin-left: 4px;
    margin-top: 7px;
    font-weight: bold;
}

.nameDate{
    display: flex;
    flex-direction: row;
}

.deleteComment{
    position: absolute;
    right:10px;
    border-radius: 360px;
}

.deleteComment:hover{
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    background-color: #458b82;
}



.comment-box {
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    margin-top: 20px;
    padding: 10px;
    border-radius: 5px;
    width: 70%;
    background-color: #58a399ab;
    margin-bottom: 20px;
}

.comment-input {
    font-family: 'Dancing Script', sans-serif;
    width: 100%;
    padding: 5px;
    margin-bottom: 10px;
    box-sizing: border-box;
    resize: none;
    font-size: 20px;
    color:black;
    font-weight: bold;
    border-radius: 10px;
}

.comment-input::placeholder{
    color:black;
}

.add-comment-btn {
    font-size: 20px;
    font-family: 'Dancing Script', sans-serif;
    background-color: #44b3a480;
    color: black;
    padding: 10px 20px;
    border: 1px solid #458b82c9;
    border-radius: 16px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.5);
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    transition: background-color 0.3s;
}

.add-comment-btn:hover {
    background-color: #458b82;
}

// File: css/blogPageFlower.css
.f-wrapper--1 {
    transform: translate(0px, -24px);
    left: 90%;
}

.f-wrapper--2 {
    transform: translate(0px, -24px);
    left:9%;
}
// File: css/cards.css
/*         ↓↓↓          MAIN          ↓↓↓         */

main {
    flex: 1;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    height: 100vh;
}

.rectangle {
    width: 700px;
    height: 400px;
    background-color: #58a399c2; 
    margin: 50px 20px 0px 20px;
    border-radius: 10%;
    border : solid 2px #E2F4C5;
}


/*         ↑↑↑          MAIN          ↑↑↑         */
// File: css/collection-list.css
button {
    border: none;
    outline: 0;
    display: inline-block;
    padding: 8px;
    color: white;
    background-color: #000;
    text-align: center;
    cursor: pointer;
    width: 100%;
    font-size: 18px;
}

main{
    display: flex;
    flex-direction: column;
    align-items: center;
}

#container{
    margin-top: 30px;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.63);
    width: 1000px;
    border-radius: 22px;
    border: 2px solid black;
    box-shadow: 0px 0px 20px rgba(0,0,0,1);
}

.no-collections-message {
    margin-top: 20px;
    margin-bottom: 20px;
    display: none; 
    font-size: 2rem;
    color: #333;
    padding: 20px;
    background-color: #4CAF50;
    border-radius: 32px;
    border: 2px solid white;
    box-shadow: 0 0px 20px rgba(0, 0, 0, 1);
}

button:hover, a:hover {
    opacity: 0.7;
} 

.format-btn {
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    font-family: 'Dancing Script', sans-serif;
    margin: 10px 10px;
    width:150px;
    line-height: 1.5;
    font-size: 20px;
    border-radius: 10px;
    background-color:rgb(18, 92, 42) ;
    box-shadow: 0px 0px 20px rgb(18, 92, 42);
}

.button-div { 
    display: flex;
}

.main-body {
    padding: 15px;
}

.collections-container {
    text-align: center; 
    margin: 20px 0; 
}

#circleAvatar{
    border: 5px solid rgb(11, 56, 25);
    box-shadow: 0px 0px 20px rgba(0,0,0,1);
    border-radius: 360px;
    overflow: hidden;
    height: 150px;
    width: 150px;
    margin-right: 30px;
}

#circleData{
    display: flex;
    flex-direction: column;
    align-items: center;
}

.collections-card {
    margin-top: 20px;
    display: flex;
    flex-direction: column;

    justify-content: center;

    box-shadow: 0 0px 20px rgba(0,0,0,1);
    background-color: #a0e090b9;
    
    border-radius: 32px;

    padding: 1rem;
    text-align: center;
    
    width: 95%; 
}

.collections-card:last-child {
    margin-bottom: 20px;
}

#socialLinks{
    border-radius: 0px 0px 32px 32px;
    margin-top: 0px;
}

#data{
    border-radius: 32px 32px 0px 0px;
}

#profileInfo{
    display: flex;
    flex-direction: row;
    align-items: center;
}

.collections-title {
    margin-top: 10px;
    margin-bottom: 10px; 
    width: 100%;

    font-size: 50px;
    font-weight: bold;
}

.collection-particularity {
    flex-direction: column;
}

.collections {
    display: flex;
    flex-wrap: wrap;
    justify-content: center; 
    align-items: center;
    gap: 10px;
    padding: 0%;
}

.collection-button {
    width: calc(33.333% - 20px); 
    margin: 10px; 
}

.collection-button button {
    width: 100%; 
    padding: 10px 15px; 
    font-size: 16px; 
    font-weight: bold; 
    color: white; 
    background-color: #4CAF50; 
    border: none;
    border-radius: 5px; 
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); 
    cursor: pointer; 
    transition: background-color 0.3s ease; 
    margin: 5px;
}

.collection-button button:hover {
    background-color: #367c39; 
}

/* Links */

#links{
    display: flex;
    justify-content: space-evenly;
}

.socialMediaIcon2{
    background-color: transparent;
    opacity: 0.5; 

    width:50px;

    transition: opacity 0.3s ease;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
}

.line{
    height:3px;
    width: 90%;
    background-color: black;
}

.socialMediaIcon2:hover{
    opacity: 100%;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    padding: 5px;
    border-radius: 360px;
    box-shadow: 0px 0px 20px rgba(0,0,0,1);
}

.friend{
    border:5px solid black;
    border-radius: 360px;
    margin-left: 2px;
    margin-right: 2px;
}

.friend:hover{
    opacity: 0.9;
    box-shadow: 0px 0px 20px rgba(0,0,0,1);
}

@media (max-width: 1010px) {
    #container{
        width: 90%;
    }
}

@media (max-width: 670px) {
    #container{
        width: 95%;
    }
    #profileInfo{
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    #circleAvatar{
        position: relative;
        left:15px;
    }
    .collections-card{
        width: 90%;
    }
}

#addPlantButton:hover {
    opacity: 0.9; 
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

#addPlantButton {
    position: fixed;
    right: 20px;
    top: 120px;
    z-index: 1;
}

.floating-button {
    background-color: #4caf50;
    border-radius: 50%; 
    width: 60px; 
    height: 60px; 
    font-size: 36px; 
    line-height: 40px; 
    text-align: center; 
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); 
    cursor: pointer;
    z-index: 1000; 
}

.floating-button:hover {
    background-color: #66bb6a; 
}




/* Hidden by default */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;

    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    justify-content: center;

    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(3px); 

  }
  
  /* Modal content */
  .modal-content {
    background-color: white;   /*#a0e090b9*/

    padding: 20px 20px 0px 20px;
    width: 570px;
    height: 510px;
    border-radius: 20px;
    border : 2px solid black;
    box-shadow: 0px 0px 20px rgba(0,0,0,1);
    margin-top: 300px;
  }

  form{
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  input{
    width: 60%;
    box-shadow: 0px 0px 20px rgba(0,0,0,0.4);
    border-radius: 10px;
    text-align: center;
    margin-top: 10px;
    font-size: 23px;
    font-weight: bold;
    font-family: 'Dancing Script', sans-serif;
  }

  #updateDataButton{
    box-shadow: 0px 0px 20px rgba(0,0,0,0.4);
    border-radius: 10px;
    font-family: 'Dancing Script', sans-serif;
    margin-top: 10px;
    background-color: rgb(18, 92, 42);
    width: 60%;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    font-size: 28px;
  }

  input::placeholder{
    color:#b4b0ff;
    padding: 5px;
  }
  
  /* Close button */
  .close {
    color: #aaa;
    float: right;
    font-size: 60px;
    font-weight: bold;
    transform: translate(0px,-30px);
  }
  
  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
  }

  .collectionClose{
    display: none;
    transform: translate(+100px, -20px);
    float: right;
    opacity: 0;
    font-size: 60px;
    font-weight: bold;
    color: black;
  }

  #updateTitle{
    font-size: 28px;
    font-weight: bold;
  }

  #updateLine{
    margin-top: 5px;
    width: 60%;
    height: 2px;
    background-color: #000;
  }

  @media (max-width: 670px) {
    input{
        width: 80%;
    }
    .modal-content {
    width:90%;
    }

}
// File: css/collection.css

.no-collections-message {
    display: none; 
    font-size: 2rem;
    color: #333;
    margin: 0;
    padding: 20px;
    background-color: #4CAF50;
    border-radius: 32px;
    border: 2px solid white;
    box-shadow: 0 0px 20px rgba(0, 0, 0, 1);
}

/*------------*/

#cont{
    display: flex;
    flex-direction: column;
    width:900px;
}

#title{ 
    border: 1px solid black;
    font-size: 50px;
    border-radius: 32px 32px 0px 0px;
    background-color: #a0e090b9;
    margin-top: 30px;
    justify-content: center;
    text-align: center;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    padding: 20px 0px 20px 0px;
}

#line{
    margin-top: 10px;
    margin-bottom: 5px;
    height: 2px;
    width: 70%;
    background-color: black;
}

#descripton{
    display: flex;
    flex-direction: column;
    align-items: center;
    border: 1px solid black;
    font-size: 30px;
    background-color: #a0e090b9;
    justify-content: center;
    text-align: center;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    padding: 20px 0px 30px 0px;
}

.container {
    border: 1px solid black;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    border-radius: 0px 0px 32px 32px;
    background-color: #a0e090b9;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    width: 100%; 
    max-width: 1200px;
    text-align: center;
    margin-bottom: 20px;
    min-height: calc(100vh - 150px);
}

#addPlantButton:hover {
    opacity: 0.9; 
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
}

#addPlantButton {
    position: fixed;
    right: 20px;
    top: 120px;
    z-index: 1;
}

#noCollectionsMsg {
    font-size: 2rem; 
    font-weight: bold; 
    color: #333; 
    text-align: center; 
    display: none; 
}

.floating-button {
    position: fixed;
    right: 20px;
    bottom: 20px;
    background-color: #4caf50;
    color: white;
    border-radius: 50%; 
    width: 60px; 
    height: 60px; 
    font-size: 36px; 
    line-height: 60px; 
    text-align: center; 
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); 
    border: none;
    outline: none;
    z-index: 1000; 
}

.floating-button:hover {
    background-color: #66bb6a; 
}


@media (max-width: 1000px) {
    #cont{
        width:700px;
    }
}

@media (max-width: 750px) {
    #cont{
        width:95%;
    }
}

.format-btn {
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    font-family: 'Dancing Script', sans-serif;
    margin: 10px 10px;
    width:170px;
    line-height: 1.5;
    background-color:rgb(18, 92, 42) ;
    color:white;
    box-shadow: 0px 0px 20px rgb(18, 92, 42);
    padding: 10px;
    font-size: 25px;
    border-radius: 16px;
    transition: all 0.3s;
}

.format-btn:hover{
    background-color:rgb(6, 58, 22);
    color:rgb(209, 204, 204);
}

#collectionButtons{
    background-color: #a0e090b9; 
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    border: 1px solid black;
    display: flex;
    justify-content: space-evenly;
}

/* Hidden by default */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;

    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    justify-content: center;

    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(3px); 

  }
  

/* Hidden by default */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;

    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    justify-content: center;

    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(3px); 

  }
  
  /* Modal content */
  .modal-content {
    background-color: white;   /*#a0e090b9*/

    padding: 20px 20px 0px 20px;
    width: 570px;
    height: 300px;
    border-radius: 20px;
    border : 2px solid black;
    box-shadow: 0px 0px 20px rgba(0,0,0,1);
    margin-top: 300px;
  }

  form{
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  input{
    width: 60%;
    box-shadow: 0px 0px 20px rgba(0,0,0,0.4);
    border-radius: 10px;
    text-align: center;
    margin-top: 10px;
    font-size: 23px;
    font-weight: bold;
    font-family: 'Dancing Script', sans-serif;
  }

  #updateDataButton{
    box-shadow: 0px 0px 20px rgba(0,0,0,0.4);
    border-radius: 10px;
    font-family: 'Dancing Script', sans-serif;
    margin-top: 10px;
    background-color: rgb(18, 92, 42);
    width: 60%;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    font-size: 28px;
    color: white;
  }

  input::placeholder{
    color:#b4b0ff;
    padding: 5px;
  }
  
  label{
    color:#b4b0ff;
    padding: 5px;
    font-size: 22px;
  }

  input[type="checkbox"] {
    appearance: none;
    box-shadow: 0 0px 20px rgba(0, 0, 0, 0.5);
    -webkit-appearance: none;
    -moz-appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid #ccc;
    border-radius: 3px;
    outline: none;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
    transform: translate(0px,-10px);
}

/* Style the custom checkbox when checked */
input[type="checkbox"]:checked {
    background-color: rgb(18, 92, 42);
    border-color: rgb(18, 92, 42);
}

/* Style the custom checkbox label */
input[type="checkbox"] + label {
    font-weight: normal;
}

/* Style the custom checkbox label when checked */
input[type="checkbox"]:checked + label {
    color: rgb(18, 92, 42);
}

  /* Close button */
  .close {
    color: #aaa;
    float: right;
    font-size: 60px;
    font-weight: bold;
    transform: translate(0px,-30px);
  }
  
  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
  }

  .collectionClose{
    display: none;
    transform: translate(+100px, -20px);
    float: right;
    opacity: 0;
    font-size: 60px;
    font-weight: bold;
    color: black;
  }

  #updateTitle{
    font-size: 28px;
    font-weight: bold;
  }

  #updateLine{
    width: 60%;
    height: 2px;
    background-color: #000;
    margin-top: 10px;
    margin-bottom: 10px;
  }

  #updateLine1{
    width: 60%;
    height: 2px;
    background-color: #000;
    margin-top: 15px;
  }

  @media (max-width: 670px) {
    input{
        width: 80%;
    }
    .modal-content {
    width:90%;
    }
    #updateTitle{
        font-size: 24px;
    }
    }

    .smallDetails{
      font-size: 20px;
      font-weight: bold;
    }

    #left{
      float:left;
      margin-left: 60px;
      transform: translate(0px,11px);
    }

    #right{
      float:right;
      margin-right: 60px;
    }

    #descriptionText{
      padding: 0px 10px 0px 10px;
    }


    @media (max-width: 720px) {
      #right{
          float:none;
          margin-right: 0px;
      }
      #left{
        margin-left: 0px;
        transform: translate(0px,0px);
        float:none;
      }
  }

  @media (max-width: 540px) {
    #descripton{
      font-size: 25px;
    }
    .format-btn {
      margin: 10px 10px;
      width:150px;
      font-size: 20px;
    }
    .no-collections-message{
      font-size: 25px;
    } 

}
// File: css/contact.css
@import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);

#container{
    font-family: 'Montserrat', Arial, sans-serif;
}

#container h1 {
    color: #cac7ff;
    font-size: 32px;
    font-weight: 700;
    letter-spacing: 7px;
    text-align: center;
    text-transform: uppercase;
    margin-top: 50px;
    margin-bottom: 20px;
}

button {
  overflow: visible;
}

button, select {
  text-transform: none;
}

button, input, select, textarea {
  color: #5A5A5A;
  font: inherit;
  margin: 0;
}

#subject_input {
    color: #cac7ff
}
  
#subject_input option {
    color: rgb(51, 38, 38);
    background-color: #5b7792;
}

input {
  line-height: normal;
}

textarea {
  overflow: auto;
}

#container {
  border: solid 3px #474544;
  max-width: 768px;
  margin: 60px auto;
  position: relative;
  background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);
  border-radius: 6%;
  border: #E2F4C5 2px solid;
  opacity: 90%;
}

#contact_form {
  padding: 23px;
  margin: 10px 0;
}

.underline {
  border-bottom: solid 2px #cac7ff;
  margin: -0.512em auto;
  width: 100px;
}

.icon_wrapper {
  margin: 50px auto 0;
  width: 100%;
}

.icon {
  display: block;
  fill: #cac7ff;
  height: 50px;
  margin: 0 auto;
  width: 50px;
}

.email {
   width: 100%;
}

#email_input:not(:focus){
    background-color: transparent;
}

#contact_form input[type='text'],[type='email'], select, textarea {
	background: none;
    border: none;
	border-bottom: solid 2px black;
	color: #cac7ff;
	font-size: 1.000em;
    font-weight: 400;
    letter-spacing: 1px;
	margin: 0em 0 1.875em 0;
	padding: 0 0 0.875em 0;
    text-transform: uppercase;
	width: 100%;
    -webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	-ms-box-sizing: border-box;
	-o-box-sizing: border-box;
	box-sizing: border-box;
	transition: all 0.3s;
}

#contact_form #das {
  text-transform: none;
}

input[type='text']:focus, [type='email']:focus, textarea:focus {
	outline: none;
}

.message {
	float: none;
}

#name {
	float: left;
	width: 45%;
}

select {
  background: url('https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-ios7-arrow-down-32.png') no-repeat right;
  outline: none;
  appearance: none;
}

select::-ms-expand {
  display: none;
}

.subject {
  width: 100%;
}

.telephone {
  float: right;
  width: 45%;
}

textarea {
    line-height: 150%;
    height: 100px;
    resize: none;
    width: 100%;
}

#form_button {
  background: none;
  border: solid 2px #cac7ff;
  border-radius: 10%;
  color: #cac7ff;
  cursor: pointer;
  font-size: 0.875em;
  font-weight: bold;
  outline: none;
  padding: 19px 35px;
  text-transform: uppercase;
  transition: all 0.3s;
  position: relative;
  left:50%;
  transform: translate(-55%, 0%);
}

#form_button:hover {
  background: #cac7ff;
  color: #496989;
} 

@media screen and (max-width: 768px) {
    #container {
      margin: 20px auto;
      width: 95%;
    }
  }
  
  @media screen and (max-width: 480px) {
    #container h1 {
      font-size: 26px;
    }
    
    .underline {
      width: 68px;
    }
    
    #form_button {
      padding: 15px 25px;
    }
  }

  @media screen and (max-width: 600px) {
    #container{
        margin-top: 75px;
    }
  }

  
  @media screen and (max-width: 420px) {
    #container h1 {
      font-size: 18px;
    }
    
    .icon {
      height: 35px;
      width: 35px;
    }
    
    .underline {
      width: 53px;
    }
    
    #contact_form input[type='text'], [type='email'], select, textarea {
      font-size: 0.875em;
    }
  }

footer {
    margin-top: 0px;
}


.f-wrapper--3 {
  top: 9%;
  left: 96%;
}

.f-wrapper--3 .f{
  transform: translate(-350%,-50%) rotate(-160deg);
}
// File: css/createNewBlog.css
#Save{
    display: flex;
    align-items: center;
    display: flex;
    flex-direction: column;
    background-color: #58a399ab;
    margin-bottom: 20px;
    margin-top: 30px;
    border-radius: 32px;
    padding:20px 30px 20px 30px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    transition: background-color 0.3s;
}

#Save:hover{
    background-color: #458b82;
}

#sectionForSections{
    display: flex;
    align-items: center;
    flex-direction: column;
    width:100%;
}

#AddNewSection{
    display: flex;
    align-items: center;
    display: flex;
    flex-direction: column;
    background-color: #58a399ab;
    margin-bottom: 20px;
    margin-top: 30px;
    border-radius: 32px;
    padding:20px 30px 20px 30px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    transition: background-color 0.3s;
}

.image{
    width: 100%;
}

#AddNewSection:hover{
    background-color: #458b82;
}

.blog-post{
    align-items: center;
}

#interactivity{
    display: flex;
    width:50%;
    justify-content: space-evenly;
}

.nameInput{
    padding: 10px 15px 10px 15px;
    border-radius: 32px;
    background-color: #E2F4C5;
    font-family: 'Dancing Script', sans-serif;
    width:60%;
    font-size: 30px;
}

.descriptionInput{
    padding: 10px 15px 10px 15px;
    border-radius: 32px;
    background-color: #E2F4C5;
    font-family: 'Dancing Script', sans-serif;
    width:60%;
    resize: none;
    font-size:25px;
}


.fileInput,
button {
    max-width: 100%;
    font-size: 25px;
    display: flex;
    align-items: center;
    display: flex;
    flex-direction: column;
    background-color: #58a399ab;
    margin-bottom: 5px;
    margin-top: 5px;
    border-radius: 32px;
    padding:20px 30px 20px 30px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    transition: background-color 0.3s;
}

.fileInput:hover,
button:hover {
    background-color: #458b82;
}

.organizeButtons{
    width:20%;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.fileInput::-webkit-file-upload-button {
    visibility: hidden;
    content: none;
  }
.fileInput::-webkit-file-selector-button {
    visibility: hidden;
    content: none;
}
  
.fileInput::before {
    content: 'Image';
    font-size: 25px;
    text-align: center;
}

.fileInput{
    height: 70px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 1);
    transition: background-color 0.3s;
}

@media (max-width: 1630px) {
    .container{
        width:900px;
    }
    .nameInput{
        width:80%;
    }
    .descriptionInput{
        width:80%;
    }
}

@media (max-width: 1140px) {
    .container{
        width:600px;
    }
    .fileInput,
button{
    width: 200px;
    font-size: 20px;
    padding:5px 15px 5px 15px;
}
.fileInput{
    height: 40px;
    padding: 4px 15px 5px 7px;
}
}

@media (max-width: 550px) {
    .container{
        width:600px;
    }
    .fileInput,
button{
    width: 200px;
    font-size: 15px;
    padding:5px 15px 5px 15px;
}
.fileInput::before{
    height: 30px;
    padding: 4px 15px 5px 0px;
    font-size: 20px;
    content: 'Img';
}
.container{
    width:95%;
}
.nameInput{
    width:90%;
}
.descriptionInput{
    width:90%;
}
.blog-post{
    width: 90%;
}
#interactivity{
    width:80%;
}
}







.f-wrapper--2 .flower__leaf--1 {
    background-color: #ff65a3; /* New color */
}

.f-wrapper--2 .f .flower__leaf--8 {
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #ffd700, #ff69b4); /* New gradient colors */
}

.f-wrapper--2 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #ff65a3, #ffdead, #20b2aa 99%); /* New gradient colors */
}

.f-wrapper--3 .flower__leaf--1 {
    background-color: #90ee90; /* New color */
}

.f-wrapper--3 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #4682b4, #ffa500); /* New gradient colors */
}

.f-wrapper--3 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #ff6347, #ff8c00, #dc143c 99%); /* New gradient colors */
}

.f-wrapper--1 .flower__leaf--1 {
    background-color: #add8e6; /* New color */
}

.f-wrapper--1 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #00ced1, #6a5acd); /* New gradient colors */
}

.f-wrapper--1 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #48d1cc, #87ceeb, #ffa07a 99%); /* New gradient colors */
}


.f-wrapper--2 {
    top: 90px;
    left: 10vw;
}

.f-wrapper--3 {
    top: 90px;
    left: 98vw;
}
  
.f-wrapper--2 .f{
    transform: translate(-350%,-50%) rotate(160deg);
}
// File: css/error404.css
/*         ↓↓↓          MAIN          ↓↓↓         */

main {
    display: flex;
    justify-content: center; 
    align-items: center; 
    height: 100vh;
}

.rectangle {
    display: flex;
    flex-direction: column; 
    justify-content: center; 
    align-items: center; 
    width: 90%; 
    max-width: 700px;
    min-height: 200px; 
    background-color: #58a399c2; 
    margin: 50px auto; 
    padding: 20px; 
    border-radius: 10px; 
    border: solid 2px #E2F4C5;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); 
}

#main404 {
    font-size: 34px; 
    margin-bottom: 10px; 
    font-weight: bold;
}

#sec404 {
    font-size: 24px; 
    margin-bottom: 20px; 
    font-weight: bold;
}

#linkToHome {
    font-size: 24px; 
    text-decoration: none;
    color: #fff;
    font-weight: bold;
    background-color: #4CAF50; 
    padding: 10px 20px; 
    border-radius: 5px; 
    transition: background-color 0.3s; 
}

#linkToHome:hover {
    background-color: #45a049;
}

/*         ↑↑↑          MAIN          ↑↑↑         */
// File: css/feed.css

/* Reset default margin and padding */
body, h1, p {
    margin: 0;
    padding: 0;
}

/* Apply flexbox layout to the main container */
main {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    height: 100vh;
}

#adminPanel{

    position: relative;
    left:50%;
    transform: translate(-50%,0%);

    background-image: linear-gradient(#a0e0908c, #e2f4c57c, #a0e09080);
    padding: 30px 20px 40px 20px;
    border-radius: 1%;
    border: 1px black solid;
    box-shadow: 0 0 20px rgba(0, 0, 0, 1); 

    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

    width: 50%; 

    margin-top: 50px;
}


@media screen and (max-width: 1620px) {
    #adminPanel{
        width: 80%; 
    }
}

#controlPanel{
    font-size: 50px;
    margin-bottom: 10px;
    font-weight: bold;
}

#panelLine{
    width: 60%;
    height: 2px;
    background-color: black;
    margin-bottom: 30px;
}

header {
    background-color: #496989cb;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    border-bottom: 1px solid black;
}

header p{
    font-weight: bold;
    font-size: max(4vmin, 15px);
    margin: 8px 10px;
}

@media (max-width: 600px) {
    header p {
        font-size: 15px;
        margin: 8px 10px;
    }

}



.scrollable-content {
}

section {
    text-align: center;
    background-color: #ffffff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); 
    border: 2px solid #e0e0e0; 
    width: auto; 
    height: auto; 
    max-width: 800px; 
}

section p{
    font-size: 20px;
}

table {
    position: relative;
    width: 100%;
    border-collapse: separate; 
    border-spacing: 4px;
}

th, td {
    text-align: left;
    border: 1px solid black;
    
}
th {
    text-align: center;
    background-color: #f2f2f2;
}

table span{
    padding: 0px 10px 0px 10px;
    font-size: max(2.5vmin, 12px);
}

.emoji{
    font-size: 20px;
    padding: 0px;
    font-weight: bold;
}

.emoji:hover{
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

.like:hover{
    background-color: #496989cb;
}

.dislike:hover{
    background-color: #8f2525cb;
}

.visit:hover{
    background-color: #A8CD9F;
}

.clientsTableBody td{
    text-align: center;
    background-color: #f2f2f2;
}

.textInput{
    font-family: 'Dancing Script', sans-serif;
    font-weight: bold;
    font-size: 20px;
    color: black;
    width: 30%;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5%;
    border: 1px solid black;
    text-align: center;
}

.textInput:focus{
    background-color: rgb(219, 217, 217);
    border: 1px solid #496989cb;
}

.textInput::placeholder{
    color: black;
}

.textInput:not(:last-child){
    margin-left: 4px;
    margin-right: 4px;
}

#order_input, #display_input{
    font-size: 20px;
    font-weight: bold;
    font-family: 'Dancing Script', sans-serif;
    width:40%;
    text-align: center;
    margin-bottom: 10px;
    border-radius: 2%;
}

#order_input{
    margin-right: 10px;
}

#display_input{
    margin-left: 10px;
}

#order_input:hover, #display_input:hover{
    background-color: rgb(219, 217, 217);
    border: 1px solid #496989cb;
}

select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }

#postLine{
    width: 80%;
    height: 2px;
    margin-bottom: 10px;
    background-color: black;
    position: relative;
    left: 50%;
    transform: translate(-50%,0%);
    
}

@media screen and (max-width: 768px) {
    .textInput{
        font-size: 10px;
        margin-top: 10px;
        padding: 5px;
    }
    #order_input , #display_input{
        font-size: 10px;
    }
}

#textInput::placeholder{
    color: black;
}

.clientsTable{
    margin-bottom: 10px;
      
}

@media screen and (max-width: 768px) {

    #controlPanel{
        font-size:40px ;
    }
    #adminPanel{
        width: 95%; 
        padding-left: 5px;
        padding-right: 5px;
    }
    section {
        width: 99%; 
        padding: 1px;
    }
    table{
        border-spacing: 3px;
    }
    
    
    
}

@media (max-width: 600px) {
    header p {
        font-size: 35px;
        margin: 8px 10px;
    }

}

/* FLOWER POSITION */

.f-wrapper--1 {
    top: 80px;
    right: 100px;
}

.f-wrapper--2 {
    top: 80px;
    left: 100px;
}

.f-wrapper--1 .f{
    transform: translateX(-50%) rotate(-150deg);
}

.f-wrapper--2 .f{
    transform: translateX(-50%) rotate(160deg);
}

.f-wrapper--2 .flower__leaf--1{
    background-color: #de118b;
}

.f-wrapper--2 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #ff43b6 ,#4d1337);;
}

.f-wrapper--2 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #ff43b6 ,#c22887, #1a233a 99%);
}

/* #switch1{
    display: none;
} */

#switch2{
    margin-top: 15px;
    display: none;
    justify-content: space-evenly;
    flex-wrap: wrap;
    align-items: center;
    width: 100%;
    background-color: rgb(238, 237, 237);
    padding-top:10px;
    border-radius: 2%;
    box-shadow: 0 0 10px rgba(0, 0, 0, 1); 
}

#switch2 table{
    border-spacing: 0px;
}

#switch2 table th{
    border : 0px;
    border-bottom: 2px solid black;
}

#switch2 table td{
    border : 0px;
    border-bottom: 2px solid black;
}

.flip-card {
    
    background-color: transparent;
    width: 47%;
    min-width: 45%;
    height: 200px;
    perspective: 1000px; 
    margin-left: 10px;
    margin-right: 10px;
  }

  .flip-card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }

  .flip-card-front, .flip-card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
  }
  
  .flip-card-front {
    background-color: rgb(56, 77, 57);
    height: auto;
  }
  
  .flip-card-back {
    transform: rotateX(180deg);
    background-color: rgb(49, 65, 99);
    height: auto;
  }
  
 #switch2 .like{
    width: 33%;
 }

 #switch2 .dislike{
    width: 33%;
 }

 #switch2 .visit{
    width: 33%;
 }

 .nothingText{
    color:#E2F4C5;
 }

 #hideFlip{
    display: none;
 }

 @media screen and (max-width: 1000px) {
    .flip-card {
        width: 95%;
        min-width: 45%;
        height: 140px;
        margin-left: 10px;
        margin-right: 10px;
      }
 }

 @media screen and (max-width: 760px) {
    #switch2{
        position: relative;
        width:90%;
        left:50%;   
        transform: translate(-50%,0%);
    }
    .flip-card {
        height: 120px;
      }

      #switch2 .emoji{
        font-size: 15px;
      }

 }

 @media screen and (max-width: 550px) {
    .flip-card {
        height: 100px;
      }
 }

 @media screen and (max-width: 440px) {
    .flip-card {
        height: 80px;
      }
 }
// File: css/flower.css
.f-wrapper {
    position: absolute;
}

.f-wrapper--1 {
    top: 95%;
    left: 90%;
}

.f-wrapper--2 {
    top: 93.6%;
    left:5%;
}

.f-wrapper--3 {
    top: 8%;
    left: 98%;
}


@media (max-width: 1000px) {

    .f-wrapper {
        display: none;
    }
}


.f-wrapper--2 .f{
    transform: translateX(-50%) rotate(20deg);
}

.f-wrapper--2 .flower__leaf--1{
    width: 8vmin;
    height: 10vmin;
    bottom: 2vmin;
    background-color: #de118b;
}

.f-wrapper--2 .f .flower__leaf--8{
    width: 10vmin;
    height: 9vmin;
    bottom: 3vmin;
    left: -30%;
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #ff43b6 ,#4d1337);;
}

.f-wrapper--2 .flower__leaf:not(:first-child){
    width: 3.8vmin;
    height: 10vmin;
    background-image: linear-gradient(to bottom, #ff43b6 ,#c22887, #1a233a 99%);
}

.f-wrapper--3 .f{
    transform: translate(-350%,-50%) rotate(-140deg);
}

.f-wrapper--3 .flower__leaf--1{
    width: 8vmin;
    height: 10vmin;
    bottom: 2vmin;
    background-color: #ad2be0;
}

.f-wrapper--3 .f .flower__leaf--8{
    width: 10vmin;
    height: 9vmin;
    left: -10% !important;
    background-image: linear-gradient(to left bottom, #ad2be0 ,#712291);
}

.f-wrapper--3 .flower__leaf:not(:first-child){
    width: 3.8vmin;
    height: 10vmin;
    background-image: linear-gradient(to bottom, #ad2be0 ,#712291, #1a233a 99%);
}








.f{
    position: absolute;
    top: 1vmin;
    left: 50%;
    transform: translateX(-50%) rotate(-10deg);
    width: 2vmin;
    height: 2vmin;
}


.flower__leaf{
    position: absolute;
    left: 50%;
    bottom: 2vmin;
    transform: translateX(-50%);
    width: 3vmin;
    height: 8.4vmin;
    background-image: linear-gradient(to bottom, #ffa085 ,#fa7373, #1a233a 99%);

    clip-path: ellipse(50% 50% at 50% 50%);
    transform-origin: center bottom;
    animation: open-flower 2s 1s backwards;
}

.flower__leaf--1{
    width: 6vmin;
    height: 7.2vmin;
    bottom: 3vmin;
    border-radius: 50% 50% 50% 50% / 80% 80% 20% 20%;
    background-color: #e24f5f;
    background-image: none;
    animation: open-flowe--middle  1.4s 1s backwards;
}

.flower__leaf--2{
    transform: translateX(-50%) rotate(-30deg);
}
.flower__leaf--3{
    transform: translateX(-50%) rotate(-50deg);
}
.flower__leaf--4{
    transform: translateX(-50%) rotate(-70deg);
}

.flower__leaf--5{
    transform: translateX(-50%) rotate(30deg);
}

.flower__leaf--6{
    transform: translateX(-50%) rotate(50deg);
}

.flower__leaf--7{
    transform: translateX(-50%) rotate(70deg);
}

@keyframes open-flower{
        0%{
            transform:  translateX(-50%) rotate(0);
        }
}

@keyframes open-flowe--middle {
    0%{
        opacity: 0;
        transform: translateX(-50%) scale(0);
    }
}
// File: css/generateReports.css
#sectionDiv{
    display: flex;
    justify-content: space-evenly;
    
}

#clientsReportDiv{
    margin-right: 0px;
}

.buttons{
    display: flex;
    justify-content: space-evenly;
}

section:hover{
    background-color: #ffffff;
    box-shadow: 0 0 0px rgba(0, 0, 0, 0); 
}

.button{
    width:75px;
    height: 25px;
    background-color: white;
    text-align: center;
    border: 1px solid black;
    border-radius: 9%;
}

.button:hover{
    background-color: #A8CD9F;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

#clientsSection{
    margin-bottom: 10px;
    margin-right: 15px;
}

#plantsSection{
    margin-bottom: 10px;
}

@media screen and (max-width: 768px) {
    #clientsSection{
        margin-right: 0px;
        margin-left: 20px;
    }

    #plantsSection{
        margin-right: 0px;
        margin-left: 20px;
    }
    #adminPanel{
        padding: 30px 0px 30px 0px;
    }
    .button{
        width:60px;
        height: 25px;
        background-color: white;
        text-align: center;
        border: 1px solid black;
        border-radius: 9%;
    }
    
}

@media (max-width: 600px) {
    header p {
        font-size: 35px;
        margin: 8px 10px;
    }

}


/* FLOWER POSITION */

.f-wrapper--2 .flower__leaf--1{
    background-color: #fdbcb4;
}

.f-wrapper--2 .f .flower__leaf--8{
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #ffe119   ,#4e4e4e);
}


.f-wrapper--2 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom,#f58231  , #ffab40  ,#ffd8b1 99%);
}


.f-wrapper--3 .flower__leaf--1{
    background-color: #e6e6e6;
}

.f-wrapper--3 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #77dd77  ,#4e4e4e);
}

.f-wrapper--3 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #add8e6  ,#6495ed , #4682b4 99%);
}


// File: css/hover-cards.css
figure {
    display: grid;
    border-radius: 1rem;
    overflow: hidden;
    margin: 20px;
    font-family: 'Dancing Script', sans-serif;
}

figure > * {
    grid-area: 1/1;
    transition: .4s;
}

figure figcaption {

    display: grid;
    align-items: end;
    font-size: 2.3rem;
    font-weight: bold;
    color: #0000;
    color:#cac7ff;
    padding: .75rem;
    background: var(--c,#0009);
    clip-path: inset(0 var(--_i,100%) 0 0);
    /* -webkit-mask:
        linear-gradient(#000 0 0),
        linear-gradient(#000 0 0); */
    -webkit-mask-composite: xor;
    -webkit-mask-clip: text, padding-box;
    margin: -1px;
}

figure:hover figcaption{
    --_i: 0%;
}

figure:hover .collectionClose{
    display: block;
    opacity: 1;
}

figure:hover img {
    transform: scale(1.2);
}

@supports not (-webkit-mask-clip: text) {
    figure figcaption {
        -webkit-mask: none;
        color: #000000;
    }
}

// File: css/howToPressFlowers.css
.f-wrapper--2 .flower__leaf--1{
    background-color: #ff847c;
}

.f-wrapper--2 .f .flower__leaf--8{
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #feceab  ,#4e4e4e);
}


.f-wrapper--2 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom,#669bbc  , #8fbfbf  ,#cad2c5 99%);
}

.f-wrapper--3 .flower__leaf--1{
    background-color: #8be9fd;
}

.f-wrapper--3 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #ffbe0b  ,#4e4e4e);
}

.f-wrapper--3 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #a9a9a9   ,#696969 , #808080 99%);
}

.f-wrapper--1 .flower__leaf--1{
    background-color: #b19cd9;  
}

.f-wrapper--1 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #ffef96 ,#4e4e4e);
}

.f-wrapper--1 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #fb5607  ,#ff006e , #8338ec 99%);
}
// File: css/landingPage.css

/* Reset default margin and padding */
body, h1, p {
    margin: 0;
    padding: 0;
}

/* Apply flexbox layout to the main container */
main {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    height: 100vh;
}

@media only screen and (max-width: 1650px) {
    main{
        justify-content: center;
        flex-direction: column;
    }
    #container{
        margin-top: 30px;
    }
    #adminPanel{
        margin-top: 30px;
    }
  }

#plant_Logo{
    width:40px;
    padding-bottom: 5px;
}

#adminPanel{
    background-image: linear-gradient(#a0e0908c, #e2f4c57c, #a0e09080);
    padding: 30px 20px 40px 20px;
    border-radius: 4%;
    border: 1px black solid;
    box-shadow: 0 0 20px rgba(0, 0, 0, 1); 

    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

#controlPanel{
    font-size: 50px;
    margin-bottom: 10px;
    font-weight: bold;
}

#panelLine{
    width: 60%;
    height: 2px;
    background-color: black;
    margin-bottom: 30px;
}

section {
    text-align: center;
    background-color: #ffffff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); 
    border: 2px solid #e0e0e0; 
    max-width: 600px; 
}

section:hover {
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.3); 
    background-color: #dfe6df;
}

section p{
    font-size: 20px;
}

section:not(:last-child){
    margin-bottom: 20px;
}


@media screen and (max-width: 768px) {

    #adminPanel{
        width: 85%; 
    }
    section {
        width: 80%; 
    }
    #plant_Logo{
        width: 50px;
    }
    #controlPanel{
        font-size: 40px;
    }
    #textPresentation{
        margin-top: 10px;
    }
}

header {
    background-color: #496989cb;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    border-bottom: 1px solid black;
}

header h1{
    font-weight: bold;
    font-size: max(4vmin, 25px);
    margin: 8px 10px;
}

@media (max-width: 600px) {
    header h1 {
        font-size: 27px;
        margin: 8px 10px;
    }

}
/*   PICTURES SLIDESHOW     */
  
  #textPresentation{
    font-size: 40px;
    text-align: center;
    margin-bottom: 20px;
    font-weight: bold;
    
    background-image: linear-gradient(#a0e09063, #e2f4c556, #a0e09052);
    border: 1px black solid;
    border-radius: 10%;
    box-shadow: 0 0 20px rgba(0, 0, 0, 1); 
  }

  #container {
    max-width: 1200px;
    width: 95%;

    background-image: linear-gradient(#a0e0908c, #e2f4c57c, #a0e09080);
    border: 1px black solid;
    border-radius: 4%;
    padding: 20px 30px 20px 30px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 1); 
  }
  
  .slider-wrapper {
    position: relative;
  }
  
  .slider-wrapper .slide-button {
    position: absolute;
    top: 50%;
    outline: none;
    border: none;
    height: 50px;
    width: 50px;
    z-index: 5;
    color: #fff;
    display: flex;
    cursor: pointer;
    font-size: 2.2rem;
    background: #000;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transform: translateY(-50%);
  }
  
  .slider-wrapper .slide-button:hover {
    background: #404040;
  }
  
  .slider-wrapper .slide-button#prev-slide {
    left: -25px;
    display: none;
  }
  
  .slider-wrapper .slide-button#next-slide {
    right: -25px;
  }
  
  .slider-wrapper .image-list {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    gap: 18px;
    font-size: 0;
    list-style: none;
    margin-bottom: 30px;
    overflow-x: auto;
    scrollbar-width: none;
  }
  
  .slider-wrapper .image-list::-webkit-scrollbar {
    display: none;
  }
  
  .slider-wrapper .image-list .image-item {
    width: 325px;
    height: 400px;
    object-fit: cover;
  }
  
  #container .slider-scrollbar {
    height: 24px;
    width: 100%;
    display: flex;
    align-items: center;
  }
  
  .slider-scrollbar .scrollbar-track {
    background: #ccc;
    width: 100%;
    height: 2px;
    display: flex;
    align-items: center;
    border-radius: 4px;
    position: relative;
  }
  
  .slider-scrollbar:hover .scrollbar-track {
    height: 4px;
  }
  
  .slider-scrollbar .scrollbar-thumb {
    position: absolute;
    background: #000;
    top: 0;
    bottom: 0;
    width: 50%;
    height: 100%;
    cursor: grab;
    border-radius: inherit;
  }
  
  .slider-scrollbar .scrollbar-thumb:active {
    cursor: grabbing;
    height: 8px;
    top: -2px;
  }
  
  .slider-scrollbar .scrollbar-thumb::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    top: -10px;
    bottom: -10px;
  }

  .image-item{
    border: 2px solid #A8CD9F;
    border-radius: 2%;
  }
  
  /* Styles for mobile and tablets */
  @media only screen and (max-width: 1023px) {

    #container{
        padding: 5px 10px 5px 10px;
    }
    #textPresentation{
        font-size: 30px;
    }
    .slider-wrapper .slide-button {
      display: none !important;
    }
  
    .slider-wrapper .image-list {
      gap: 10px;
      margin-bottom: 15px;
      scroll-snap-type: x mandatory;
    }
  
    .slider-wrapper .image-list .image-item {
      width: 280px;
      height: 380px;
    }
  
    .slider-scrollbar .scrollbar-thumb {
      width: 20%;
    }
  }




.flower__leaf{
  background-image: linear-gradient(to bottom, #ff9f80  ,#ff725e , #ff5349 99%);
}

.flower__leaf--1{
    background-color: #f984ef;
}


.f-wrapper--3 .flower__leaf--1{
  background-color: #b19cd9;
}

.f-wrapper--3 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #ffef96 ,#4e4e4e);
}

.f-wrapper--3 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #a9a9a9   ,#696969 , #808080 99%);
}


.f-wrapper--2 .flower__leaf--1{
  background-color: #c3aed6;
}

.f-wrapper--2 .f .flower__leaf--8{
  background-image: linear-gradient(to left bottom, #f8b195  ,#4e4e4e);
}

.f-wrapper--2 .flower__leaf:not(:first-child){
  background-image: linear-gradient(to bottom, #90afc5  ,#336b87 , #2a3132 99%);
}

@media only screen and (max-width: 1650px) {

  .f-wrapper--1 {
    top: 96%;
    left: 90%;
  }

  .f-wrapper--2 {
    top: 95.6%;
    left:5%;
  }

  .f-wrapper--3 {
    top: 5%;
    left: 98%;
  }

}
// File: css/listOfClients.css

/* Reset default margin and padding */
body, h1, p {
    margin: 0;
    padding: 0;
}

/* Apply flexbox layout to the main container */
main {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    height: 100vh;
}

#adminPanel{
    background-image: linear-gradient(#a0e0908c, #e2f4c57c, #a0e09080);
    padding: 30px 20px 40px 20px;
    border-radius: 32px;
    border: 1px black solid;
    box-shadow: 0 0 20px rgba(0, 0, 0, 1); 

    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

    margin-top: 50px;
}

#controlPanel{
    font-size: 50px;
    margin-bottom: 10px;
    font-weight: bold;
}

#panelLine{
    width: 60%;
    height: 2px;
    background-color: black;
    margin-bottom: 30px;
}

header {
    background-color: #496989cb;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    border-bottom: 1px solid black;
}

header p{
    font-weight: bold;
    font-size: max(4vmin, 15px);
    margin: 8px 10px;
}

@media (max-width: 600px) {
    header p {
        font-size: 15px;
        margin: 8px 10px;
    }

}



.scrollable-content {
}

section {
    text-align: center;
    background-color: #ffffff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); 
    border: 2px solid #e0e0e0; 
    width: auto; 
    height: auto; 
    /* max-width: 600px;  */
}

section p{
    font-size: 20px;
}

table {
    width: 100%;
    border-collapse: separate; 
    border-spacing: 7px;
}
th, td {
    text-align: left;
    border: 1px solid black;
    
}
th {
    text-align: center;
    background-color: #f2f2f2;
}

table span{
    padding: 0px 10px 0px 10px;
    font-size: max(2.5vmin, 12px);
}

.emoji{
    padding: 0;
}
.idcol{
    padding-left: 1px;
    padding-right: 1px;
}

.emoji:hover{
    background-color: #A8CD9F;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

#textInput{
    font-family: 'Dancing Script', sans-serif;
    font-size: 20px;
    color: black;
    width: 75%;
    margin-bottom: 10px;
    padding: 10px;
}


@media screen and (max-width: 768px) {
    #textInput{
        font-size: 10px;
        margin-top: 10px;
    }
}

#textInput::placeholder{
    color: black;
}

@media screen and (max-width: 768px) {

    #controlPanel{
        font-size:40px ;
    }
    #adminPanel{
        width: 95%; 
        padding-left: 5px;
        padding-right: 5px;
    }
    section {
        width: 99%; 
        padding: 1px;
    }
    table{
        border-spacing: 3px;
    }
    .emoji{
        font-size: 8px;
    }
    .idcol{
        font-size: 8px;
    }
}

@media (max-width: 600px) {
    header p {
        font-size: 35px;
        margin: 8px 10px;
    }

}

/* FLOWER POSITION */


.f-wrapper--1 {
    top: 96%;
    left: 90%;
}

.f-wrapper--2 {
    top: 95.6%;
    left:5%;
}

.f-wrapper--3 {
    top: 6%;
    left: 98%;
}

.f-wrapper--2 .flower__leaf--1{
    background-color: #b0cc12;
}

.f-wrapper--2 .f .flower__leaf--8{
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #d9ff00fd ,#3f082a);
}


.f-wrapper--2 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom,#c8ff00 , #952a99 ,#a82476 99%);
}


.f-wrapper--3 .flower__leaf--1{
    background-color: #1ba9c2;
}

.f-wrapper--3 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #2bc5e0 ,#712291);
}

.f-wrapper--3 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #2bc5e0 ,#712291, #1a2e5f 99%);
}


// File: css/login.css
main {
    flex: 1;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    height: 100vh;
}

/*     LOGIN BOX   ↧   */

.login{
    box-shadow: 0 0 20px rgba(0, 0, 0, 1);
    /* position: absolute; */
    
    /* width:90%; */
    /* height:50%; */
    /* max-width: 600px; */

    background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);
    
    border-radius: 13%;
    border: #E2F4C5 2px solid;

    /* top:50%; */
    transform: translate(0%,+10%);
    
    opacity: 90%;

    /* */

    display: flex;
	flex-wrap: nowrap;
	justify-content: space-evenly;
	
    width: 65vmin;
	height: 60vmin;
	margin: 2rem 3rem auto;
    
    background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);

	position: relative;
	overflow: hidden;
}

@media (max-width: 850px) {
    .login{
        position: relative;
        
        width:90%;
        height: 500px;
    
        background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);
        
        border-radius: 13%;
        border: #E2F4C5 2px solid;
    
        top:50%;
        transform: translate(0%,0%);
        opacity: 90%;
    }
}

.headerLogin
{
    margin-top: 20px;
    font-size: max(9vmin, 80px);
    position: relative;
    text-align: center;
    top:5%;
    opacity: 100%;
    color: #A8CD9F;
}

.line{
    position: absolute;
    top:29%;
    left:50%;
    transform: translate(-50%,-50%);

    width:0;
    height: 0;
    margin-left: auto;
    margin-right: auto;
    border-left:  max(13vw, 170px) solid transparent;
    border-right: max(13vw, 170px) solid transparent;
    border-bottom: 4px solid #A8CD9F;

}

#Error_Message
{
    position: absolute; 
    left:50%;
    top: 88%;
    transform: translate(-50%,0%);
    font-size: 22px;
    width:300px;

    background-image: linear-gradient(to right, #e7e422 ,rgb(198, 198, 254),white);
    color: transparent;
    background-clip: text;
    -webkit-background-clip: text;
}

#login1{
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: space-evenly;
}

#login1 .headerLogin{
    padding-bottom: 100px;
}

#textBox{
    margin-left: 90px;
    margin-right: 90px;
    padding-bottom: 100px;
}

@media (max-width: 850px) {
    #textBox{
        margin-left: 50px;
        margin-right: 40px;
        transform: translate(0%,-7%);
    }
    .login{
        margin-left: 0px;
        margin-right: 0px;
        width:95%;
    }
    #login1 .headerLogin{
        padding-bottom: 70px;
        margin-top: 30px;
        font-size: 60px;
    }
}

#textBox p{
    font-size: max(2.5vmin, 18px);
}

#login_form
{
    position: absolute;
    left:50%;
    top:50%;
    transform: translate(-50%,-40%);
}

#login_form ::placeholder{
    font-family: 'Dancing Script', sans-serif;
}


form p
{
    text-align: center;
    font-size: 40px;
    margin-bottom: 0px;
    margin-top: 20px;
}

#Email
{
    position: relative;
    width: 150%;
    right:100%;
    transform: translate(+49%,0%);
    height: 25px;
    font-size: 20px;
    color:#496989;
    font-weight: bold;
    text-align: center;
    border-radius: 8%;
    border:0px solid black;
    -webkit-text-fill-color:#496989;
    background-color: #e6f0d6;
}

#Password
{
    position: relative;
    width: 150%;
    right:100%;
    transform: translate(+49%,0%);
    height: 25px;
    font-size: 20px;
    color:#496989;
    font-weight: bold;
    text-align: center;
    border-radius: 8%;
    border:0px solid black;
    -webkit-text-fill-color: #496989;
    background-color: #e6f0d6;
}

#Email:focus
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#Password:focus
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#Email:hover
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#Password:hover
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#submit
{
    position: absolute;
    left:15%;
    transform: translate(-50%,0%);
    width:130px;
    height: 27px;
    margin-top: 25px;
    border-radius: 25%;
    border:0px solid black;
    color: #A8CD9F;
    font-weight:bold;
    font-size: 20px;
    background-color: #e7eedb;  
    transition: width 0.1s ease-in-out;
    font-family: 'Dancing Script', sans-serif;
}

#submit:hover
{
    color:#58A399;
    width:140px;
    height: 30px;
    margin-top: 23px;
    transition: 200ms;
    font-size: 22px;
}

#register
{
    width:130px;
    height: 27px;
    position: absolute;
    top:114.5%;
    left:85%;
    transform: translate(-50%,-50%);
    border-radius: 25%;
    border:0px solid black;
    font-weight:bold;
    font-size: 20px;
    background-color: #e7eedb;
    text-align: center;
    color: #A8CD9F;
    transition: width 0.1s ease-in-out;
}

#register:hover
{
    color:#58A399;
    width:140px;
    height: 30px;
    transition: 200ms;
    font-size: 22px;
}

@media (max-width: 600px) {
    #register{
        transform: translate(-38%,-49%);
    }
    #submit{
        transform: translate(-65%,0%);
    }

    #textBox{
        margin-top: 50px;
    }

    #submit:hover{
        width:130px;
        height: 27px;
        font-size: 20px;
    }

    #register:hover{
        width:130px;
        height: 27px;
        font-size: 20px;
    }
}

/*     LOGIN BOX   ↥   */

footer {
    margin-top: 100px;
}

.f-wrapper--2 .flower__leaf--1{
    background-color: #ff847c;
}

.f-wrapper--2 .f .flower__leaf--8{
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #feceab  ,#4e4e4e);
}


.f-wrapper--2 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom,#669bbc  , #8fbfbf  ,#cad2c5 99%);
}


.f-wrapper--3 .flower__leaf--1{
    background-color: #8be9fd;
}

.f-wrapper--3 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #ffbe0b  ,#4e4e4e);
}

.f-wrapper--3 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #fb5607  ,#ff006e , #8338ec 99%);
}

.f-wrapper--1 .flower__leaf--1{
    background-color: #b19cd9;
  }
  
  .f-wrapper--1 .f .flower__leaf--8{
      background-image: linear-gradient(to left bottom, #ffef96 ,#4e4e4e);
  }
  
  .f-wrapper--1 .flower__leaf:not(:first-child){
      background-image: linear-gradient(to bottom, #a9a9a9   ,#696969 , #808080 99%);
  }

  @media only screen and (max-width: 1420px) {

    .f-wrapper--1 {
      top: 96%;
      left: 90%;
    }
  
    .f-wrapper--2 {
      top: 95.6%;
      left:5%;
    }
  
    .f-wrapper--3 {
      top: 5%;
      left: 98%;
    }
  
  }
// File: css/loginRegisterHeader.css
header {
    display: block;
    background-color: #496989e5;
    color:#A8CD9F;
}

.left{
    padding-left: 0px;
}

.left h1{
    font-weight: bold;
    font-size: max(5.5vmin, 15px);
    padding-left: 10px;
    margin-right: 60px;
}

.left #plant_Logo{
    width: max(6vmin, 10px);
    padding-bottom: 5px;
}

.right, .search_Bar{
    display: none;
}

@media (max-width: 600px) {
    header {
        padding: 8px 0px 7px 0px; 
        margin-bottom: 0px;
    }
    .left #plant_Logo{
        width: 60px;
        padding-top: 10px;
    }
    .left{
        padding: 10px 20px 10px 20px;
    }
    .left h1{
        padding-left: 15px;
        font-size: max(5.5vmin, 30px);
        margin-right: 0px;
    }
    .left #plant_Logo{
        display: block;
    }
    .right{
        display: none;
    }
}
// File: css/plant_profile.css
/* Base styles */
:root {
    --primary-color: #4caf50; /* Primary theme color */
    --secondary-color: #8bc34a; /* Secondary theme color */
    --text-color: #333; /* Primary text color */
    --background-color: #f5f5f5; /* Background color */
    --border-radius: 8px; /* Border radius for cards/buttons */
}

body {
    font-family: 'Roboto', sans-serif; /* Use a modern font */
    background: var(--background-color);
    color: var(--text-color);
    line-height: 1.6; /* Spacing for readability */
}

/* Utility classes */
.w-70 { width: 70%; }
.w-100 { width: 100%; }
.w-xl-25 { width: 25%; } 
.w-xl-50 { width: 50%; } 

/* Plant profile card */
.user-profile-card {
    background: #fff;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    margin: 2rem auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 800px;
}

/* Image and info containers */
.photo-profile,
.info-profile {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
}

/* Labels and content */
.label {
    font-weight: 700; 
    margin-bottom: 0.25rem;
}

.form-control {
    background: none;
    border: 0;
    border-bottom: 2px solid var(--primary-color);
    padding: 0.5rem 0;
    margin-bottom: 1rem;
    width: 100%
}

/* Buttons */
.button {
    padding: 10px 20px;
    border: none;
    border-radius: var(--border-radius);
    background-color: var(--primary-color);
    color: white;
    cursor: pointer;
    font-size: 1rem;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    transition: background-color 0.3s;
}

.button:hover {
    background-color: var(--secondary-color);
}

/* Responsive design */
@media (max-width: 767px) {
    .w-70 { width: 100%; } 
}

@media (min-width: 768px) {
    .row {
        display: flex;
        flex-direction: row;
    }

    .photo-profile,
    .info-profile {
        width: 50%;
    }

    .form-group {
        width: calc(50% - 1rem); 
    }
}

@media (min-width: 1024px) {
    .user-profile-card {
        flex-direction: row; 
    }

    .form-control {
        width: auto; 
    }
}



// File: css/profile.css
/*--------CARDS----------*/

.card {
    box-shadow: 0 1px 3px 0 rgba(0,0,0,.1), 0 1px 2px 0 rgba(0,0,0,.06);
}

.card {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: 0;
    word-wrap: break-word;
    background-color: #fff;
    background-clip: border-box;
    border: 0 solid rgba(0,0,0,.125);
    border-radius: .25rem;
}

.card-body {
    flex: 1 1 auto;
    min-height: 1px;
    padding: 1rem;
}

/*---------UTILS--------*/
   

.bg-gray-300 {
    background-color: #e2e8f0;
}
.h-100 {
    height: 100%!important;
}
.shadow-none {
    box-shadow: none!important;
}

.button-div {
    display: flex;
    flex-wrap: wrap;
}

.col {
    padding: 15px;
    flex: 2;
}

.central-column {
    flex: 3; 
}

.left-column,
.right-column {
    width: 20%; 
}

.central-column {
    width: 60%; 
}


/*--------LIST-------------*/

.list-group-flush {
    width: 100%; 
    padding-left: 0; 
    list-style-type: none; 
}

.list-group-item {
    transition: background-color 0.3s ease;
    border-bottom: 1px solid #f0f0f0; 
    padding: 10px; 
}

.list-group-item:last-child {
    border-bottom: none; 
}

.list-group-item h6 {
    display: block;
    margin: 0; 
    font-weight: 500;
    padding: 15px 20px;
    line-height: 1.5; 
}

.list-group-item a {
    display: block;
    padding: 15px 20px;
    font-weight: 500;
    color: #4a4a4a; 
    text-decoration: none; 
}

.list-group-item a:hover {
    text-decoration: #f8f9fa; 
}

.list-group-item:first-child {
    border-top: none; 
}

/*------------------------*/

#container{
    display: flex;
    flex-direction: row;
}

.card {
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.5);
    max-width: 75%;
    margin: auto;
    text-align: center;
    overflow: hidden;
  }
  
  button {
    border: none;
    outline: 0;
    display: inline-block;
    padding: 8px;
    color: white;
    background-color: #000;
    text-align: center;
    cursor: pointer;
    width: 100%;
    font-size: 18px;
  }
  
  a {
    text-decoration: none;
    font-size: 22px;
    color: black;
  }
  
  button:hover, a:hover {
    opacity: 0.7;
  } 


.profile-container {
    display: flex;
    margin: auto;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.underline {
    border-bottom: solid 2px #cac7ff;
    margin: -0.512em auto;
    width: 100px;
}

.profile-header {
    text-align: center;
    padding: 20px;
    border-bottom: 1px solid #dee2e6;
}

.profile-header .profile-picture {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    border: 5px solid #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.profile-header h1 {
    font-size: 24px;
    margin-top: 10px;
}

.profile-header p {
    color: #666;
    margin: 5px 0;
}

button:hover {
    background-color: #0056b3;
}

.social-links {
    text-align: center;
    padding: 20px;
    border-bottom: 1px solid #dee2e6;
}

.social-links a {
    margin: 0 10px;
    color: #007bff;
    text-decoration: none;
    transition: color 0.3s ease;
}

.social-links a:hover {
    color: #0056b3;
}

.user-details {
    display: flex;
    padding: 20px;
}

.details, .project-status {
    flex: 1;
    margin: 10px;
    padding: 20px;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 5px;
}

.details h2, .project-status h2 {
    border-bottom: 1px solid #dee2e6;
    padding-bottom: 10px;
    margin-bottom: 20px;
    color: #333;
    font-size: 18px;
}

.details p {
    margin: 10px 0;
    line-height: 1.5;
}

/* Buttons */

.edit-btn {
    margin: 10px 0;
    line-height: 1.5;
}

.follow-btn {
    margin: 10px 0;
    line-height: 1.5;
}

.message-btn {
    margin: 10px 0;
    line-height: 1.5;
}

.contact-btn {
    margin: 10px 0;
    line-height: 1.5;
}

/* Buttons */

.project-status progress {
    width: 100%;
    height: 20px;
    border-radius: 5px;
    color: #007bff;
}

.project-status progress[value]::-webkit-progress-bar {
    background-color: #e9ecef;
    border-radius: 5px;
}

.project-status progress[value]::-webkit-progress-value {
    background-color: #007bff;
    border-radius: 5px;
}

.project-status progress[value]::-moz-progress-bar {
    background-color: #007bff;
    border-radius: 5px;
}

.project-status label {
    display: block;
    margin-top: 20px;
}




@media (max-width: 768px) {
    .profile-container {
        flex-direction: column;
        align-items: center; 
    }

    .card {
        max-width: 100%;
        margin: 0.5rem;
    }

    .details, .project-status {
        margin: 0.5rem;
        width: calc(100% - 1rem);
    }

    .button-div {
        flex-direction: column;
        align-items: center;
    }

    .list-group-item h6,
    .list-group-item a {
        padding: 15px;
    }

    .central-column,
    .left-column,
    .right-column {
        width: 100%;
    }
}


@media (max-width: 768px) {
    .social-links {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .social-links .socialMediaIcon2 {
        width: 100%; 
        margin-bottom: 15px; 
    }

    .social-links {
        display: block;
    }
}



// File: css/register.css
main {
    flex: 1;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    height: 100vh;
}

/*     LOGIN BOX   ↧   */

.login{
    /* position: absolute; */
    
    /* width:90%; */
    /* height:50%; */
    /* max-width: 600px; */

    background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);
    
    border-radius: 13%;
    border: #E2F4C5 2px solid;

    /* top:50%; */
    transform: translate(0%,+5%);
    
    opacity: 90%;

    /* */

    display: flex;
	flex-wrap: nowrap;
	justify-content: space-evenly;
	
    width: 65vmin;
	height: 65vmin;
	margin: 2rem 3rem auto;
    
    background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);

	position: relative;
	overflow: hidden;
}

@media (max-width: 850px) {
    #login2{
        position: relative;
        margin-left: 0px;
        margin-right: 0px;
        width:95%;
        height: 600px;
    
        background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);
        
        border-radius: 13%;
        border: #E2F4C5 2px solid;
    
        top:50%;
        transform: translate(0%,0%);
        opacity: 90%;
    }
    #login1{
        position: relative;
        
        margin-left: 0px;
        margin-right: 0px;
        width:95%;
        height: 400px;
    
        background-image: linear-gradient(to bottom, #496989,#3f867d,#496989);
        
        border-radius: 13%;
        border: #E2F4C5 2px solid;
    
        top:50%;
        transform: translate(0%,0%);
        opacity: 90%;
    }
}

.headerText
{
    font-size: max(9vmin, 80px);
    position: relative;
    text-align: center;
    top:5%;
    opacity: 100%;
}

.line{
    position: absolute;
    top:24%;
    left:50%;
    transform: translate(-50%,-50%);

    width:0;
    height: 0;
    margin-left: auto;
    margin-right: auto;
    border-left:  max(13vw, 170px) solid transparent;
    border-right: max(13vw, 170px) solid transparent;
    border-bottom: 4px solid #A8CD9F;

}

#Error_Message
{
    position: absolute; 
    left:50%;
    top: 90%;
    transform: translate(-50%,0%);
    font-size: 22px;
    width:300px;

    background-image: linear-gradient(to right, #e7e422 ,rgb(198, 198, 254),white);
    color: transparent;
    background-clip: text;
    -webkit-background-clip: text;
}

#login1{
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: space-evenly;
}

#login1 .headerText{
    margin-top: 30px;
    padding-bottom: 100px;
}

#textBox{
    margin-left: 90px;
    margin-right: 90px;
    padding-bottom: 100px;
}

@media (max-width: 850px) {
    #textBox{
        margin-left: 50px;
        margin-right: 40px;
        transform: translate(0%,-7%);
    }
    .headerText{
        font-size: 60px;
    }
    #line1{
        top:20%;
    }
}

#textBox p{
    font-size: max(2.5vmin, 18px);
}

#login_form
{
    position: absolute;
    left:50%;
    top:48%;
    transform: translate(-50%,-40%);
}

#login_form ::placeholder{
    font-family: 'Dancing Script', sans-serif;
}

form p
{
    text-align: center;
    font-size: 40px;
    margin-bottom: 0px;
    margin-top: 20px;
}

#Email
{
    position: relative;
    width: 150%;
    right:100%;
    transform: translate(+49%,0%);
    height: 25px;
    font-size: 20px;
    color:#496989;
    font-weight: bold;
    text-align: center;
    border-radius: 8%;
    border:0px solid black;
    -webkit-text-fill-color:#496989;
    background-color: #e6f0d6;
}

#Password
{
    position: relative;
    width: 150%;
    right:100%;
    transform: translate(+49%,0%);
    height: 25px;
    font-size: 20px;
    color:#496989;
    font-weight: bold;
    text-align: center;
    border-radius: 8%;
    border:0px solid black;
    -webkit-text-fill-color: #496989;
    background-color: #e6f0d6;
}

#Name{
    position: relative;
    width: 150%;
    right:100%;
    transform: translate(+49%,0%);
    height: 25px;
    font-size: 20px;
    color:#496989;
    font-weight: bold;
    text-align: center;
    border-radius: 8%;
    border:0px solid black;
    -webkit-text-fill-color: #496989;
    background-color: #e6f0d6;
}

#Email:focus
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#Password:focus
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#Email:hover
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#Password:hover
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#Name:hover
{
    background-color: #A8CD9F;
    transition: 200ms;
}

#Email:hover
{
   background-color: #A8CD9F;
   transition: 200ms;
}

#submit
{
    position: absolute;
    left:15%;
    transform: translate(-50%,0%);
    width:130px;
    height: 27px;
    margin-top: 25px;
    border-radius: 25%;
    border:0px solid black;
    color: #A8CD9F;
    font-weight:bold;
    font-size: 20px;
    background-color: #e7eedb;  
    transition: width 0.1s ease-in-out;
    font-family: 'Dancing Script', sans-serif;
}

#submit:hover
{
    color:#58A399;
    width:140px;
    height: 30px;
    margin-top: 23px;
    transition: 200ms;
    font-size: 22px;
}

#register
{
    width:130px;
    height: 27px;
    position: absolute;
    top:110.3%;
    left:85%;
    transform: translate(-50%,-50%);
    border-radius: 25%;
    border:0px solid black;
    font-weight:bold;
    font-size: 20px;
    background-color: #e7eedb;
    text-align: center;
    color: #A8CD9F;
    transition: width 0.1s ease-in-out;
}

#register:hover
{
    color:#58A399;
    width:140px;
    height: 30px;
    transition: 200ms;
    font-size: 22px;
}

@media (max-width: 600px) {
    #register{
        transform: translate(-38%,-49%);
    }
    #submit{
        transform: translate(-65%,0%);
    }

    #login1{
        height: 500px;
    }

    #textBox{
        margin-top: 20px;
    }

    #submit:hover{
        width:130px;
        height: 27px;
        font-size: 20px;
    }

    #register:hover{
        width:130px;
        height: 27px;
        font-size: 20px;
    }
}

/*     LOGIN BOX   ↥   */

footer {
    margin-top: 70px;
}

#line2{
    top:30%;
}


.f-wrapper--2 .flower__leaf--1{
    background-color: #5f0f40;
}

.f-wrapper--2 .f .flower__leaf--8{
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #ffbe0b   ,#4e4e4e);
}


.f-wrapper--2 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom,#ff6b6b   , #ffb5b5   ,#ffd8d8 99%);
}


.f-wrapper--3 .flower__leaf--1{
    background-color: #1a2e5f;
}

.f-wrapper--3 .f .flower__leaf--8{
    background-image: linear-gradient(to left bottom, #f7cac9   ,#4e4e4e);
}

.f-wrapper--3 .flower__leaf:not(:first-child){
    background-image: linear-gradient(to bottom, #feb236   ,#d64161  , #ff7b25 99%);
}

.f-wrapper--1 .flower__leaf--1{
    background-color: #1ba9c2;
  }
  
  .f-wrapper--1 .f .flower__leaf--8{
      background-image: linear-gradient(to left bottom, #2bc5e0 ,#712291);
  }
  
  .f-wrapper--1 .flower__leaf:not(:first-child){
      background-image: linear-gradient(to bottom, #2bc5e0   ,#712291 , #1a2e5f 99%);
  }

  @media only screen and (max-width: 1420px) {

    .f-wrapper--1 {
      top: 96%;
      left: 90%;
    }
  
    .f-wrapper--2 {
      top: 95.6%;
      left:5%;
    }
  
    .f-wrapper--3 {
      top: 5%;
      left: 98%;
    }
  
  }
// File: css/seasonalGardeningFlowers.css
.f-wrapper--2 {
    left: 10vw;
}

.f-wrapper--2 .f{
    transform: translate(-350%,-50%) rotate(-340deg);
}


.f-wrapper--2 .flower__leaf--1 {
    background-color: #ff847c;
}

.f-wrapper--2 .f .flower__leaf--8 {
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #feceab, #4e4e4e);
}

.f-wrapper--2 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #f2d3c4, #f9e2d2, #f1f5f6 99%);
}

.f-wrapper--3 .flower__leaf--1 {
    background-color: #8be9fd;
}

.f-wrapper--3 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #ffbe0b, #4e4e4e);
}

.f-wrapper--3 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #d6f9ff, #add8e6, #c0c0c0 99%);
}

.f-wrapper--1 .flower__leaf--1 {
    background-color: #b19cd9;
}

.f-wrapper--1 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #ffef96, #4e4e4e);
}

.f-wrapper--1 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #ff6b6b, #f3c623, #ffaa00 99%);
}
// File: css/template.css
@import url(https://fonts.googleapis.com/css?family=Dancing+Script:400,700);
/* @font-face {
    font-family: 'Playful';
    src: url('../fonts/Playful/PlayfairDisplay-VariableFont_wght.ttf') format("truetype"),
} */

.gradient_Text{
    background-image: linear-gradient(#E2F4C5, #a0e090);
    color: transparent;
    background-clip: text;
    -webkit-background-clip: text;
}

* {
	padding: 0;
	margin: 0;
	box-sizing: border-box;
}

body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    margin: 0;

    user-select: none;
    
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;

    font-family: 'Dancing Script', sans-serif;
    /* font-family: 'Playful', sans-serif; */

    background-image: url('../images/background/background.jpg');
    backdrop-filter: blur(3px);
    background-size: cover; 
    background-position: center; 
    background-attachment: fixed;
}

body::-webkit-scrollbar{
    width: 2px;
    height: 4px;
}

body::-webkit-scrollbar-track-piece{
    background: green;
}

body::-webkit-scrollbar-thumb{
    background-color: #496989;
}

body::-webkit-scrollbar-thumb:hover{
    background-color: #A8CD9F;
}
/*         ↓↓↓         HEADER         ↓↓↓         */

.nav {
  /* height: 50px; */
  width: 100%;
  position: relative;
  background-color: #496989e5;
  color:#A8CD9F;
  margin-bottom: 0px;
}

.nav > .nav-header {
  display: inline;
}

.nav > .nav-header > .nav-title {
  display: inline-block;
  font-size: 22px;
  color: #fff;
  padding: 10px 10px 10px 10px;
}

.nav > .nav-btn {
  display: none;
}

.nav > .nav-links {
    display: inline;
    float: right;
    font-size: 3vmin;
    margin-top: 20px;
    margin-right: 100px;
}

.nav > .nav-links > a {
  display: inline-block;
  padding: 13px 20px 13px 20px;
  text-decoration: none;
  color: #A8CD9F;
  border-radius: 10%;
  transition: text-shadow 0.2s ease;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
}

.nav > .nav-links > a:hover {
  background-color: rgba(0, 0, 0, 0.2);
  text-shadow: 2px 2px 4px #E2F4C5;
}

.nav > #nav-check {
  display: none;
}

@media (max-width:800px) {
  .nav > .nav-btn {
    display: inline-block;
    position: absolute;
    right: 0px;
    top: 0px;
  }
  .nav > .nav-btn > label {
    display: inline-block;
    width: 50px;
    height: 50px;
    padding: 13px;
  }
  .nav > .nav-btn > label:hover,.nav  #nav-check:checked ~ .nav-btn > label {
    background-color: #496989e5;
  }
  .nav > .nav-btn > label > span {
    display: block;
    width: 25px;
    height: 10px;
    border-top: 2px solid #eee;
  }
  .nav > .nav-links {
    position: absolute;
    display: block;
    width: 100%;
    background-color: #496989;
    transition: all 0.3s ease-in;
    overflow-y: hidden;
    top: 69px;
    left: 0px;
    z-index: 2;
  }
  .nav > .nav-links > a {
    display: block;
    width: 100%;
  }
  .nav > #nav-check:not(:checked) ~ .nav-links {
    height: 0px;
  }
  .nav > #nav-check:checked ~ .nav-links {
    height: calc(100vh - 50px);
    overflow-y: auto;
  }
}













header {
    display: flex;
    justify-content: space-between;
    align-items: center; 
    padding: 15px 0px 12px 0px; 
    background-color: #496989e5;
    color:#A8CD9F;
    margin-bottom: 0px;
}

header a{
    text-decoration: none;
    color:inherit;
    font-size: 1.2em;
    transition: text-shadow 0.2s ease;
    cursor: url(../images/cursors/PottedPlantNS.cur),auto;
}

header a:hover{
    text-shadow: 2px 2px 4px #E2F4C5;
}

.left{
    display: flex;
    justify-content: center;
    align-items: center;
    padding-left: 150px;
}

.left h1{
    font-weight: bold;
    padding-left: 10px;
    margin-right: 60px;
}

.left #plant_Logo{
    width: 80px;
    padding-bottom: 5px;
}

.search_Bar{
    width:50%;
    max-width: 600px;
    background: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    border-radius: 60px;
    padding: 10px 20px;
}

@media (max-width: 600px) {
    .search_Bar{
        display: none;
    }
}

.search_Bar input{
    background: transparent;
    flex:1;
    border:0;
    outline: none;
    padding: 20px 16px;
    font-size: 25px;
    color: #cac7ff;
    font-family: 'Dancing Script', sans-serif;
}

::placeholder{
    color: #cac7ff;
}

.search_Bar button img{
    width:25px;
}
.search_Bar button{
    border: 0;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    background: #58629b;
    cursor: pointer;
}

.right{
    padding-right: 100px;
}

.right nav ul {
    list-style-type: none;
    padding: 0; 
}

.right nav ul li {
    display: inline;
    margin-left: 60px;
    font-size: 2.5vmin;
    padding-bottom: 12px;
}

@media (max-width:1080px) {
    header {
        padding: 8px 0px 7px 0px; 
        margin-bottom: 0px;
    }
    .left{
        padding-left: 20px;
    }
    .left h1{
        font-weight: bold;
        font-size: 25px;
    }
    .left #plant_Logo{
        width: 50px;
    }
    .right{
        display: none;
    }
    .nav > .nav-links {
        margin-top: 6px;
        margin-right: 20px;
    }
    .nav-btn{
      margin-top: 12px;
    }
}

/*         ↑↑↑         HEADER         ↑↑↑         */
/*         ↓↓↓          MAIN          ↓↓↓         */

main {
    flex: 1;
}

/*         ↑↑↑          MAIN          ↑↑↑         */
/*         ↓↓↓         FOOTER         ↓↓↓         */

footer {
    background-color: #496989cb;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 50px;
}

footer p{
    font-weight: bold;
    font-size: max(2.5vmin, 15px);
    margin: 8px 10px;
}

.socialMediaIcon{
    margin: 0px 5px;
    opacity: 60%;
    display: inline-block;
    position: relative;
    width: max(3vmin, 25px);
    height: max(3vmin, 25px);
    transition: opacity 0.3s ease;
}

.socialMediaIcon:hover{
    opacity: 100%;
}

@media (max-width: 600px) {
    footer p {
        font-size: 15px;
        margin: 8px 10px;
    }
    .socialMediaIcon{
        width: 25px;
        height: 25px;
        margin: 0px 3px;
    }
}

/*         ↑↑↑         FOOTER         ↑↑↑         */

// File: css/urbanGardeningFlowers.css
.f-wrapper--2 .flower__leaf--1 {
    background-color: #ff9f1c; /* New color */
}

.f-wrapper--2 .f .flower__leaf--8 {
    transform: rotate(-50deg);
    background-image: linear-gradient(to left bottom, #ffbf00, #f75c03); /* New gradient colors */
}

.f-wrapper--2 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #ff9f1c, #ffc93c, #ffef99 99%); /* New gradient colors */
}

.f-wrapper--3 .flower__leaf--1 {
    background-color: #4caf50; /* New color */
}

.f-wrapper--3 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #ffeb3b, #f44336); /* New gradient colors */
}

.f-wrapper--3 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #4caf50, #8bc34a, #cddc39 99%); /* New gradient colors */
}

.f-wrapper--1 .flower__leaf--1 {
    background-color: #3f51b5; /* New color */
}

.f-wrapper--1 .f .flower__leaf--8 {
    background-image: linear-gradient(to left bottom, #ffeb3b, #9c27b0); /* New gradient colors */
}

.f-wrapper--1 .flower__leaf:not(:first-child) {
    background-image: linear-gradient(to bottom, #3f51b5, #7986cb, #9fa8da 99%); /* New gradient colors */
}

